{"file_contents":{"components/navbar.tsx":{"content":"\"use client\"\n\nimport { useEffect } from \"react\"\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport { usePathname } from \"next/navigation\"\nimport { Menu, X } from \"lucide-react\"\nimport { useMobileMenu } from \"@/components/mobile-menu-context\"\n\nexport default function Navbar() {\n  const pathname = usePathname()\n  const { isMenuOpen, toggleMenu, closeMenu } = useMobileMenu()\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && pathname === \"/\") return true\n    if (path !== \"/\" && pathname?.startsWith(path)) return true\n    return false\n  }\n\n  return (\n    <header className=\"bg-white text-gray-800 relative z-50\">\n      <div className=\"container mx-auto px-4 py-2 flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <Link href=\"/\" onClick={closeMenu}>\n            <div className=\"flex items-center\">\n              <Image\n                src=\"/images/logo-canal-congreso.png\"\n                alt=\"Canal del Congreso\"\n                width={0}\n                height={0}\n                className=\"h-20 md:h-24 w-auto\"\n                priority\n              />\n            </div>\n          </Link>\n        </div>\n\n        <nav className=\"hidden md:flex space-x-6 uppercase text-sm font-medium\">\n          <Link href=\"/\" className={isActive(\"/\") ? \"text-[#3b0764] font-bold\" : \"hover:text-[#3b0764]\"}>\n            Inicio\n          </Link>\n          <Link\n            href=\"/programacion\"\n            className={isActive(\"/programacion\") ? \"text-[#3b0764] font-bold\" : \"hover:text-[#3b0764]\"}\n          >\n            Programación\n          </Link>\n          <Link\n            href=\"/radio\"\n            className={isActive(\"/radio\") ? \"text-[#3b0764] font-bold\" : \"hover:text-[#3b0764]\"}\n          >\n            Radio\n          </Link>\n          <Link\n            href=\"/noticias\"\n            className={isActive(\"/noticias\") ? \"text-[#3b0764] font-bold\" : \"hover:text-[#3b0764]\"}\n          >\n            Noticias\n          </Link>\n          <a\n            href=\"https://www.canaldelcongreso.gob.mx/Transparencia\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"hover:text-[#3b0764]\"\n          >\n            Transparencia\n          </a>\n          <Link\n            href=\"/contacto\"\n            className={isActive(\"/contacto\") ? \"text-[#3b0764] font-bold\" : \"hover:text-[#3b0764]\"}\n          >\n            Contacto\n          </Link>\n        </nav>\n\n        <button\n          className=\"md:hidden text-gray-800 focus:outline-none focus:ring-2 focus:ring-[#3b0764] focus:ring-opacity-50 rounded-md p-2 min-h-[44px] min-w-[44px] flex items-center justify-center touch-manipulation active:scale-95 transition-transform\"\n          onClick={toggleMenu}\n          onTouchStart={(e) => {\n            e.preventDefault()\n            toggleMenu()\n          }}\n          aria-expanded={isMenuOpen}\n          aria-label=\"Menú principal\"\n          type=\"button\"\n          style={{ touchAction: 'manipulation' }}\n        >\n          {isMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n        </button>\n      </div>\n\n      {isMenuOpen && (\n        <div className=\"mobile-menu-container absolute top-full ml-auto w-[85%] bg-white shadow-lg border-t border-gray-200 z-[60] md:hidden\">\n          <nav className=\"px-4 py-4 flex flex-col space-y-2 uppercase text-sm font-medium\">\n            <Link\n              href=\"/\"\n              onClick={closeMenu}\n              className={`block py-3 px-2 min-h-[44px] flex items-center rounded-md transition-colors ${\n                isActive(\"/\") ? \"text-[#3b0764] font-bold bg-purple-50\" : \"hover:text-[#3b0764] hover:bg-gray-50\"\n              }`}\n            >\n              Inicio\n            </Link>\n            <Link\n              href=\"/programacion\"\n              onClick={closeMenu}\n              className={`block py-3 px-2 min-h-[44px] flex items-center rounded-md transition-colors ${\n                isActive(\"/programacion\") ? \"text-[#3b0764] font-bold bg-purple-50\" : \"hover:text-[#3b0764] hover:bg-gray-50\"\n              }`}\n            >\n              Programación\n            </Link>\n            <Link\n              href=\"/radio\"\n              onClick={closeMenu}\n              className={`block py-3 px-2 min-h-[44px] flex items-center rounded-md transition-colors ${\n                isActive(\"/radio\") ? \"text-[#3b0764] font-bold bg-purple-50\" : \"hover:text-[#3b0764] hover:bg-gray-50\"\n              }`}\n            >\n              Radio\n            </Link>\n            <Link\n              href=\"/noticias\"\n              onClick={closeMenu}\n              className={`block py-3 px-2 min-h-[44px] flex items-center rounded-md transition-colors ${\n                isActive(\"/noticias\") ? \"text-[#3b0764] font-bold bg-purple-50\" : \"hover:text-[#3b0764] hover:bg-gray-50\"\n              }`}\n            >\n              Noticias\n            </Link>\n            <a\n              href=\"https://www.canaldelcongreso.gob.mx/Transparencia\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              onClick={closeMenu}\n              className=\"block py-3 px-2 min-h-[44px] flex items-center rounded-md transition-colors hover:text-[#3b0764] hover:bg-gray-50\"\n            >\n              Transparencia\n            </a>\n            <a\n              href=\"https://www.canaldelcongreso.gob.mx/Transparencia/contacto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              onClick={closeMenu}\n              className=\"block py-3 px-2 min-h-[44px] flex items-center rounded-md transition-colors hover:text-[#3b0764] hover:bg-gray-50\"\n            >\n              Contacto\n            </a>\n          </nav>\n        </div>\n      )}\n    </header>\n  )\n}","size_bytes":5754},"app/api/news/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { updateNewsItemInDB, deleteNewsItemFromDB } from '@/lib/api-database'\nimport { parseAdminTimezoneDateTime } from '@/lib/timezone'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n    \n    // Handle publishedAt - if it's an ISO string from Date serialization, use it directly\n    // If it's a naive datetime-local string, parse it in admin timezone\n    if (data.publishedAt) {\n      if (typeof data.publishedAt === 'string' && (data.publishedAt.includes('Z') || /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(data.publishedAt))) {\n        // It's an ISO string from Date serialization, use it directly\n        data.publishedAt = new Date(data.publishedAt)\n      } else {\n        // It's a naive datetime-local string, parse in admin timezone\n        data.publishedAt = await parseAdminTimezoneDateTime(data.publishedAt)\n      }\n    }\n    \n    const newsItem = await updateNewsItemInDB(id, data)\n\n    if (!newsItem) {\n      return NextResponse.json({ error: 'News item not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(newsItem)\n  } catch (error) {\n    console.error('Error updating news item:', error)\n    return NextResponse.json({ error: 'Failed to update news item' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const success = await deleteNewsItemFromDB(id)\n\n    if (!success) {\n      return NextResponse.json({ error: 'News item not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting news item:', error)\n    return NextResponse.json({ error: 'Failed to delete news item' }, { status: 500 })\n  }\n}","size_bytes":1930},"lib/database-env.ts":{"content":"import { Pool } from 'pg'\n\nlet pool: Pool | null = null\n\nexport function getDB(): Pool {\n  if (!pool) {\n    pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      host: process.env.PGHOST,\n      port: parseInt(process.env.PGPORT || '5432'),\n      database: process.env.PGDATABASE,\n      user: process.env.PGUSER,\n      password: process.env.PGPASSWORD,\n    })\n\n    // Set Mexico City timezone for all database connections\n    pool.on('connect', async (client) => {\n      try {\n        await client.query(\"SET timezone = 'America/Mexico_City'\")\n        console.log('Database timezone set to Mexico City')\n      } catch (error) {\n        console.error('Error setting database timezone:', error)\n      }\n    })\n  }\n  return pool\n}\n\nexport function createDatabaseConnectionFromEnv(): Pool {\n  const databaseUrl = process.env.DATABASE_URL\n\n  if (!databaseUrl) {\n    throw new Error('DATABASE_URL environment variable is not set')\n  }\n\n  const pool = new Pool({\n    connectionString: databaseUrl,\n    ssl: databaseUrl.includes('localhost') ? false : { rejectUnauthorized: false }\n  })\n\n  // Set Mexico City timezone for all database connections\n  pool.on('connect', async (client) => {\n    try {\n      await client.query(\"SET timezone = 'America/Mexico_City'\")\n      console.log('Database timezone set to Mexico City')\n    } catch (error) {\n      console.error('Error setting database timezone:', error)\n    }\n  })\n\n  return pool\n}\n\nexport async function initializeDatabase(): Promise<boolean> {\n  const pool = getDB()\n  if (!pool) {\n    console.error('Database connection not available')\n    return false\n  }\n\n  try {\n    // Test the connection first\n    await pool.query('SELECT 1')\n\n    // Create defensoria_content table if it doesn't exist\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS defensoria_content (\n        id SERIAL PRIMARY KEY,\n        section VARCHAR(50) NOT NULL,\n        title TEXT,\n        content TEXT,\n        image_url TEXT,\n        file_url TEXT,\n        metadata JSONB,\n        display_order INTEGER DEFAULT 0,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create indexes\n    await pool.query('CREATE INDEX IF NOT EXISTS idx_defensoria_section ON defensoria_content(section)')\n    await pool.query('CREATE INDEX IF NOT EXISTS idx_defensoria_active ON defensoria_content(is_active)')\n\n    console.log('Database connection and defensoria tables initialized successfully')\n    return true\n  } catch (error) {\n    console.error('Database initialization failed:', error)\n    return false\n  }\n}","size_bytes":2663},"components/organ-image.tsx":{"content":"\n\"use client\"\n\nimport Image from \"next/image\"\nimport { useState } from \"react\"\n\ninterface OrganImageProps {\n  imageUrl: string\n  title: string\n}\n\nexport default function OrganImage({ imageUrl, title }: OrganImageProps) {\n  const [imageSrc, setImageSrc] = useState(imageUrl || \"/placeholder.svg\")\n  const [hasError, setHasError] = useState(false)\n\n  const handleImageError = () => {\n    if (!hasError) {\n      setHasError(true)\n      setImageSrc(\"/placeholder.svg\")\n    }\n  }\n\n  return (\n    <Image \n      src={imageSrc}\n      alt={title} \n      fill \n      className=\"object-cover\"\n      unoptimized={true}\n      onError={handleImageError}\n    />\n  )\n}\n","size_bytes":653},"app/transparencia/focalizada/representantes/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\n\nexport default function RepresentantesPage() {\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">Tus Representantes</h1>\n\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Busca a tus Representantes</h2>\n          <div className=\"bg-gray-50 p-6 rounded-lg shadow-sm\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n              <div>\n                <label htmlFor=\"estado\" className=\"block text-gray-700 mb-2\">\n                  Estado:\n                </label>\n                <select\n                  id=\"estado\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">Selecciona un estado</option>\n                  <option value=\"cdmx\">Ciudad de México</option>\n                  <option value=\"jalisco\">Jalisco</option>\n                  <option value=\"nuevo-leon\">Nuevo León</option>\n                  {/* More options would go here */}\n                </select>\n              </div>\n\n              <div>\n                <label htmlFor=\"distrito\" className=\"block text-gray-700 mb-2\">\n                  Distrito:\n                </label>\n                <select\n                  id=\"distrito\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">Selecciona un distrito</option>\n                  {/* Districts would be populated based on selected state */}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <button\n                type=\"button\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded-md font-medium\"\n              >\n                Buscar\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Legisladores por Grupo Parlamentario</h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Group 1 */}\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <div className=\"p-4 bg-blue-600 text-white text-center\">\n                <h3 className=\"font-semibold\">Grupo Parlamentario A</h3>\n              </div>\n              <div className=\"p-4\">\n                <p className=\"text-center mb-3 font-medium\">Total: 45 legisladores</p>\n                <div className=\"text-center\">\n                  <button className=\"text-blue-600 hover:underline\">Ver detalles</button>\n                </div>\n              </div>\n            </div>\n\n            {/* Group 2 */}\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <div className=\"p-4 bg-red-600 text-white text-center\">\n                <h3 className=\"font-semibold\">Grupo Parlamentario B</h3>\n              </div>\n              <div className=\"p-4\">\n                <p className=\"text-center mb-3 font-medium\">Total: 32 legisladores</p>\n                <div className=\"text-center\">\n                  <button className=\"text-blue-600 hover:underline\">Ver detalles</button>\n                </div>\n              </div>\n            </div>\n\n            {/* Group 3 */}\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <div className=\"p-4 bg-green-600 text-white text-center\">\n                <h3 className=\"font-semibold\">Grupo Parlamentario C</h3>\n              </div>\n              <div className=\"p-4\">\n                <p className=\"text-center mb-3 font-medium\">Total: 28 legisladores</p>\n                <div className=\"text-center\">\n                  <button className=\"text-blue-600 hover:underline\">Ver detalles</button>\n                </div>\n              </div>\n            </div>\n\n            {/* Group 4 */}\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <div className=\"p-4 bg-yellow-600 text-white text-center\">\n                <h3 className=\"font-semibold\">Grupo Parlamentario D</h3>\n              </div>\n              <div className=\"p-4\">\n                <p className=\"text-center mb-3 font-medium\">Total: 21 legisladores</p>\n                <div className=\"text-center\">\n                  <button className=\"text-blue-600 hover:underline\">Ver detalles</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":4908},"app/api/organs/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getOrgans, createOrganInDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const organs = await getOrgans()\n    return NextResponse.json(organs)\n  } catch (error) {\n    console.error('Error fetching organs:', error)\n    return NextResponse.json({ error: 'Failed to fetch organs' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n    const newOrgan = await createOrganInDB(data)\n    return NextResponse.json(newOrgan, { status: 201 })\n  } catch (error) {\n    console.error('Error creating organ:', error)\n    return NextResponse.json({ error: 'Failed to create organ' }, { status: 500 })\n  }\n}\n","size_bytes":756},"app/api/featured-programs/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function GET() {\n  try {\n    // Import database pool dynamically\n    const { pool } = await import('@/lib/database')\n\n    if (!pool) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      )\n    }\n\n    const result = await pool.query(`\n      SELECT \n        id,\n        title,\n        description,\n        schedule,\n        image_url as \"imageUrl\",\n        is_active as \"isActive\",\n        display_order as \"displayOrder\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM featured_programs \n      ORDER BY display_order ASC, created_at ASC\n    `)\n\n    return NextResponse.json(result.rows)\n  } catch (error) {\n    console.error('Error fetching featured programs:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch featured programs' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Import database pool dynamically\n    const { pool } = await import('@/lib/database')\n\n    if (!pool) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      )\n    }\n\n    const data = await request.json()\n    const { title, description, schedule, imageUrl, isActive, displayOrder } = data\n\n    if (!title || !description || !schedule) {\n      return NextResponse.json(\n        { error: 'Title, description, and schedule are required' },\n        { status: 400 }\n      )\n    }\n\n    const result = await pool.query(`\n      INSERT INTO featured_programs (title, description, schedule, image_url, is_active, display_order)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `, [title, description, schedule, imageUrl || null, isActive !== false, displayOrder || 0])\n\n    return NextResponse.json(result.rows[0], { status: 201 })\n  } catch (error) {\n    console.error('Error creating featured program:', error)\n    return NextResponse.json(\n      { error: 'Failed to create featured program' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2118},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  const [mounted, setMounted] = React.useState(false)\n\n  React.useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    return <>{children}</>\n  }\n\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":454},"components/floating-player-context.tsx":{"content":"\"use client\"\n\n// Extend window object for HLS.js\ndeclare global {\n  interface Window {\n    Hls: any\n  }\n}\n\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react'\nimport { usePathname } from 'next/navigation'\nimport { X, Play, Pause, Volume2, VolumeX, Loader2, Radio } from 'lucide-react'\n\ninterface FloatingPlayerContextType {\n  showPlayer: (audioSrc: string, title?: string) => void\n  hidePlayer: () => void\n  isVisible: boolean\n  isPlaying: boolean\n  title: string\n  togglePlay: () => void\n}\n\nconst FloatingPlayerContext = createContext<FloatingPlayerContextType | undefined>(undefined)\n\nexport function useFloatingPlayer() {\n  const context = useContext(FloatingPlayerContext)\n  if (!context) {\n    throw new Error('useFloatingPlayer must be used within a FloatingPlayerProvider')\n  }\n  return context\n}\n\nexport function FloatingPlayerProvider({ children }: { children: React.ReactNode }) {\n  const [isVisible, setIsVisible] = useState(false)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [title, setTitle] = useState('Radio en vivo')\n  const [audioSrc, setAudioSrc] = useState('')\n  const [volume, setVolume] = useState(1)\n  const [isMuted, setIsMuted] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [streamInfo, setStreamInfo] = useState({ isLive: false, listeners: 0, currentProgram: \"\" })\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n  const hlsRef = useRef<any>(null)\n  const pathname = usePathname()\n\n  // Fetch live radio configuration\n  useEffect(() => {\n    if (!isVisible || !audioSrc) return\n\n    const fetchLiveConfig = async () => {\n      try {\n        const response = await fetch('/api/radio/live-config')\n        if (response.ok) {\n          const config = await response.json()\n          setStreamInfo(prev => ({\n            ...prev,\n            isLive: config.isLive,\n            listeners: config.listeners,\n            currentProgram: config.currentProgram\n          }))\n        }\n      } catch (error) {\n        console.error('Error fetching live config:', error)\n      }\n    }\n\n    fetchLiveConfig()\n    const interval = setInterval(fetchLiveConfig, 30000)\n    return () => clearInterval(interval)\n  }, [isVisible, audioSrc])\n\n  useEffect(() => {\n    const audio = audioRef.current\n    if (!audio || !audioSrc) return\n\n    const isHLS = audioSrc.includes(\".m3u8\")\n\n    const setupHLS = async () => {\n      if (isHLS) {\n        try {\n          // Check if browser supports HLS natively first (common on Safari/iOS)\n          if (audio.canPlayType(\"application/vnd.apple.mpegurl\")) {\n            console.log(\"Using native HLS support (likely Safari/iOS)\")\n            audio.src = audioSrc\n            audio.preload = \"metadata\" // Better for mobile\n            return\n          }\n\n          // Try to load HLS.js with multiple fallback strategies\n          let Hls: any = null\n\n          // Strategy 1: Try dynamic import\n          try {\n            const hlsModule = await import(\"hls.js\")\n            Hls = hlsModule.default\n            console.log(\"Loaded HLS.js via dynamic import\")\n          } catch (importError) {\n            console.warn(\"Dynamic import failed:\", importError)\n\n            // Strategy 2: Try loading from CDN as fallback\n            try {\n              if (!window.Hls) {\n                await new Promise((resolve, reject) => {\n                  const script = document.createElement('script')\n                  script.src = 'https://cdn.jsdelivr.net/npm/hls.js@1.6.5/dist/hls.min.js'\n                  script.onload = resolve\n                  script.onerror = reject\n                  document.head.appendChild(script)\n                })\n              }\n              Hls = window.Hls\n              console.log(\"Loaded HLS.js from CDN\")\n            } catch (cdnError) {\n              console.error(\"CDN fallback failed:\", cdnError)\n              throw new Error(\"Could not load HLS.js library\")\n            }\n          }\n\n          if (Hls && Hls.isSupported()) {\n            console.log(\"Setting up HLS.js player for mobile\")\n            const hls = new Hls({\n              enableWorker: false, // Disable worker for better mobile compatibility\n              lowLatencyMode: false, // Disable for mobile stability\n              backBufferLength: 30, // Smaller buffer for mobile\n              maxBufferLength: 15, // Smaller buffer for mobile\n              maxMaxBufferLength: 30, // Smaller buffer for mobile\n              startLevel: -1, // Auto-select quality\n              capLevelToPlayerSize: true, // Optimize for mobile\n              debug: false,\n            })\n\n            hlsRef.current = hls\n            hls.loadSource(audioSrc)\n            hls.attachMedia(audio)\n\n              hls.on(Hls.Events.MANIFEST_PARSED, () => {\n              console.log(\"HLS manifest parsed successfully\")\n              setError(null)\n            })\n\n            hls.on(Hls.Events.ERROR, (event: any, data: any) => {\n              console.error(\"HLS error:\", data)\n              if (data.fatal) {\n                switch (data.type) {\n                  case Hls.ErrorTypes.NETWORK_ERROR:\n                    setError(\"Network error - check your connection\")\n                    break\n                  case Hls.ErrorTypes.MEDIA_ERROR:\n                    setError(\"Media error - stream format issue\")\n                    break\n                  default:\n                    setError(`Stream error: ${data.type}`)\n                    break\n                }\n                setIsPlaying(false)\n                setIsLoading(false)\n              }\n            })\n          } else {\n            // Final fallback: try to play directly\n            console.warn(\"HLS.js not supported, trying direct playback\")\n            audio.src = audioSrc\n          }\n        } catch (err) {\n          console.error(\"Error setting up HLS:\", err)\n          setError(\"Failed to load streaming library. Trying direct playback...\")\n          // Last resort: try direct playback\n          audio.src = audioSrc\n        }\n      } else {\n        audio.src = audioSrc\n      }\n    }\n\n    const handleLoadStart = () => {\n      setIsLoading(true)\n      setError(null)\n    }\n\n    const handleCanPlay = () => {\n      setIsLoading(false)\n      setError(null)\n    }\n\n    const handleError = (e: Event) => {\n      console.error(\"Audio error:\", e)\n      const audioElement = e.target as HTMLAudioElement\n      let errorMessage = \"Error loading audio\"\n\n      if (audioElement.error) {\n        switch (audioElement.error.code) {\n          case MediaError.MEDIA_ERR_ABORTED:\n            errorMessage = \"Audio loading was aborted\"\n            break\n          case MediaError.MEDIA_ERR_NETWORK:\n            errorMessage = \"Network error occurred\"\n            break\n          case MediaError.MEDIA_ERR_DECODE:\n            errorMessage = \"Audio decoding error\"\n            break\n          case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n            errorMessage = \"Audio format not supported\"\n            break\n        }\n      }\n\n      setError(errorMessage)\n      setIsPlaying(false)\n      setIsLoading(false)\n    }\n\n    const handleWaiting = () => {\n      setIsLoading(true)\n    }\n\n    const handlePlaying = () => {\n      setIsLoading(false)\n    }\n\n    setupHLS()\n\n    audio.addEventListener(\"loadstart\", handleLoadStart)\n    audio.addEventListener(\"canplay\", handleCanPlay)\n    audio.addEventListener(\"ended\", () => setIsPlaying(false))\n    audio.addEventListener(\"error\", handleError)\n    audio.addEventListener(\"waiting\", handleWaiting)\n    audio.addEventListener(\"playing\", handlePlaying)\n\n    return () => {\n      audio.removeEventListener(\"loadstart\", handleLoadStart)\n      audio.removeEventListener(\"canplay\", handleCanPlay)\n      audio.removeEventListener(\"ended\", () => setIsPlaying(false))\n      audio.removeEventListener(\"error\", handleError)\n      audio.removeEventListener(\"waiting\", handleWaiting)\n      audio.removeEventListener(\"playing\", handlePlaying)\n\n      if (hlsRef.current) {\n        hlsRef.current.destroy()\n        hlsRef.current = null\n      }\n    }\n  }, [audioSrc])\n\n  const showPlayer = (src: string, playerTitle?: string) => {\n    setAudioSrc(src)\n    setTitle(playerTitle || 'Radio en vivo')\n    setIsVisible(true)\n    setError(null)\n  }\n\n  const hidePlayer = () => {\n    if (audioRef.current) {\n      audioRef.current.pause()\n    }\n    setIsVisible(false)\n    setIsPlaying(false)\n    setAudioSrc('')\n    setError(null)\n\n    if (hlsRef.current) {\n      hlsRef.current.destroy()\n      hlsRef.current = null\n    }\n  }\n\n  const togglePlay = async () => {\n    if (!audioRef.current) return\n\n    try {\n      if (isPlaying) {\n        audioRef.current.pause()\n        setIsPlaying(false)\n      } else {\n        setIsLoading(true)\n        setError(null)\n        \n        const audio = audioRef.current\n        \n        // For mobile devices, ensure we have fresh audio context\n        if (audioSrc && audio.readyState === 0) {\n          console.log(\"Loading audio for mobile playback\")\n          audio.load()\n        }\n\n        // Add mobile-specific handling\n        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\n          console.log(\"Mobile device detected, ensuring audio can play\")\n          \n          // Set volume explicitly for mobile\n          audio.volume = isMuted ? 0 : volume\n          \n          // Try to trigger audio context on mobile\n          if (audio.paused) {\n            const playPromise = audio.play()\n            if (playPromise) {\n              await playPromise\n              setIsPlaying(true)\n              setIsLoading(false)\n            }\n          }\n        } else {\n          // Desktop handling\n          const playPromise = audio.play()\n          if (playPromise !== undefined) {\n            await playPromise\n            setIsPlaying(true)\n            setIsLoading(false)\n          } else {\n            setIsPlaying(true)\n            setIsLoading(false)\n          }\n        }\n      }\n    } catch (err: any) {\n      console.error(\"Error toggling play:\", err)\n      \n      // Enhanced error handling for mobile\n      if (err?.name === \"NotAllowedError\") {\n        setError(\"Toca el botón para reproducir (requerido en móviles)\")\n      } else if (err?.name === \"NotSupportedError\") {\n        setError(\"Formato de audio no soportado en este dispositivo\")\n      } else if (err?.name === \"AbortError\") {\n        setError(\"Reproducción interrumpida - intenta de nuevo\")\n      } else {\n        setError(`Error de reproducción: ${err?.message || 'Desconocido'}`)\n      }\n      \n      setIsPlaying(false)\n      setIsLoading(false)\n    }\n  }\n\n  const toggleMute = () => {\n    if (!audioRef.current) return\n\n    if (isMuted) {\n      audioRef.current.volume = volume\n      setIsMuted(false)\n    } else {\n      audioRef.current.volume = 0\n      setIsMuted(true)\n    }\n  }\n\n  // Check if current page should show floating player\n  const shouldShowFloatingPlayer = !pathname.startsWith('/transmisiones') && !pathname.includes('/episodios')\n\n  // Pause player when navigating to episode pages\n  useEffect(() => {\n    if (pathname.includes('/episodios') && isPlaying && audioRef.current) {\n      audioRef.current.pause()\n      setIsPlaying(false)\n    }\n  }, [pathname, isPlaying])\n\n  // Check if user is on mobile device\n  const isMobileDevice = typeof window !== 'undefined' && /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)\n\n  return (\n    <FloatingPlayerContext.Provider\n      value={{\n        showPlayer,\n        hidePlayer,\n        isVisible,\n        isPlaying,\n        title,\n        togglePlay,\n      }}\n    >\n      {children}\n\n      {/* Player - Only show on allowed pages */}\n      {isVisible && shouldShowFloatingPlayer && (\n        <>\n          {isMobileDevice ? (\n            /* Simple HTML Audio Player for Mobile */\n            <div className=\"fixed bottom-4 left-4 right-4 bg-black text-white rounded-lg shadow-2xl z-50 p-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Radio size={16} className=\"text-red-500\" />\n                  <span className=\"text-sm font-medium truncate\">{title}</span>\n                </div>\n                <button\n                  onClick={hidePlayer}\n                  className=\"text-gray-400 hover:text-white transition-colors\"\n                  aria-label=\"Close player\"\n                >\n                  <X size={16} />\n                </button>\n              </div>\n              \n              {/* Simple HTML5 Audio Controls for Mobile */}\n              <audio \n                ref={audioRef}\n                src={audioSrc}\n                controls\n                playsInline\n                crossOrigin=\"anonymous\"\n                webkit-playsinline=\"true\"\n                preload=\"none\"\n                className=\"w-full h-8\"\n                style={{\n                  backgroundColor: '#1f2937',\n                  borderRadius: '4px'\n                }}\n              />\n              \n              {streamInfo.isLive && (\n                <div className=\"flex items-center justify-center mt-2 text-xs\">\n                  <div className=\"flex items-center space-x-1 text-green-400\">\n                    <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span>EN VIVO</span>\n                  </div>\n                  {streamInfo.listeners > 0 && (\n                    <span className=\"text-gray-300 ml-2\">({streamInfo.listeners} oyentes)</span>\n                  )}\n                </div>\n              )}\n\n              {error && (\n                <div className=\"text-red-400 text-xs text-center mt-2\">\n                  {error}\n                </div>\n              )}\n            </div>\n          ) : (\n            /* Advanced Floating Player for Desktop */\n            <div className=\"fixed bottom-4 right-4 bg-black text-white rounded-lg shadow-2xl z-50 w-80 max-w-sm\">\n              <audio \n                ref={audioRef} \n                preload=\"none\"\n                crossOrigin=\"anonymous\"\n                playsInline\n                controls={false}\n                muted={false}\n                autoPlay={false}\n                webkit-playsinline=\"true\"\n              />\n\n              <div className=\"p-4\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Radio size={16} className=\"text-red-500\" />\n                    <span className=\"text-sm font-medium truncate\">{title}</span>\n                  </div>\n                  <button\n                    onClick={hidePlayer}\n                    className=\"text-gray-400 hover:text-white transition-colors\"\n                    aria-label=\"Close player\"\n                  >\n                    <X size={18} />\n                  </button>\n                </div>\n\n                {/* Stream Info */}\n                {streamInfo.isLive && (\n                  <div className=\"flex items-center justify-between mb-3 text-xs\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex items-center space-x-1 text-green-400\">\n                        <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                        <span>LIVE</span>\n                      </div>\n                      {streamInfo.listeners > 0 && (\n                        <span className=\"text-gray-300\">({streamInfo.listeners} oyentes)</span>\n                      )}\n                    </div>\n                    {streamInfo.currentProgram && (\n                      <div className=\"text-gray-300 truncate max-w-32\">\n                        {streamInfo.currentProgram}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Controls */}\n                <div className=\"flex items-center justify-between\">\n                  <button\n                    onClick={toggleMute}\n                    className=\"text-white hover:text-gray-300 transition-colors\"\n                    aria-label={isMuted ? \"Unmute\" : \"Mute\"}\n                  >\n                    {isMuted ? <VolumeX size={20} /> : <Volume2 size={20} />}\n                  </button>\n\n                  <button\n                    onClick={togglePlay}\n                    className=\"text-white bg-red-600 hover:bg-red-700 active:bg-red-800 rounded-full p-3 flex items-center justify-center transition-colors\"\n                    disabled={isLoading}\n                    aria-label={isPlaying ? \"Pause\" : \"Play\"}\n                  >\n                    {isLoading ? (\n                      <Loader2 size={20} className=\"animate-spin\" />\n                    ) : isPlaying ? (\n                      <Pause size={20} />\n                    ) : (\n                      <Play size={20} fill=\"white\" />\n                    )}\n                  </button>\n\n                  <div className=\"text-xs text-gray-400\">\n                    {streamInfo.isLive ? \"EN VIVO\" : \"RADIO\"}\n                  </div>\n                </div>\n\n                {/* Error Message */}\n                {error && (\n                  <div className=\"text-red-400 text-xs text-center mt-2 px-2\">\n                    {error}\n                    {error.includes(\"interacción\") && (\n                      <div className=\"text-gray-400 text-xs mt-1\">\n                        Los navegadores móviles requieren interacción del usuario\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </FloatingPlayerContext.Provider>\n  )\n}","size_bytes":17796},"app/noticias/todas/page.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport SocialBar from \"@/components/social-bar\"\nimport Footer from \"@/components/footer\"\nimport NewsSubmenu from \"@/components/news-submenu\"\nimport ChannelBar from \"@/components/channel-bar\"\nimport NewsGrid from \"@/components/news-grid\"\nimport { useState, useEffect } from \"react\"\n\ninterface NewsItem {\n  id: string\n  title: string\n  summary: string\n  content: string\n  imageUrl: string\n  category?: string\n  publishedAt: Date\n  createdAt: Date\n  status?: string\n}\n\n\nfunction createSlug(title: string): string {\n  return title\n    .toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9\\s]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/^-+|-+$/g, '')\n}\n\nexport default function AllNewsPage() {\n  const [newsItems, setNewsItems] = useState<NewsItem[]>([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPages, setTotalPages] = useState(1)\n  const [total, setTotal] = useState(0)\n  const [loading, setLoading] = useState(true)\n\n  const fetchNews = async (page: number) => {\n    try {\n      setLoading(true)\n      \n      // Note: Auto-publish moved to server-side for security\n\n      const response = await fetch(`/api/news?page=${page}&limit=20`, {\n        cache: 'no-store'\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        const newsData = data.news || data // Handle both formats\n        \n        setNewsItems(newsData)\n        setTotal(data.total || newsData.length)\n        setTotalPages(data.totalPages || 1)\n        setCurrentPage(page)\n      } else {\n        console.error('Failed to fetch news:', response.status)\n        setNewsItems([])\n      }\n    } catch (error) {\n      console.error('Failed to load news:', error)\n      setNewsItems([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchNews(1)\n  }, [])\n\n  const handlePageChange = (page: number) => {\n    fetchNews(page)\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-white\">\n      <main className=\"flex-grow bg-[url('/images/light-hexagon-pattern.png')] bg-repeat\">\n        <ChannelBar />\n        <NewsSubmenu />\n\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">\n              Todas las Noticias\n            </h1>\n            <p className=\"text-gray-600 text-lg\">\n              Todas las noticias del Congreso ordenadas cronológicamente desde la más reciente\n            </p>\n            <div className=\"h-1 w-20 bg-[#e11d48] mt-4\"></div>\n          </div>\n\n          \n\n          {/* News Grid */}\n          {loading ? (\n            <div className=\"flex justify-center items-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n              <span className=\"ml-2 text-gray-600\">Cargando noticias...</span>\n            </div>\n          ) : (\n            <NewsGrid \n              newsItems={newsItems} \n              hideSearch={false}\n              currentPage={currentPage}\n              totalPages={totalPages}\n              total={total}\n              onPageChange={handlePageChange}\n            />\n          )}\n\n          {newsItems.length === 0 && (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto mb-4 bg-gray-200 rounded-full flex items-center justify-center\">\n                <svg\n                  className=\"w-12 h-12 text-gray-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">\n                No hay noticias disponibles\n              </h3>\n              <p className=\"text-gray-500\">\n                Las noticias aparecerán aquí cuando estén disponibles.\n              </p>\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Footer */}\n      <Footer />\n\n      {/* Social Bar */}\n      <SocialBar />\n    </div>\n  )\n}\n","size_bytes":4488},"lib/email.ts":{"content":"import nodemailer from \"nodemailer\"\nimport fs from \"fs/promises\"\nimport path from \"path\"\n\nexport type ContactFormData = {\n  nombre: string\n  email: string\n  telefono?: string\n  asunto: string\n  empresa?: string\n  puesto?: string\n  ciudad?: string\n  estado?: string\n  mensaje?: string\n}\n\ninterface SmtpConfig {\n  host: string\n  port: string\n  secure: boolean\n  user: string\n  pass: string\n  from: string\n  to: string\n}\n\nconst CONFIG_FILE = path.join(process.cwd(), \"smtp-config.json\")\n\nasync function getSmtpConfig(): Promise<SmtpConfig | null> {\n  try {\n    const configData = await fs.readFile(CONFIG_FILE, \"utf-8\")\n    return JSON.parse(configData)\n  } catch (error) {\n    console.log(\"No SMTP configuration found, using simulation mode\")\n    return null\n  }\n}\n\nfunction createEmailTemplate(data: ContactFormData): string {\n  return `\n    <html>\n      <body style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background-color: #2e004f; color: white; padding: 20px; text-align: center;\">\n          <h1>Canal del Congreso - Formulario de Contacto</h1>\n        </div>\n\n        <div style=\"padding: 20px; background-color: #f9f9f9;\">\n          <h2 style=\"color: #2e004f;\">Nuevo mensaje de contacto</h2>\n\n          <table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold; width: 150px;\">Nombre:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.nombre}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Email:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.email}</td>\n            </tr>\n            ${data.telefono ? `\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Teléfono:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.telefono}</td>\n            </tr>\n            ` : ''}\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Asunto:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.asunto}</td>\n            </tr>\n            ${data.empresa ? `\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Empresa:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.empresa}</td>\n            </tr>\n            ` : ''}\n            ${data.puesto ? `\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Puesto:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.puesto}</td>\n            </tr>\n            ` : ''}\n            ${data.ciudad ? `\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Ciudad:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.ciudad}</td>\n            </tr>\n            ` : ''}\n            ${data.estado ? `\n            <tr>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">Estado:</td>\n              <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${data.estado}</td>\n            </tr>\n            ` : ''}\n          </table>\n\n          ${data.mensaje ? `\n          <div style=\"margin: 20px 0;\">\n            <h3 style=\"color: #2e004f;\">Mensaje:</h3>\n            <div style=\"background-color: white; padding: 15px; border-left: 4px solid #2e004f; margin: 10px 0;\">\n              ${data.mensaje.replace(/\\n/g, '<br>')}\n            </div>\n          </div>\n          ` : ''}\n        </div>\n\n        <div style=\"background-color: #2e004f; color: white; padding: 15px; text-align: center;\">\n          <p style=\"margin: 0;\">Canal del Congreso - Sistema de Contacto</p>\n          <p style=\"margin: 5px 0 0 0; font-size: 12px;\">Este mensaje fue enviado desde el formulario de contacto del sitio web.</p>\n        </div>\n      </body>\n    </html>\n  `\n}\n\n// Generic email interface\nexport interface EmailData {\n  to: string\n  subject: string\n  html: string\n  replyTo?: string\n  from?: string\n}\n\n// Generic email sending function\nexport async function sendEmail(data: EmailData) {\n  try {\n    const smtpConfig = await getSmtpConfig()\n\n    if (!smtpConfig) {\n      // Fallback to simulation mode\n      console.log(\"SMTP not configured. Email would be sent with the following data:\", {\n        to: data.to,\n        from: data.from || \"notificaciones@canaldelcongreso.gob.mx\",\n        subject: data.subject,\n        data: data,\n      })\n      return { \n        success: false, \n        error: \"SMTP no está configurado. Por favor, configura SMTP en el panel de administración.\" \n      }\n    }\n\n    // Use defensoria email address if this is a defensoria email\n    const finalDestination = data.to === 'defensoria.audiencia@canaldelcongreso.gob.mx' \n      ? 'defensoria.audiencia@canaldelcongreso.gob.mx' \n      : data.to\n\n    // Create nodemailer transporter\n    const transporter = nodemailer.createTransport({\n      host: smtpConfig.host,\n      port: parseInt(smtpConfig.port),\n      secure: smtpConfig.secure,\n      auth: {\n        user: smtpConfig.user,\n        pass: smtpConfig.pass,\n      },\n      // Add timeout settings\n      connectionTimeout: 10000, // 10 seconds\n      greetingTimeout: 5000, // 5 seconds\n      socketTimeout: 10000, // 10 seconds\n    })\n\n    // Verify SMTP connection\n    try {\n      await transporter.verify()\n    } catch (verifyError) {\n      console.error(\"SMTP verification failed:\", verifyError)\n      let errorMessage = \"Error de verificación SMTP: \"\n      if (verifyError instanceof Error) {\n        if (verifyError.message.includes('EAUTH')) {\n          errorMessage += \"Credenciales incorrectas (usuario/contraseña)\"\n        } else if (verifyError.message.includes('ECONNECTION')) {\n          errorMessage += \"No se puede conectar al servidor SMTP\"\n        } else if (verifyError.message.includes('ETIMEDOUT')) {\n          errorMessage += \"Tiempo de conexión agotado\"\n        } else {\n          errorMessage += verifyError.message\n        }\n      } else {\n        errorMessage += \"Error desconocido\"\n      }\n      return { success: false, error: errorMessage }\n    }\n\n    // Send email\n    const info = await transporter.sendMail({\n      from: data.from || `\"Canal del Congreso\" <${smtpConfig.from}>`,\n      to: finalDestination,\n      replyTo: data.replyTo,\n      subject: data.subject,\n      html: data.html,\n    })\n\n    console.log(\"Email sent successfully:\", info.messageId)\n    return { success: true, messageId: info.messageId }\n\n  } catch (error: any) {\n    console.error(\"Error sending email:\", error)\n    let errorMessage = \"Error al enviar email: \"\n    if (error instanceof Error) {\n      if (error.message.includes('EAUTH')) {\n        errorMessage += \"Credenciales incorrectas\"\n      } else if (error.message.includes('ECONNECTION')) {\n        errorMessage += \"Error de conexión con el servidor\"\n      } else if (error.message.includes('ETIMEDOUT')) {\n        errorMessage += \"Tiempo de conexión agotado\"\n      } else {\n        errorMessage += error.message\n      }\n    } else {\n      errorMessage += \"Error desconocido\"\n    }\n    return { success: false, error: errorMessage }\n  }\n}\n\nexport async function sendContactEmail(data: ContactFormData) {\n  try {\n    const smtpConfig = await getSmtpConfig()\n\n    if (!smtpConfig) {\n      // Fallback to simulation mode\n      console.log(\"SMTP not configured. Email would be sent with the following data:\", {\n        to: \"contacto@canaldelcongreso.gob.mx\",\n        from: \"notificaciones@canaldelcongreso.gob.mx\",\n        subject: `Formulario de Contacto: ${data.asunto}`,\n        data: data,\n      })\n      return { \n        success: false, \n        error: \"SMTP no está configurado. Por favor, configura SMTP en el panel de administración.\" \n      }\n    }\n\n    // Create nodemailer transporter\n    const transporter = nodemailer.createTransport({\n      host: smtpConfig.host,\n      port: parseInt(smtpConfig.port),\n      secure: smtpConfig.secure,\n      auth: {\n        user: smtpConfig.user,\n        pass: smtpConfig.pass,\n      },\n      // Add timeout settings\n      connectionTimeout: 10000, // 10 seconds\n      greetingTimeout: 5000, // 5 seconds\n      socketTimeout: 10000, // 10 seconds\n    })\n\n    // Verify SMTP connection\n    try {\n      await transporter.verify()\n    } catch (verifyError) {\n      console.error(\"SMTP verification failed:\", verifyError)\n      let errorMessage = \"Error de verificación SMTP: \"\n      if (verifyError instanceof Error) {\n        if (verifyError.message.includes('EAUTH')) {\n          errorMessage += \"Credenciales incorrectas (usuario/contraseña)\"\n        } else if (verifyError.message.includes('ECONNECTION')) {\n          errorMessage += \"No se puede conectar al servidor SMTP\"\n        } else if (verifyError.message.includes('ETIMEDOUT')) {\n          errorMessage += \"Tiempo de conexión agotado\"\n        } else {\n          errorMessage += verifyError.message\n        }\n      } else {\n        errorMessage += \"Error desconocido\"\n      }\n      return { success: false, error: errorMessage }\n    }\n\n    // Send email\n    const info = await transporter.sendMail({\n      from: `\"Canal del Congreso\" <${smtpConfig.from}>`,\n      to: smtpConfig.to,\n      replyTo: data.email,\n      subject: `Formulario de Contacto: ${data.asunto}`,\n      html: createEmailTemplate(data),\n      text: `\n        Nuevo mensaje de contacto de ${data.nombre}\n\n        Email: ${data.email}\n        ${data.telefono ? `Teléfono: ${data.telefono}` : ''}\n        Asunto: ${data.asunto}\n        ${data.empresa ? `Empresa: ${data.empresa}` : ''}\n        ${data.puesto ? `Puesto: ${data.puesto}` : ''}\n        ${data.ciudad ? `Ciudad: ${data.ciudad}` : ''}\n        ${data.estado ? `Estado: ${data.estado}` : ''}\n\n        ${data.mensaje ? `Mensaje:\\n${data.mensaje}` : ''}\n      `,\n    })\n\n    console.log(\"Email sent successfully:\", info.messageId)\n    return { success: true, messageId: info.messageId }\n\n  } catch (error) {\n    console.error(\"Error sending email:\", error)\n    let errorMessage = \"Error al enviar email: \"\n    if (error instanceof Error) {\n      if (error.message.includes('EAUTH')) {\n        errorMessage += \"Credenciales incorrectas\"\n      } else if (error.message.includes('ECONNECTION')) {\n        errorMessage += \"Error de conexión con el servidor\"\n      } else if (error.message.includes('ETIMEDOUT')) {\n        errorMessage += \"Tiempo de conexión agotado\"\n      } else {\n        errorMessage += error.message\n      }\n    } else {\n      errorMessage += \"Error desconocido\"\n    }\n    return { success: false, error: errorMessage }\n  }\n}","size_bytes":10899},"README.md":{"content":"\n# Radio Congreso - Plataforma Digital de Transmisión Legislativa\n\nUna aplicación integral de Next.js para gestionar y transmitir contenido radial del congreso, noticias, transmisiones en vivo e información de transparencia.\n\n## Tabla de Contenidos\n\n- [Descripción General](#descripción-general)\n- [Arquitectura](#arquitectura)\n- [Características](#características)\n- [Configuración e Instalación](#configuración-e-instalación)\n- [Configuración del Entorno](#configuración-del-entorno)\n- [Esquema de Base de Datos](#esquema-de-base-de-datos)\n- [Endpoints de API](#endpoints-de-api)\n- [Componentes](#componentes)\n- [Páginas y Rutas](#páginas-y-rutas)\n- [Panel de Administración](#panel-de-administración)\n- [SEO y Sitemap](#seo-y-sitemap)\n- [Despliegue](#despliegue)\n- [Estructura de Archivos](#estructura-de-archivos)\n- [Guías de Desarrollo](#guías-de-desarrollo)\n\n## Descripción General\n\nRadio Congreso es una aplicación web full-stack construida con Next.js 15, React 19 y PostgreSQL. Sirve como plataforma digital de transmisión para contenido legislativo del Congreso, ofreciendo:\n\n- Transmisión de radio en vivo y gestión de podcasts\n- Publicación y categorización de artículos de noticias\n- Capacidades de transmisión de video en vivo\n- Sistema administrativo de gestión de contenido\n- Portal de transparencia e información legislativa\n- Diseño responsive con características de accesibilidad\n\n## Arquitectura\n\n### Stack Tecnológico\n\n- **Frontend**: Next.js 15, React 19, TypeScript\n- **Estilos**: Tailwind CSS, componentes Radix UI\n- **Backend**: Rutas API de Next.js, PostgreSQL\n- **Autenticación**: Auth basado en JWT con cookies HTTP-only\n- **Almacenamiento de Archivos**: Sistema de archivos local con servicio API\n- **Tiempo Real**: Renderizado del lado del servidor con contenido dinámico\n- **Despliegue**: Replit Cloud Run (Autoescalado)\n\n### Librerías Principales\n\n```json\n{\n  \"core\": [\"next\", \"react\", \"typescript\"],\n  \"ui\": [\"@radix-ui/*\", \"tailwindcss\", \"lucide-react\"],\n  \"database\": [\"pg\", \"@types/pg\"],\n  \"auth\": [\"jsonwebtoken\", \"bcryptjs\", \"jose\"],\n  \"content\": [\"quill\", \"@uiw/react-md-editor\"],\n  \"media\": [\"hls.js\"],\n  \"utils\": [\"date-fns\", \"zod\", \"xlsx\"]\n}\n```\n\n## Características\n\n### Gestión de Contenido\n- **Sistema de Noticias**: Editor de texto enriquecido, programación, categorías, subida de imágenes\n- **Programas de Radio**: Gestión de episodios, manejo de archivos de audio, metadatos\n- **Transmisiones en Vivo**: Transmisión de video en tiempo real con soporte HLS\n- **Programación**: Gestión de horarios de programación basada en grilla\n\n### Características de Usuario\n- **Diseño Responsive**: Enfoque mobile-first con accesibilidad\n- **Soporte Multicanal**: Diferentes canales de radio (45.1, 45.2, 45.3)\n- **Búsqueda y Filtros**: Descubrimiento de contenido a través de todos los tipos de medios\n- **Integración Social**: Feeds de Twitter y compartir en redes sociales\n- **Soporte de Temas**: Modo claro/oscuro con detección de preferencias del sistema\n\n### Características Administrativas\n- **Acceso Basado en Roles**: Permisos de Administrador, Editor, Visualizador\n- **Operaciones Masivas**: Subida masiva para contenido y programación\n- **Gestión de Base de Datos**: Herramientas de migración de esquemas y gestión de datos\n- **Configuración de Email**: Configuración SMTP para notificaciones\n- **Gestión de Archivos**: Manejo de subidas con validación y optimización\n\n## Configuración e Instalación\n\n### Prerrequisitos\n- Node.js 18+ \n- Base de datos PostgreSQL\n- Servidor SMTP (opcional)\n\n### Pasos de Instalación\n\n1. **Clonar e Instalar**\n```bash\ngit clone <repository-url>\ncd radio-congreso\nnpm install\n```\n\n2. **Configuración del Entorno**\n```bash\ncp .env.example .env.local\n# Configurar las variables de entorno\n```\n\n3. **Configuración de Base de Datos**\n```bash\n# Ejecutar configuración inicial de base de datos\nnpm run dev\n# Navegar a /admin y usar herramientas de inicialización de base de datos\n```\n\n4. **Iniciar Servidor de Desarrollo**\n```bash\nnpm run dev\n# La aplicación corre en http://localhost:3000\n```\n\n## Configuración del Entorno\n\n### Variables Requeridas\n\n```env\n# Configuración de Base de Datos\nDATABASE_URL=postgresql://user:password@host:port/database\nPGDATABASE=database_name\nPGHOST=localhost\nPGPORT=5432\nPGUSER=username\nPGPASSWORD=password\n\n# URLs de la Aplicación\nNEXT_PUBLIC_BASE_URL=http://localhost:3000\nNEXT_PUBLIC_APP_URL=http://localhost:3000\n\n# Autenticación\nJWT_SECRET=your-super-secret-key-change-in-production\n\n# Seguridad de API\nX_BEARER_TOKEN=your-api-bearer-token\n\n# Email (Opcional)\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\n```\n\n### Configuraciones de Producción\n\n```env\nNODE_ENV=production\nNEXT_PUBLIC_BASE_URL=https://your-domain.com\n# Usar secretos JWT más fuertes y certificados SSL apropiados\n```\n\n## Esquema de Base de Datos\n\n### Tablas Principales\n\n#### Sistema de Noticias\n```sql\n-- news: Artículos principales de noticias\nCREATE TABLE news (\n  id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  summary TEXT,\n  content TEXT,\n  imageUrl VARCHAR(500),\n  category VARCHAR(100),\n  status VARCHAR(20) DEFAULT 'draft',\n  publishedAt TIMESTAMP,\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n\n-- video_news: Contenido de video\nCREATE TABLE video_news (\n  id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  thumbnailUrl VARCHAR(500),\n  videoUrl VARCHAR(500),\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n```\n\n#### Sistema de Radio\n```sql\n-- radio_programs: Definiciones de programas\nCREATE TABLE radio_programs (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  logoUrl VARCHAR(500),\n  isActive BOOLEAN DEFAULT true,\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n\n-- radio_episodes: Episodios individuales\nCREATE TABLE radio_episodes (\n  id SERIAL PRIMARY KEY,\n  programId INTEGER REFERENCES radio_programs(id),\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  audioUrl VARCHAR(500),\n  duration INTEGER,\n  publishedAt TIMESTAMP,\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n```\n\n#### Transmisiones en Vivo\n```sql\n-- live_streams: Transmisiones de video en vivo\nCREATE TABLE live_streams (\n  id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  thumbnailUrl VARCHAR(500),\n  streamUrl VARCHAR(500),\n  channel VARCHAR(50),\n  isLive BOOLEAN DEFAULT false,\n  status VARCHAR(20) DEFAULT 'offline',\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n```\n\n#### Datos Legislativos\n```sql\n-- legislators: Representantes del congreso\nCREATE TABLE legislators (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  position VARCHAR(100),\n  party VARCHAR(100),\n  state VARCHAR(100),\n  photoUrl VARCHAR(500),\n  bio TEXT,\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n\n-- organs: Órganos/comités del congreso\nCREATE TABLE organs (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  logoUrl VARCHAR(500),\n  type VARCHAR(100),\n  isActive BOOLEAN DEFAULT true,\n  createdAt TIMESTAMP DEFAULT NOW()\n);\n```\n\n## Endpoints de API\n\n### APIs Públicas\n\n#### Endpoints de Noticias\n```typescript\nGET /api/news/all          // Obtener todas las noticias publicadas\nGET /api/news/[id]         // Obtener artículo específico\nPOST /api/news             // Crear noticia (solo admin)\nPUT /api/news/[id]         // Actualizar noticia (solo admin)\nDELETE /api/news/[id]      // Eliminar noticia (solo admin)\nPOST /api/news/publish-scheduled // Auto-publicar contenido programado\n```\n\n#### Endpoints de Radio\n```typescript\nGET /api/radio/programs    // Obtener todos los programas de radio\nGET /api/radio/episodes    // Obtener episodios con filtros\nGET /api/radio/live-status // Obtener estado actual de radio en vivo\nGET /api/radio/config      // Obtener configuración de radio\n```\n\n#### Transmisiones en Vivo\n```typescript\nGET /api/live-streams      // Obtener transmisiones en vivo activas\nGET /api/live-streams/all  // Obtener todas las transmisiones (admin)\nPOST /api/live-streams     // Crear transmisión (admin)\nPUT /api/live-streams/[id] // Actualizar transmisión (admin)\n```\n\n#### Datos Legislativos\n```typescript\nGET /api/legislators       // Obtener legisladores con filtros\nGET /api/legislators/estados // Obtener lista de estados\nGET /api/organs           // Obtener órganos del congreso\nGET /api/parliamentary-groups // Obtener grupos parlamentarios\n```\n\n### APIs de Administración\n\n#### Gestión de Contenido\n```typescript\nPOST /api/upload          // Endpoint de subida de archivos\nGET /api/files/[...path]  // Endpoint de servicio de archivos\nPOST /api/programacion/upload // Subida de programación (Excel)\n```\n\n#### Gestión del Sistema\n```typescript\nGET /api/admin/test-connection   // Prueba de conexión de base de datos\nPOST /api/admin/init-db          // Inicializar base de datos\nPOST /api/admin/create-missing-tables // Actualizaciones de esquema\n```\n\n### Autenticación\n```typescript\nPOST /api/auth/login      // Login de usuario\nPOST /api/auth/logout     // Logout de usuario\nGET /api/auth/verify      // Verificación de token\n```\n\n## SEO y Sitemap\n\n### Generación Automática de Sitemap\n\nLa plataforma incluye un sistema completo de generación de sitemap XML que mejora el SEO y la indexación en motores de búsqueda.\n\n#### Características del Sitemap\n- **Generación Dinámica**: El sitemap se actualiza automáticamente con contenido nuevo\n- **Múltiples Tipos de Contenido**: Incluye páginas estáticas, noticias, programas de radio y legisladores\n- **Configuración SEO**: Prioridades y frecuencias de cambio optimizadas\n- **Panel de Administración**: Gestión desde `/admin/sitemap`\n\n#### URLs del Sitemap\n```\n/sitemap.xml              // Sitemap principal (dinámico)\n/robots.txt               // Archivo robots.txt\n```\n\n#### Contenido Incluido en el Sitemap\n- **Páginas Estáticas**: Todas las páginas principales del sitio\n- **Noticias**: Artículos individuales y páginas de categorías\n- **Programas de Radio**: Páginas de programas y episodios\n- **Legisladores**: Perfiles individuales de legisladores\n- **Transparencia**: Todas las secciones del portal de transparencia\n\n#### Configuración SEO por Tipo de Contenido\n```xml\n<!-- Páginas principales -->\n<priority>0.8</priority>\n<changefreq>weekly</changefreq>\n\n<!-- Noticias -->\n<priority>0.6</priority>\n<changefreq>monthly</changefreq>\n\n<!-- Programas de radio -->\n<priority>0.7</priority>\n<changefreq>weekly</changefreq>\n\n<!-- Legisladores -->\n<priority>0.5</priority>\n<changefreq>monthly</changefreq>\n```\n\n#### Gestión Administrativa del Sitemap (`/admin/sitemap`)\n\nEl panel administrativo permite:\n- **Regeneración Manual**: Forzar actualización del sitemap\n- **Estadísticas**: Ver número total de URLs incluidas\n- **Monitoreo**: Verificar última actualización\n- **Configuración**: Instrucciones para Google Search Console y Bing\n\n#### Robots.txt\n```\nUser-agent: *\nAllow: /\n\n# Bloquear área administrativa\nDisallow: /admin/\nDisallow: /api/\n\n# Bloquear navegación de directorio de uploads\nDisallow: /uploads/\n\nSitemap: https://your-domain.com/sitemap.xml\n```\n\n## Componentes\n\n### Componentes UI (`components/ui/`)\n\nConstruidos con primitivos Radix UI:\n- **Formularios**: Input, Textarea, Select, Checkbox, Switch\n- **Layout**: Card, Sheet, Dialog, Tabs, Accordion\n- **Navegación**: Button, DropdownMenu, NavigationMenu\n- **Visualización de Datos**: Table, Badge, Avatar, Progress\n- **Retroalimentación**: Toast, Alert, Skeleton\n\n### Componentes Personalizados\n\n#### Componentes de Layout\n```typescript\n// Navegación y estructura\nNavbar                    // Navegación principal con menú responsive\nFooter                    // Pie de página con enlaces\nSocialBar                // Enlaces de redes sociales\nConditionalComponents     // Renderizado de componentes según contexto\n```\n\n#### Visualización de Contenido\n```typescript\n// Noticias y artículos\nNewsCarousel             // Carrusel de noticias destacadas\nNewsGrid                 // Grilla de artículos de noticias\nNewsSubmenu              // Navegación de categorías de noticias\n\n// Radio y audio\nAudioPlayer              // Reproductor de audio HTML5\nRadioLogo                // Logos dinámicos de canales de radio\nProgramCarousel          // Carrusel de showcase de programas\n\n// Video y streaming\nVideoGrid                // Grilla de contenido de video\nVideoCarousel            // Carrusel de contenido de video\n```\n\n#### Componentes Interactivos\n```typescript\n// Búsqueda y descubrimiento\nRadioSearch              // Búsqueda de contenido de radio\nLegislatorSearch         // Búsqueda de miembros legislativos\n\n// Gestión de contenido\nRichTextEditor           // Editor basado en Quill.js\nBulkNewsUpload           // Subida CSV/Excel para noticias\nBulkEpisodeUpload        // Creación masiva de episodios\n\n// Utilidades\nSafeImage                // Componente de imagen con manejo de errores\nErrorBoundary            // Boundary de errores de React\nThemeProvider            // Contexto de tema claro/oscuro\n```\n\n### Proveedores de Contexto\n\n```typescript\n// Gestión de estado global\nMobileMenuProvider       // Estado de navegación móvil\nFloatingPlayerProvider   // Estado del reproductor de audio\nThemeProvider           // Gestión de preferencias de tema\n```\n\n## Páginas y Rutas\n\n### Rutas Públicas\n\n#### Secciones Principales\n```\n/                       // Página de inicio con contenido destacado\n/noticias              // Hub de sección de noticias\n/noticias/[id]         // Artículo individual de noticias\n/noticias/todas        // Archivo de todas las noticias\n/noticias/categorias/[category] // Noticias filtradas por categoría\n/noticias/en-vivo      // Sección de noticias/video en vivo\n```\n\n#### Sección de Radio\n```\n/radio                 // Hub de radio con reproductor en vivo\n/radio/[programSlug]   // Páginas de programas individuales\n/radio/[programSlug]/episodios // Archivo de episodios del programa\n/radio/legisladores    // Perfiles de miembros legislativos\n/radio/legisladores/[id] // Página individual de legislador\n/radio/legisladores/busqueda // Búsqueda de legisladores\n```\n\n#### Portal de Transparencia\n```\n/transparencia         // Hub de transparencia\n/transparencia/focalizada // Transparencia focalizada\n/transparencia/compromisos // Sección de compromisos\n/transparencia/datos-abiertos // Portal de datos abiertos\n/transparencia/plataforma-nacional // Plataforma nacional\n```\n\n#### Páginas de Utilidad\n```\n/programacion          // Programación de TV\n/transmisiones         // Transmisiones en vivo\n/contacto             // Información de contacto\n/login                // Login de administrador\n```\n\n### Rutas de Administración (`/admin/*`)\n\n#### Gestión de Contenido\n```\n/admin                 // Panel de control\n/admin/news            // Gestión de noticias\n/admin/video-news      // Gestión de video noticias\n/admin/live-streams    // Gestión de transmisiones en vivo\n/admin/programs        // Gestión de programas de TV\n/admin/featured-programs // Contenido destacado\n```\n\n#### Administración de Radio\n```\n/admin/radio           // Panel de radio\n/admin/radio-programs  // Gestión de programas de radio\n/admin/radio-episodes  // Gestión de episodios\n/admin/radio-navigation // Configuración de menú de navegación\n/admin/radio-live      // Configuraciones de radio en vivo\n```\n\n#### Configuración del Sistema\n```\n/admin/users           // Gestión de usuarios\n/admin/channels        // Configuración de canales de TV\n/admin/homepage-config // Personalización de página de inicio\n/admin/database-config // Gestión de base de datos\n/admin/smtp-config     // Configuración de email\n/admin/sitemap         // Gestión de sitemap y SEO\n```\n\n#### Datos Legislativos\n```\n/admin/legislators     // Gestión de legisladores\n/admin/organs          // Órganos del congreso\n/admin/parliamentary-groups // Grupos políticos\n/admin/pages           // Gestión de páginas estáticas\n```\n\n## Panel de Administración\n\n### Sistema de Autenticación\n\nEl panel de administración usa autenticación basada en JWT con cookies HTTP-only:\n\n```typescript\n// Flujo de login\nPOST /api/auth/login {\n  username: string,\n  password: string\n}\n// Retorna: Token JWT en cookie HTTP-only\n\n// Middleware de rutas protegidas\nmiddleware.ts // Verifica JWT para rutas /admin\n```\n\n### Roles de Usuario\n- **Admin**: Acceso completo al sistema\n- **Editor**: Creación y edición de contenido\n- **Visualizador**: Acceso solo de lectura\n\n### Características Principales del Admin\n\n#### Gestión de Contenido\n- **Editor de Texto Enriquecido**: Integración Quill.js con subida de imágenes\n- **Programación**: Publicar contenido en horarios específicos\n- **Operaciones Masivas**: Importación CSV/Excel para creación masiva de contenido\n- **Biblioteca de Medios**: Sistema de subida y gestión de archivos\n\n#### Gestión de Base de Datos\n- **Migración de Esquema**: Creación y actualizaciones automatizadas de tablas\n- **Importación/Exportación de Datos**: Creación y restauración de dumps SQL\n- **Pruebas de Conexión**: Verificación de conectividad de base de datos\n\n#### Configuración del Sistema\n- **Configuración SMTP**: Configuración de servidor de email con pruebas\n- **Gestión de Canales**: Logos y metadatos de canales de TV\n- **Personalización de Página de Inicio**: Imágenes hero y contenido destacado\n- **Configuración de Navegación**: Estructura de menús\n\n## Despliegue\n\n### Despliegue en Replit (Recomendado)\n\nLa aplicación está configurada para despliegue en Replit Cloud Run:\n\n```bash\n# Configuración de build\nnpm run build\n\n# Inicio de producción\nnpm start\n\n# Configuraciones de despliegue\nPORT: 3000\nHOST: 0.0.0.0\n```\n\n### Variables de Entorno en Producción\n\n```env\n# Base de datos de producción\nDATABASE_URL=postgresql://prod-user:pass@prod-host:5432/prod-db\n\n# URLs de producción\nNEXT_PUBLIC_BASE_URL=https://your-repl-domain.replit.dev\nNEXT_PUBLIC_APP_URL=https://your-repl-domain.replit.dev\n\n# Secretos fuertes de producción\nJWT_SECRET=production-secret-key-minimum-32-characters\nX_BEARER_TOKEN=production-bearer-token\n```\n\n### Configuración de Base de Datos en Producción\n\n1. **Crear base de datos PostgreSQL** en tu proveedor preferido\n2. **Configurar variables de entorno** en Replit Secrets\n3. **Ejecutar inicialización de base de datos** vía `/admin/database-config`\n4. **Importar datos iniciales** usando scripts SQL proporcionados\n\n### Optimizaciones de Rendimiento\n\n```javascript\n// Optimizaciones en next.config.mjs\nexport default {\n  output: 'standalone',           // Builds optimizados para Docker\n  images: { unoptimized: true },  // Imágenes listas para CDN\n  trailingSlash: false,          // URLs limpias\n  generateBuildId: () => Date.now().toString(), // Cache busting\n}\n```\n\n## Estructura de Archivos\n\n### Directorios Principales\n\n```\napp/                    # Directorio app de Next.js 13+\n├── admin/             # Páginas del panel de administración\n├── api/               # Manejadores de rutas API\n├── noticias/          # Páginas de sección de noticias\n├── radio/             # Páginas de sección de radio\n├── transparencia/     # Portal de transparencia\n├── globals.css        # Estilos globales\n├── layout.tsx         # Layout raíz\n└── page.tsx           // Página de inicio\n\ncomponents/            # Componentes React reutilizables\n├── ui/               # Componentes UI base (Radix)\n├── transparency/     # Componentes específicos de transparencia\n└── *.tsx             # Componentes específicos de características\n\nlib/                  # Librerías de utilidad\n├── api.ts            # Funciones cliente API\n├── database.ts       # Conexión de base de datos\n├── auth.ts           # Utilidades de autenticación\n├── upload.ts         # Manejo de subida de archivos\n└── utils.ts          # Utilidades generales\n\npublic/               # Assets estáticos\n├── images/           # Imágenes de aplicación\n├── uploads/          # Contenido subido por usuarios\n└── *.png             # Favicon y logos\n\nstyles/               # Hojas de estilo adicionales\n├── globals.css       # Importaciones CSS globales\n└── rich-text.css     # Estilos del editor de texto enriquecido\n```\n\n### Archivos de Configuración\n\n```\nnext.config.mjs       # Configuración de Next.js\ntailwind.config.js    # Configuración de Tailwind CSS\ntsconfig.json         # Configuración de TypeScript\npackage.json          # Dependencias y scripts\n.env.example          # Plantilla de entorno\n.replit               # Configuración de despliegue en Replit\n```\n\n### Scripts de Base de Datos\n\n```\ndatabase-schema.sql   # Esquema principal de base de datos\nradio-database-schema.sql # Tablas específicas de radio\n*.sql                 # Scripts de migración y configuración\nscripts/              # Utilidades de base de datos en Node.js\n```\n\n## Guías de Desarrollo\n\n### Organización de Código\n\n#### Estructura de Componentes\n```typescript\n// Plantilla estándar de componente\nimport React from 'react'\nimport { ComponentProps } from './types'\n\ninterface Props extends ComponentProps {\n  // Props específicos del componente\n}\n\nexport default function ComponentName({ ...props }: Props) {\n  // Lógica del componente\n  return (\n    <div className=\"component-class\">\n      {/* JSX del componente */}\n    </div>\n  )\n}\n```\n\n#### Estructura de Rutas API\n```typescript\n// Plantilla estándar de ruta API\nimport { NextRequest, NextResponse } from 'next/server'\nimport { authenticate } from '@/lib/auth'\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificación de autenticación\n    const user = await authenticate(request)\n    \n    // Lógica de negocio\n    const data = await fetchData()\n    \n    return NextResponse.json(data)\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Mensaje de error' }, \n      { status: 500 }\n    )\n  }\n}\n```\n\n### Patrones de Base de Datos\n\n#### Organización de Consultas\n```typescript\n// lib/api.ts - Consultas de base de datos centralizadas\nexport async function getNewsFromDB(): Promise<NewsItem[]> {\n  const query = `\n    SELECT id, title, summary, content, imageUrl, category, publishedAt, createdAt\n    FROM news \n    WHERE status = 'published' \n    ORDER BY publishedAt DESC\n  `\n  const result = await db.query(query)\n  return result.rows\n}\n```\n\n#### Manejo de Errores\n```typescript\n// Patrón consistente de manejo de errores\ntry {\n  const result = await databaseOperation()\n  return result\n} catch (error) {\n  console.error('Operación falló:', error)\n  throw new Error('Mensaje de error amigable para usuario')\n}\n```\n\n### Patrones de Frontend\n\n#### Gestión de Estado\n```typescript\n// Contexto para estado global\nconst AppContext = createContext<AppState>()\n\n// Estado local para estado de componente\nconst [state, setState] = useState<StateType>(initialState)\n\n// Estado del servidor con estados de carga apropiados\nconst [data, setData] = useState<DataType[]>([])\nconst [loading, setLoading] = useState(true)\nconst [error, setError] = useState<string | null>(null)\n```\n\n#### Convenciones de Estilos\n```typescript\n// Organización de clases Tailwind\n<div className={cn(\n  \"base-classes\",\n  \"responsive-classes md:different-classes\",\n  \"state-classes hover:state-change\",\n  conditionalClasses && \"conditional-classes\",\n  className // Permitir override de prop\n)}>\n```\n\n### Mejores Prácticas de Rendimiento\n\n#### Optimización de Imágenes\n```typescript\n// Usar componente Image de Next.js con sizing apropiado\nimport Image from 'next/image'\n\n<Image\n  src={imageUrl}\n  alt=\"Texto alt descriptivo\"\n  width={400}\n  height={300}\n  className=\"object-cover\"\n  loading=\"lazy\"\n/>\n```\n\n#### Optimización de API\n```typescript\n// Cache para datos estáticos\nexport const revalidate = 3600 // 1 hora\n\n// Forzar dinámico para datos en tiempo real\nexport const dynamic = 'force-dynamic'\n\n// Boundaries de error apropiados\nexport const fetchCache = 'force-no-store'\n```\n\n### Consideraciones de Seguridad\n\n#### Validación de Input\n```typescript\n// Usar Zod para validación en tiempo de ejecución\nimport { z } from 'zod'\n\nconst NewsSchema = z.object({\n  title: z.string().min(1).max(255),\n  content: z.string().min(1),\n  category: z.enum(['política', 'economía', 'sociedad'])\n})\n```\n\n#### Verificaciones de Autenticación\n```typescript\n// Protección de middleware para rutas de admin\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/admin')) {\n    return authenticateRequest(request)\n  }\n}\n```\n\n#### Prevención de Inyección SQL\n```typescript\n// Siempre usar consultas parametrizadas\nconst query = 'SELECT * FROM news WHERE id = $1'\nconst result = await db.query(query, [newsId])\n```\n\nEsta documentación proporciona una descripción integral de la plataforma Radio Congreso. Para detalles específicos de implementación, consultar los archivos individuales de componentes y API en el código base.\n\n## Contribuir\n\n1. Seguir los patrones de código establecidos\n2. Escribir TypeScript con definiciones de tipo apropiadas\n3. Usar Tailwind CSS para estilos\n4. Probar funcionalidad del panel de administración antes del despliegue\n5. Asegurar responsividad móvil\n6. Seguir guías de accesibilidad\n\n## Licencia\n\nEste proyecto es software propietario para Radio Congreso.\n","size_bytes":25444},"app/api/news/featured/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { getFeaturedNewsFromDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const featuredNews = await getFeaturedNewsFromDB(5) // Get top 5 featured news\n    return NextResponse.json({ \n      success: true,\n      news: featuredNews \n    })\n  } catch (error) {\n    console.error('Error fetching featured news:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch featured news' }, \n      { status: 500 }\n    )\n  }\n}","size_bytes":502},"app/radio/[programSlug]/episodios/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport { ArrowLeft, Play, Clock, Calendar, Download } from 'lucide-react'\n\nimport Footer from '@/components/footer'\n\ninterface Episode {\n  id: string\n  title: string\n  description: string\n  audio_url: string\n  audioUrl?: string\n  published_date: string\n  duration?: string\n  season?: number\n  episode_number?: number\n  transcript?: string\n  image_url?: string\n}\n\ninterface Program {\n  id: string\n  name: string\n  slug: string\n  description: string\n  image_url?: string\n  category: string\n}\n\nexport default function EpisodiosPage() {\n  const params = useParams()\n  const router = useRouter()\n  const [program, setProgram] = useState<Program | null>(null)\n  const [episodes, setEpisodes] = useState<Episode[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true)\n\n        // Fetch program data\n        const programResponse = await fetch(`/api/radio/programs?slug=${params.programSlug}`)\n        if (!programResponse.ok) {\n          throw new Error('Program not found')\n        }\n        const programData = await programResponse.json()\n        setProgram(programData)\n\n        // Fetch episodes for this program\n        if (programData && programData.id) {\n          const episodesResponse = await fetch(`/api/radio/episodes?programId=${programData.id}`)\n          if (!episodesResponse.ok) {\n            throw new Error('Failed to fetch episodes')\n          }\n          const episodesData = await episodesResponse.json()\n          setEpisodes(episodesData)\n        } else {\n          setEpisodes([])\n        }\n      } catch (err) {\n        console.error('Error fetching data:', err)\n        setError(err instanceof Error ? err.message : 'An error occurred')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    if (params.programSlug) {\n      fetchData()\n    }\n  }, [params.programSlug])\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-MX', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n\n  const formatDuration = (duration?: string) => {\n    if (!duration) return 'Duración no disponible'\n\n    // If duration is in seconds, convert to mm:ss format\n    if (duration.includes(':')) {\n      return duration\n    }\n\n    const seconds = parseInt(duration)\n    const minutes = Math.floor(seconds / 60)\n    const remainingSeconds = seconds % 60\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\n  }\n\n  if (loading) {\n    return (\n        <div className=\"flex flex-col min-h-screen\">\n          <main className=\"flex-1 bg-gradient-to-br from-purple-50 to-blue-50 py-8\">\n            <div className=\"container mx-auto px-4\">\n              <div className=\"text-center py-12\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto\"></div>\n                <p className=\"mt-4 text-gray-600\">Cargando episodios...</p>\n              </div>\n            </div>\n          </main>\n          <Footer />\n        </div>\n    )\n  }\n\n  if (error || !program) {\n    return (\n        <div className=\"flex flex-col min-h-screen\">\n          <main className=\"flex-1 bg-gradient-to-br from-purple-50 to-blue-50 py-8\">\n            <div className=\"container mx-auto px-4\">\n              <div className=\"text-center py-12\">\n                <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">\n                  {error || 'Programa no encontrado'}\n                </h1>\n                <Link \n                  href=\"/radio\"\n                  className=\"inline-flex items-center text-purple-600 hover:text-purple-700 transition-colors\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Volver a Radio\n                </Link>\n              </div>\n            </div>\n          </main>\n          <Footer />\n        </div>\n    )\n  }\n\n  return (\n      <div className=\"flex flex-col min-h-screen\">\n\n        <main className=\"flex-1 bg-gradient-to-br from-purple-50 to-blue-50\">\n          {/* Program Header */}\n          <div className=\"bg-white shadow-sm border-b\">\n            <div className=\"container mx-auto px-4 py-6\">\n              <div className=\"flex items-center mb-4\">\n                <Link \n                  href=\"/radio\"\n                  className=\"inline-flex items-center text-purple-600 hover:text-purple-700 transition-colors mr-4\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Radio\n                </Link>\n                <span className=\"text-gray-400\">/</span>\n                <span className=\"ml-2 text-gray-600\">{program.name}</span>\n              </div>\n\n              <div className=\"flex flex-col gap-6\">\n                <div className=\"flex-1\">\n                  <h1 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-3\">\n                    {program.name}\n                  </h1>\n                  <p className=\"text-gray-600 text-lg mb-4 leading-relaxed\">\n                    {program.description}\n                  </p>\n                  <div className=\"flex items-center gap-4\">\n                    <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800\">\n                      {program.category}\n                    </span>\n                    <span className=\"text-gray-500\">\n                      {episodes.length} episodio{episodes.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Episodes List */}\n          <div className=\"container mx-auto px-4 py-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-800\">\n                Episodios\n              </h2>\n              {episodes.length > 0 && (\n                <p className=\"text-gray-600\">\n                  {episodes.length} episodio{episodes.length !== 1 ? 's' : ''} disponible{episodes.length !== 1 ? 's' : ''}\n                </p>\n              )}\n            </div>\n\n            {episodes.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-24 h-24 mx-auto mb-4 rounded-full bg-gray-100 flex items-center justify-center\">\n                  <Play className=\"w-10 h-10 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">\n                  No hay episodios disponibles\n                </h3>\n                <p className=\"text-gray-600\">\n                  Este programa aún no tiene episodios publicados.\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {episodes.map((episode) => (\n                  <div key={episode.id} className=\"bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow\">\n                    <div className=\"p-6\">\n                      <div className=\"flex flex-col md:flex-row gap-4\">\n                        {/* Episode Image */}\n                        <div className=\"flex-shrink-0\">\n                          <div className=\"w-64 h-32 md:w-80 md:h-40 relative rounded-lg overflow-hidden bg-gray-100\">\n                            <Image\n                              src={(episode.image_url && episode.image_url.trim() !== '') ? episode.image_url : (program.image_url || '/images/carousel/programas.png')}\n                              alt={`Imagen del episodio: ${episode.title}`}\n                              fill\n                              className=\"object-cover\"\n                            />\n                          </div>\n                        </div>\n\n                        {/* Episode Content */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-2 mb-3\">\n                            <h3 className=\"text-lg font-semibold text-gray-800 line-clamp-2\">\n                              {episode.title}\n                            </h3>\n                            <div className=\"flex items-center gap-4 text-sm text-gray-500 flex-shrink-0\">\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"w-4 h-4 mr-1\" />\n                                {formatDate(episode.published_date)}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Clock className=\"w-4 h-4 mr-1\" />\n                                {formatDuration(episode.duration)}\n                              </div>\n                            </div>\n                          </div>\n\n                          <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                            {episode.description}\n                          </p>\n\n                          {/* Episode Controls */}\n                          <div className=\"flex items-center w-full\">\n                            {(episode.audioUrl || episode.audio_url) ? (\n                              <div className=\"w-full\">\n                                <audio \n                                  controls \n                                  preload=\"metadata\"\n                                  className=\"w-full h-12\"\n                                  style={{ backgroundColor: '#f3f4f6' }}\n                                >\n                                  <source src={`/api/files${episode.audioUrl || episode.audio_url}`} type=\"audio/mpeg\" />\n                                  <source src={`/api/files${episode.audioUrl || episode.audio_url}`} type=\"audio/mp3\" />\n                                  Tu navegador no soporta el elemento de audio.\n                                </audio>\n                              </div>\n                            ) : (\n                              <div className=\"bg-gray-100 text-gray-600 py-2 px-4 rounded-lg w-full text-center\">\n                                <p className=\"text-sm\">Audio no disponible para este episodio</p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </main>\n\n        <Footer />\n      </div>\n  )\n}","size_bytes":10731},"lib/timezone.ts":{"content":"import { fromZonedTime, toZonedTime, formatInTimeZone } from 'date-fns-tz'\n\n// Default timezone (fallback)\nexport const DEFAULT_TIMEZONE = 'America/Mexico_City'\n\n// Cache for timezone configuration\nlet cachedTimezone: string | null = null\nlet cacheTimestamp = 0\nconst CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\n\n/**\n * Get the configured timezone from the database with caching\n */\nasync function getConfiguredTimezone(): Promise<string> {\n  const now = Date.now()\n  \n  // Return cached value if still valid\n  if (cachedTimezone && (now - cacheTimestamp) < CACHE_DURATION) {\n    return cachedTimezone\n  }\n  \n  try {\n    // Only fetch in server environment\n    if (typeof window === 'undefined') {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/admin/timezone-config`, {\n        cache: 'no-store'\n      })\n      \n      if (response.ok) {\n        const config = await response.json()\n        const timezone = config.timezone || DEFAULT_TIMEZONE\n        cachedTimezone = timezone\n        cacheTimestamp = now\n        return timezone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to fetch timezone config, using default:', error)\n  }\n  \n  // Fallback to default timezone\n  cachedTimezone = DEFAULT_TIMEZONE\n  cacheTimestamp = now\n  return DEFAULT_TIMEZONE\n}\n\n/**\n * Get the current timezone (either configured or default)\n */\nexport async function getCurrentTimezone(): Promise<string> {\n  return await getConfiguredTimezone()\n}\n\n/**\n * Clear the timezone cache (useful after configuration changes)\n */\nexport function clearTimezoneCache(): void {\n  cachedTimezone = null\n  cacheTimestamp = 0\n}\n\n/**\n * Get current date and time in configured timezone\n */\nexport async function getCurrentTime(): Promise<Date> {\n  const timezone = await getCurrentTimezone()\n  return toZonedTime(new Date(), timezone)\n}\n\n/**\n * Get current date and time in Mexico City timezone (legacy function)\n */\nexport function getMexicoCityTime(): Date {\n  return toZonedTime(new Date(), DEFAULT_TIMEZONE)\n}\n\n/**\n * Convert a date from configured timezone to UTC\n */\nexport async function configuredTimezoneToUtc(date: Date): Promise<Date> {\n  const timezone = await getCurrentTimezone()\n  return fromZonedTime(date, timezone)\n}\n\n/**\n * Convert a date from UTC to configured timezone\n */\nexport async function utcToConfiguredTimezone(date: Date): Promise<Date> {\n  const timezone = await getCurrentTimezone()\n  return toZonedTime(date, timezone)\n}\n\n/**\n * Convert a date from Mexico City timezone to UTC (legacy function)\n */\nexport function mexicoCityToUtc(date: Date): Date {\n  return fromZonedTime(date, DEFAULT_TIMEZONE)\n}\n\n/**\n * Convert a date from UTC to Mexico City timezone (legacy function)\n */\nexport function utcToMexicoCity(date: Date): Date {\n  return toZonedTime(date, DEFAULT_TIMEZONE)\n}\n\n/**\n * Format a date in configured timezone\n */\nexport async function formatConfiguredTime(date: Date, formatStr: string = 'yyyy-MM-dd HH:mm:ss zzz'): Promise<string> {\n  const timezone = await getCurrentTimezone()\n  return formatInTimeZone(date, timezone, formatStr)\n}\n\n/**\n * Format a date in Mexico City timezone (legacy function)\n */\nexport function formatMexicoCityTime(date: Date, formatStr: string = 'yyyy-MM-dd HH:mm:ss zzz'): string {\n  return formatInTimeZone(date, DEFAULT_TIMEZONE, formatStr)\n}\n\n/**\n * Check if a given date/time in Mexico City timezone is in the past\n * Used for scheduled publishing logic\n */\nexport function isMexicoCityTimePast(date: Date): boolean {\n  const mexicoCityNow = getMexicoCityTime()\n  const targetMexicoTime = toZonedTime(date, DEFAULT_TIMEZONE)\n  return targetMexicoTime <= mexicoCityNow\n}\n\n/**\n * Get current Mexico City time as ISO string for database queries\n */\nexport function getMexicoCityTimeForDB(): string {\n  return getMexicoCityTime().toISOString()\n}\n\n/**\n * Convert a date string to Mexico City timezone and return as Date object\n * Useful for handling dates from forms or API inputs\n */\nexport function parseMexicoCityDate(dateString: string): Date {\n  const localDate = new Date(dateString)\n  return mexicoCityToUtc(localDate)\n}\n\n/**\n * Get a SQL timestamp that represents \"NOW\" in configured timezone\n * This returns a properly formatted timestamp for PostgreSQL\n */\nexport async function getConfiguredNowForSQL(): Promise<string> {\n  const configuredTime = await getCurrentTime()\n  return configuredTime.toISOString()\n}\n\n/**\n * Get a SQL timestamp that represents \"NOW\" in Mexico City timezone\n * This returns a properly formatted timestamp for PostgreSQL\n */\nexport function getMexicoCityNowForSQL(): string {\n  const mexicoCityTime = getMexicoCityTime()\n  return mexicoCityTime.toISOString()\n}\n\n/**\n * Check if a given date/time in configured timezone is in the past\n * Used for scheduled publishing logic\n */\nexport async function isConfiguredTimePast(date: Date): Promise<boolean> {\n  const configuredNow = await getCurrentTime()\n  const timezone = await getCurrentTimezone()\n  const targetConfiguredTime = toZonedTime(date, timezone)\n  return targetConfiguredTime <= configuredNow\n}\n\n/**\n * Parse a datetime-local input string as admin timezone time (NO CONVERSION)\n * This treats the input as if it was entered in the configured admin timezone\n * @param datetimeLocalString - String from datetime-local input (YYYY-MM-DDTHH:mm)\n * @returns Date object representing that exact time in admin timezone\n */\nexport async function parseAdminTimezoneDateTime(datetimeLocalString: string): Promise<Date> {\n  if (!datetimeLocalString) {\n    return new Date()\n  }\n  \n  // If input already has timezone info (Z or offset), don't convert\n  if (datetimeLocalString.includes('Z') || /[+-]\\d{2}:\\d{2}$/.test(datetimeLocalString)) {\n    return new Date(datetimeLocalString)\n  }\n  \n  const timezone = await getCurrentTimezone()\n  \n  // Parse the naive datetime string directly as admin timezone\n  // Do NOT create Date object first as that causes conversion issues\n  return fromZonedTime(datetimeLocalString, timezone)\n}\n\n/**\n * Format a Date object for datetime-local input in admin timezone (NO CONVERSION)\n * This displays the stored time as it should appear in admin timezone\n * @param date - Date object from database\n * @returns String formatted for datetime-local input (YYYY-MM-DDTHH:mm)\n */\nexport async function formatForAdminTimezoneInput(date: Date): Promise<string> {\n  if (!date) {\n    return ''\n  }\n  \n  const timezone = await getCurrentTimezone()\n  \n  // Format directly in admin timezone - do NOT use toISOString which converts to UTC\n  return formatInTimeZone(date, timezone, \"yyyy-MM-dd'T'HH:mm\")\n}\n\n/**\n * LEGACY: Parse datetime-local as Mexico City time (NO CONVERSION)\n * Use parseAdminTimezoneDateTime for new code\n */\nexport function parseMexicoCityDateTime(datetimeLocalString: string): Date {\n  if (!datetimeLocalString) {\n    return new Date()\n  }\n  \n  // If input already has timezone info, don't convert\n  if (datetimeLocalString.includes('Z') || /[+-]\\d{2}:\\d{2}$/.test(datetimeLocalString)) {\n    return new Date(datetimeLocalString)\n  }\n  \n  // Parse the naive datetime string directly as Mexico City time\n  return fromZonedTime(datetimeLocalString, DEFAULT_TIMEZONE)\n}\n\n/**\n * LEGACY: Format Date for datetime-local input in Mexico City time (NO CONVERSION)\n * Use formatForAdminTimezoneInput for new code\n */\nexport function formatForMexicoCityInput(date: Date): string {\n  if (!date) {\n    return ''\n  }\n  \n  // Format directly in Mexico City timezone - do NOT use toISOString\n  return formatInTimeZone(date, DEFAULT_TIMEZONE, \"yyyy-MM-dd'T'HH:mm\")\n}","size_bytes":7579},"components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-white text-gray-900 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5616},"app/programacion/page.tsx":{"content":"\"use client\";\n\nexport const dynamic = \"force-dynamic\";\n\nimport { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Calendar, Clock, Tv } from 'lucide-react'\n\ninterface FeaturedProgram {\n  id: string\n  title: string\n  description: string\n  schedule: string\n  imageUrl: string\n  isActive: boolean\n  displayOrder: number\n}\n\nfunction FeaturedProgramsSection() {\n  const [featuredPrograms, setFeaturedPrograms] = useState<FeaturedProgram[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchFeaturedPrograms = async () => {\n      try {\n        const response = await fetch('/api/featured-programs')\n        if (response.ok) {\n          const data = await response.json()\n          const activePrograms = data\n            .filter((program: FeaturedProgram) => program.isActive)\n            .sort((a: FeaturedProgram, b: FeaturedProgram) => a.displayOrder - b.displayOrder)\n          setFeaturedPrograms(activePrograms)\n        }\n      } catch (error) {\n        console.error('Error fetching featured programs:', error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchFeaturedPrograms()\n  }, [])\n\n  if (isLoading) {\n    return (\n      <section className=\"py-8 md:py-16 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-2xl md:text-3xl font-bold mb-6 md:mb-12 text-center\">\n            Programas Destacados\n          </h2>\n          <div className=\"text-center\">Cargando programas...</div>\n        </div>\n      </section>\n    )\n  }\n\n  if (featuredPrograms.length === 0) {\n    return null\n  }\n\n  return (\n    <section className=\"py-8 md:py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-2xl md:text-3xl font-bold mb-6 md:mb-12 text-center\">\n          Programas Destacados\n        </h2>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n          {featuredPrograms.map((program) => (\n            <div key={program.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <div className=\"relative h-32 md:h-48 bg-gray-200\">\n                {program.imageUrl ? (\n                  <Image\n                    src={program.imageUrl}\n                    alt={program.title}\n                    fill\n                    className=\"object-cover\"\n                  />\n                ) : (\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-gray-500 text-sm\">Imagen del programa</span>\n                  </div>\n                )}\n              </div>\n              <div className=\"p-3 md:p-4\">\n                <h3 className=\"font-bold text-sm md:text-base mb-1 md:mb-2\">{program.title}</h3>\n                <p className=\"text-gray-600 text-xs md:text-sm mb-2 md:mb-3\">\n                  {program.description}\n                </p>\n                <p className=\"text-purple-600 font-medium text-xs md:text-sm\">\n                  {program.schedule}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default function ProgramacionPage() {\n  const [currentChannel, setCurrentChannel] = useState(\"45.1\");\n  const [programmingData, setProgrammingData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  const channels = [\n    { id: \"45.1\", name: \"Canal 45.1\", color: \"bg-gray-600\" },\n    { id: \"45.2\", name: \"Canal 45.2\", color: \"bg-red-500\" },\n    { id: \"45.3\", name: \"Canal 45.3\", color: \"bg-green-500\" },\n  ];\n\n  useEffect(() => {\n    fetchProgramming();\n  }, []);\n\n  const fetchProgramming = async () => {\n    try {\n      const response = await fetch(\"/api/programacion\");\n      const data = await response.json();\n      setProgrammingData(data.data);\n    } catch (error) {\n      console.error(\"Error fetching programming:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col min-h-screen\">\n        <main className=\"flex-grow bg-gray-100 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600 mx-auto\"></div>\n            <p className=\"mt-4 text-lg\">Cargando programación...</p>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <main className=\"flex-grow bg-gray-100\">\n        {/* Hero Section */}\n        <section className=\"bg-purple-900 text-white py-6 md:py-8\">\n          <div className=\"container mx-auto px-4\">\n            <h1 className=\"text-2xl md:text-4xl font-bold mb-3 md:mb-4 text-center\">\n              PROGRAMACIÓN\n            </h1>\n            <p className=\"text-base md:text-xl max-w-3xl mx-auto text-center mb-4 md:mb-8\">\n              Consulta la programación semanal del Canal del Congreso\n            </p>\n          </div>\n        </section>\n\n        {/* Channel Selector */}\n        <section className=\"py-6\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex flex-col sm:flex-row justify-center gap-2 sm:gap-4\">\n              {channels.map((channel) => (\n                <button\n                  key={channel.id}\n                  onClick={() => setCurrentChannel(channel.id)}\n                  className={`px-4 sm:px-6 py-2 sm:py-3 rounded-full font-medium transition-all text-sm sm:text-base ${\n                    currentChannel === channel.id\n                      ? `${channel.color} text-white shadow-lg`\n                      : \"bg-white text-gray-700 hover:bg-gray-50\"\n                  }`}\n                >\n                  {channel.name}\n                </button>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Programming Schedule */}\n        <section className=\"py-6 md:py-8\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-xl md:text-2xl font-bold mb-4 md:mb-6 text-center\">\n              Programación:{\" \"}\n              {channels.find((c) => c.id === currentChannel)?.name}\n            </h2>\n\n            {programmingData && programmingData[currentChannel] ? (\n              <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                {/* Desktop Table */}\n                <div className=\"hidden md:block overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Hora\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Programa\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Descripción\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {programmingData[currentChannel].map(\n                        (programa: any, index: number) => (\n                          <tr key={index} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {programa.hora || programa.time || \"N/A\"}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                              {programa.programa || programa.program || \"N/A\"}\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500\">\n                              {programa.descripcion ||\n                                programa.description ||\n                                \"Sin descripción\"}\n                            </td>\n                          </tr>\n                        ),\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Cards */}\n                <div className=\"md:hidden divide-y divide-gray-200\">\n                  {programmingData[currentChannel].map(\n                    (programa: any, index: number) => (\n                      <div key={index} className=\"p-4 hover:bg-gray-50\">\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs font-medium\">\n                            {programa.hora || programa.time || \"N/A\"}\n                          </div>\n                        </div>\n                        <h3 className=\"font-medium text-gray-900 mb-1\">\n                          {programa.programa || programa.program || \"N/A\"}\n                        </h3>\n                        <p className=\"text-sm text-gray-500\">\n                          {programa.descripcion ||\n                            programa.description ||\n                            \"Sin descripción\"}\n                        </p>\n                      </div>\n                    ),\n                  )}\n                </div>\n              </div>\n            ) : (\n              <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\n                <p className=\"text-gray-500 text-lg\">\n                  No hay programación disponible para{\" \"}\n                  {channels.find((c) => c.id === currentChannel)?.name}\n                </p>\n                <p className=\"text-gray-400 text-sm mt-2\">\n                  La programación se actualiza desde el panel de administración\n                </p>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Featured Programs Section - Hidden */}\n        {/* <FeaturedProgramsSection /> */}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":10420},"app/transparencia/compromisos/normatividad/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\nimport Link from \"next/link\"\n\nexport default function NormatividadPage() {\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">Normatividad</h1>\n        <div className=\"prose max-w-none\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Marco Normativo</h2>\n          <ul className=\"space-y-3\">\n            <li>\n              <Link href=\"#\" className=\"text-blue-600 hover:underline\">\n                Constitución Política de los Estados Unidos Mexicanos\n              </Link>\n            </li>\n            <li>\n              <Link href=\"#\" className=\"text-blue-600 hover:underline\">\n                Ley Orgánica del Congreso General de los Estados Unidos Mexicanos\n              </Link>\n            </li>\n            <li>\n              <Link href=\"#\" className=\"text-blue-600 hover:underline\">\n                Reglamento del Canal de Televisión del Congreso General\n              </Link>\n            </li>\n            {/* More items would go here */}\n          </ul>\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":1314},"scripts/check-users-table.js":{"content":"\nconst { Pool } = require('pg');\n\nasync function checkUsersTable() {\n  // Check if DATABASE_URL is set\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL environment variable is not set');\n    process.exit(1);\n  }\n\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }\n  });\n\n  try {\n    console.log('Checking users table...');\n    \n    // Check if users table exists\n    const tableCheck = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'users'\n      );\n    `);\n    \n    const tableExists = tableCheck.rows[0].exists;\n    console.log(`✅ Users table exists: ${tableExists}`);\n    \n    if (tableExists) {\n      // Get table structure\n      const structure = await pool.query(`\n        SELECT column_name, data_type, is_nullable, column_default\n        FROM information_schema.columns \n        WHERE table_schema = 'public' \n        AND table_name = 'users'\n        ORDER BY ordinal_position;\n      `);\n      \n      console.log('📊 Table structure:');\n      structure.rows.forEach(row => {\n        console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${row.column_default ? `DEFAULT ${row.column_default}` : ''}`);\n      });\n      \n      // Count users\n      const userCount = await pool.query('SELECT COUNT(*) FROM users');\n      console.log(`👥 Number of users: ${userCount.rows[0].count}`);\n      \n      // Show users (without passwords)\n      const users = await pool.query('SELECT id, username, role, is_active, created_at FROM users ORDER BY created_at');\n      if (users.rows.length > 0) {\n        console.log('📋 Users:');\n        users.rows.forEach(user => {\n          console.log(`  - ID: ${user.id}, Username: ${user.username}, Role: ${user.role}, Active: ${user.is_active}, Created: ${user.created_at}`);\n        });\n      }\n    } else {\n      console.log('❌ Users table does not exist. Run the initialization endpoint to create it.');\n    }\n    \n  } catch (error) {\n    console.error('❌ Error checking users table:', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Run the check\ncheckUsersTable();\n","size_bytes":2323},"app/api/radio/episodes/publish-scheduled/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getDB } from '@/lib/database-env'\nimport { formatConfiguredTime, getCurrentTimezone } from '@/lib/timezone'\n\nexport async function POST() {\n  try {\n    const pool = getDB()\n    \n    // First, check which episodes will be published (using Mexico City timezone)\n    const checkResult = await pool.query(`\n      SELECT id, title, publish_date, published\n      FROM radio_episodes \n      WHERE published = false AND publish_date <= CURRENT_TIMESTAMP\n    `)\n    \n    const currentTimezone = await getCurrentTimezone()\n    const currentTime = await formatConfiguredTime(new Date())\n    \n    console.log(`Found ${checkResult.rows.length} scheduled radio episodes ready to publish (${currentTimezone} time: ${currentTime}):`, \n      checkResult.rows.map(row => ({\n        id: row.id,\n        title: row.title?.substring(0, 30) + '...',\n        publishDate: row.publish_date,\n        currentStatus: row.published\n      }))\n    )\n    \n    if (checkResult.rows.length === 0) {\n      return NextResponse.json({ \n        success: true, \n        publishedCount: 0,\n        message: 'No scheduled radio episodes ready to publish'\n      })\n    }\n    \n    // Update scheduled radio episodes that should now be published (using Mexico City timezone)\n    const result = await pool.query(`\n      UPDATE radio_episodes \n      SET published = true, updated_at = CURRENT_TIMESTAMP\n      WHERE published = false AND publish_date <= CURRENT_TIMESTAMP\n      RETURNING id, title, publish_date\n    `)\n\n    console.log(`Successfully published ${result.rows.length} scheduled radio episodes`)\n    \n    return NextResponse.json({ \n      success: true, \n      publishedCount: result.rows.length,\n      publishedItems: result.rows.map(row => ({\n        id: row.id,\n        title: row.title,\n        publishDate: row.publish_date\n      }))\n    })\n  } catch (error) {\n    console.error('Error publishing scheduled radio episodes:', error)\n    return NextResponse.json({ error: 'Failed to publish scheduled radio episodes' }, { status: 500 })\n  }\n}\n","size_bytes":2066},"app/radio/legisladores/busqueda/page.tsx":{"content":"import Link from \"next/link\"\nimport Image from \"next/image\"\nimport { getLegislators, getParliamentaryGroups } from \"@/lib/api\"\nimport Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\n\nexport default async function LegislatorSearchPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ name?: string; group?: string }>\n}) {\n  const { name, group } = await searchParams\n  const [legislators, parliamentaryGroups] = await Promise.all([getLegislators(), getParliamentaryGroups()])\n\n  // Filter legislators based on search params\n  const filteredLegislators = legislators.filter((legislator) => {\n    let matchesName = true\n    let matchesGroup = true\n\n    if (name) {\n      matchesName = legislator.name.toLowerCase().includes(name.toLowerCase())\n    }\n\n    if (group) {\n      matchesGroup = legislator.parliamentaryGroupId === group\n    }\n\n    return matchesName && matchesGroup\n  })\n\n  // Get parliamentary group names for display\n  const groupsMap = Object.fromEntries(parliamentaryGroups.map((group) => [group.id, group]))\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Navbar />\n\n      <main className=\"flex-grow bg-gray-100\">\n        <div className=\"container mx-auto py-8 px-4\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-3xl font-bold text-[#3b0764] mb-2\">Resultados de búsqueda</h1>\n            <div className=\"text-gray-600\">\n              {name && <span>Nombre: {name}</span>}\n              {name && group && <span className=\"mx-2\">|</span>}\n              {group && <span>Grupo Parlamentario: {groupsMap[group]?.name || \"Desconocido\"}</span>}\n            </div>\n          </div>\n\n          {filteredLegislators.length === 0 ? (\n            <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\n              <h2 className=\"text-xl font-semibold mb-2\">No se encontraron resultados</h2>\n              <p className=\"text-gray-600 mb-4\">\n                Intenta con otros términos de búsqueda o consulta todos nuestros legisladores.\n              </p>\n              <Link href=\"/radio/legisladores\" className=\"inline-block bg-[#3b0764] text-white px-4 py-2 rounded-md\">\n                Ver todos los legisladores\n              </Link>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredLegislators.map((legislator) => (\n                <div key={legislator.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                  <div className=\"flex items-center p-4\">\n                    <div className=\"w-20 h-20 relative rounded-full overflow-hidden mr-4\">\n                      <Image\n                        src={legislator.imageUrl || \"/placeholder.svg?height=80&width=80&text=Legislador\"}\n                        alt={legislator.name}\n                        fill\n                        className=\"object-cover\"\n                      />\n                    </div>\n                    <div>\n                      <h2 className=\"font-bold text-lg\">{legislator.name}</h2>\n                      <p className=\"text-gray-600\">{groupsMap[legislator.parliamentaryGroupId]?.name || \"Sin grupo\"}</p>\n                      <p className=\"text-gray-600\">{legislator.state}</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-gray-50 px-4 py-3 border-t\">\n                    <Link\n                      href={`/radio/legisladores/${legislator.id}`}\n                      className=\"text-[#3b0764] font-medium hover:underline\"\n                    >\n                      Ver participaciones →\n                    </Link>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}\n","size_bytes":3802},"app/api/upload/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { writeFile, mkdir } from 'fs/promises'\nimport { join, normalize, sep } from 'path'\nimport { randomUUID } from 'crypto'\n\n// Simple magic byte detection for common file types\nfunction detectFileType(buffer: Buffer): string | null {\n  // Check magic bytes for common file types\n  if (buffer.length >= 4) {\n    // PDF\n    if (buffer.subarray(0, 4).toString() === '%PDF') {\n      return 'application/pdf'\n    }\n    \n    // PNG\n    if (buffer.subarray(0, 8).equals(Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]))) {\n      return 'image/png'\n    }\n    \n    // JPEG\n    if (buffer.subarray(0, 3).equals(Buffer.from([0xFF, 0xD8, 0xFF]))) {\n      return 'image/jpeg'\n    }\n    \n    // GIF\n    if (buffer.subarray(0, 6).toString() === 'GIF87a' || buffer.subarray(0, 6).toString() === 'GIF89a') {\n      return 'image/gif'\n    }\n    \n    // WebP\n    if (buffer.subarray(0, 4).toString() === 'RIFF' && buffer.subarray(8, 12).toString() === 'WEBP') {\n      return 'image/webp'\n    }\n    \n    // MP3\n    if (buffer.subarray(0, 3).equals(Buffer.from([0xFF, 0xFB, 0x90])) || \n        buffer.subarray(0, 3).toString() === 'ID3') {\n      return 'audio/mpeg'\n    }\n    \n    // DOCX (ZIP format with specific content)\n    if (buffer.subarray(0, 4).equals(Buffer.from([0x50, 0x4B, 0x03, 0x04]))) {\n      // This is a ZIP file, could be DOCX - need deeper inspection\n      try {\n        const content = buffer.toString('utf8', 0, Math.min(buffer.length, 1000))\n        if (content.includes('word/') || content.includes('docProps/') || \n            content.includes('wordprocessingml') || content.includes('application/vnd.openxmlformats')) {\n          return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n        }\n      } catch (e) {\n        // If UTF-8 conversion fails, check filename extension as fallback\n        // This will be handled by the caller\n      }\n    }\n    \n    // DOC (older format - OLE2 compound document)\n    if (buffer.subarray(0, 8).equals(Buffer.from([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1]))) {\n      return 'application/msword'\n    }\n  }\n  \n  return null\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n    const rawType = formData.get('type') as string || 'general'\n\n    if (!file) {\n      return NextResponse.json({ error: 'No file provided' }, { status: 400 })\n    }\n\n    // Whitelist allowed upload types to prevent path injection\n    const allowedUploadTypes = ['general', 'news', 'radio', 'programs', 'organs', 'defensoria', 'documents']\n    const type = allowedUploadTypes.includes(rawType) ? rawType : 'general'\n\n    // Server-side file type detection based on file content (magic bytes)\n    const fileBuffer = Buffer.from(await file.arrayBuffer())\n    let detectedType = detectFileType(fileBuffer)\n    \n    // Fallback: if magic byte detection fails, use file extension\n    if (!detectedType) {\n      const fileName = file.name.toLowerCase()\n      if (fileName.endsWith('.docx')) {\n        detectedType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      } else if (fileName.endsWith('.doc')) {\n        detectedType = 'application/msword'\n      } else if (fileName.endsWith('.pdf')) {\n        detectedType = 'application/pdf'\n      } else if (fileName.endsWith('.mp3')) {\n        detectedType = 'audio/mpeg'\n      } else if (fileName.endsWith('.png')) {\n        detectedType = 'image/png'\n      } else if (fileName.endsWith('.jpg') || fileName.endsWith('.jpeg')) {\n        detectedType = 'image/jpeg'\n      }\n    }\n    \n    if (!detectedType) {\n      return NextResponse.json({ error: 'Unable to determine file type. Please ensure the file is a valid PDF, Word document, image, or audio file.' }, { status: 400 })\n    }\n\n    const isAudio = detectedType.startsWith('audio/')\n    const isDocument = detectedType === 'application/pdf' || \n                      detectedType === 'application/msword' ||\n                      detectedType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    const isImage = detectedType.startsWith('image/')\n    \n    let maxSize: number\n    if (isAudio) {\n      maxSize = 500 * 1024 * 1024 // 500MB for audio\n    } else if (isDocument) {\n      maxSize = 50 * 1024 * 1024 // 50MB for documents\n    } else {\n      maxSize = 10 * 1024 * 1024 // 10MB for images\n    }\n    \n    if (file.size > maxSize) {\n      return NextResponse.json({ \n        error: `File too large. Maximum size is ${maxSize / 1024 / 1024}MB` \n      }, { status: 400 })\n    }\n\n    // Validate detected file type against whitelist\n    const allowedTypes = [\n      'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n      'audio/mpeg', 'audio/mp3', 'audio/mpeg3',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    ]\n\n    if (!allowedTypes.includes(detectedType)) {\n      return NextResponse.json({ \n        error: 'Invalid file type detected. Allowed: JPEG, PNG, GIF, WebP, MP3, PDF, DOC, DOCX' \n      }, { status: 400 })\n    }\n\n    // Generate unique filename with extension based on detected type\n    const extensionMap: Record<string, string> = {\n      'image/jpeg': 'jpg',\n      'image/png': 'png',\n      'image/gif': 'gif',\n      'image/webp': 'webp',\n      'audio/mpeg': 'mp3',\n      'audio/mp3': 'mp3',\n      'audio/mpeg3': 'mp3',\n      'application/pdf': 'pdf',\n      'application/msword': 'doc',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx'\n    }\n    \n    const fileExtension = extensionMap[detectedType] || 'bin'\n    const uniqueFilename = `${randomUUID()}.${fileExtension}`\n\n    // Define upload path based on type with security bounds checking\n    const baseUploadDir = join(process.cwd(), 'public', 'uploads')\n    let uploadDir: string\n    \n    if (isAudio || file.name.toLowerCase().endsWith('.mp3')) {\n      uploadDir = join(baseUploadDir, 'audio')\n    } else if (isDocument) {\n      uploadDir = join(baseUploadDir, 'documents')\n    } else {\n      uploadDir = join(baseUploadDir, type)\n    }\n\n    // Ensure the upload directory is within the expected bounds\n    const normalizedUploadDir = normalize(uploadDir)\n    if (!normalizedUploadDir.startsWith(baseUploadDir + sep) && normalizedUploadDir !== baseUploadDir) {\n      return NextResponse.json({ error: 'Invalid upload type' }, { status: 400 })\n    }\n\n    const filePath = join(normalizedUploadDir, uniqueFilename)\n\n    // Create directory if it doesn't exist\n    await mkdir(uploadDir, { recursive: true })\n\n    // Write file to local storage (using already read buffer)\n    await writeFile(filePath, fileBuffer)\n\n    // Note: PDF conversion temporarily disabled due to LibreOffice compatibility issues\n    // Files will be stored in their original format\n    let pdfUrl = null\n\n    // Return the public URL path with proper response format\n    if (isAudio || file.name.toLowerCase().endsWith('.mp3')) {\n      return NextResponse.json({\n        url: `/uploads/audio/${uniqueFilename}`,\n        audioUrl: `/uploads/audio/${uniqueFilename}`,\n        fileUrl: `/uploads/audio/${uniqueFilename}`,\n        fileName: file.name,\n        fileSize: file.size,\n        type: 'audio'\n      })\n    } else if (isDocument) {\n      return NextResponse.json({\n        url: `/uploads/documents/${uniqueFilename}`,\n        documentUrl: `/uploads/documents/${uniqueFilename}`,\n        fileUrl: `/uploads/documents/${uniqueFilename}`,\n        pdfUrl: pdfUrl, // Include PDF URL if conversion was successful\n        fileName: file.name,\n        fileSize: file.size,\n        type: 'document'\n      })\n    } else {\n      return NextResponse.json({\n        url: `/uploads/${type}/${uniqueFilename}`,\n        imageUrl: `/uploads/${type}/${uniqueFilename}`,\n        fileUrl: `/uploads/${type}/${uniqueFilename}`,\n        fileName: file.name,\n        fileSize: file.size,\n        type: 'image'\n      })\n    }\n  } catch (error) {\n    console.error('Error processing request:', error)\n    return NextResponse.json({ error: \"Error al procesar la solicitud\" }, { status: 500 })\n  }\n}","size_bytes":8241},"components/program-banner-html.tsx":{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\n\ninterface ProgramBannerHtmlProps {\n  title: string\n  subtitle?: string\n  leftImageUrl?: string\n  episodeTitle: string\n  episodeDate: string\n  episodeDescription: string\n  episodeLength: string\n  programLink: string\n  episodesLink: string\n  className?: string\n}\n\nexport default function ProgramBannerHtml({\n  title,\n  subtitle,\n  leftImageUrl,\n  episodeTitle,\n  episodeDate,\n  episodeDescription,\n  episodeLength,\n  programLink,\n  episodesLink,\n  className,\n}: ProgramBannerHtmlProps) {\n  return (\n    <div className={`flex flex-col md:flex-row shadow-xl overflow-hidden rounded-lg ${className}`}>\n      {/* Left panel - Program info with branded design */}\n      <div className=\"relative overflow-hidden h-[360px] md:h-[480px] md:w-2/3\">\n        <Link href={programLink} className=\"block w-full h-full\">\n          {leftImageUrl ? (\n            <div className=\"relative w-full h-full\">\n              <Image\n                src={leftImageUrl || \"/placeholder.svg\"}\n                alt={title}\n                fill\n                className=\"object-cover\"\n                priority\n                sizes=\"(max-width: 768px) 100vw, 66vw\"\n              />\n              <div className=\"absolute inset-0 bg-black/20 hover:bg-black/10 transition-all duration-300\"></div>\n\n              {/* Title overlay hidden */}\n            </div>\n          ) : (\n            <div className=\"bg-gradient-to-br from-[#3b0764] to-[#1e1b4b] h-full w-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                <h3 className=\"text-white text-3xl md:text-4xl font-bold mb-4 uppercase tracking-wide\">\n                  {title}\n                </h3>\n                {subtitle && (\n                  <p className=\"text-white/90 text-lg\">{subtitle}</p>\n                )}\n              </div>\n            </div>\n          )}\n        </Link>\n      </div>\n\n      {/* Right panel - Episode info with improved styling */}\n      <div className=\"bg-gradient-to-b from-gray-800 to-gray-900 text-white p-6 md:p-8 md:w-1/3 flex flex-col justify-between\">\n        <div>\n          <h4 className=\"text-xl md:text-2xl font-bold mb-4 text-gray-100 uppercase tracking-wide\">\n            {title}\n          </h4>\n\n          <div className=\"border-l-4 border-[#e91e63] pl-4 mb-4\">\n            <p className=\"text-lg font-bold mb-2 leading-tight text-white\">\n              \"{episodeTitle}\"\n            </p>\n          </div>\n\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            <span className=\"bg-gray-700 text-gray-200 px-3 py-1 rounded-full text-xs\">\n              {episodeDate}\n            </span>\n            <span className=\"bg-[#e91e63] text-white px-3 py-1 rounded-full text-xs font-medium\">\n              {episodeLength}\n            </span>\n          </div>\n\n          <p className=\"text-sm mb-6 leading-relaxed text-gray-300 line-clamp-8\">\n            {episodeDescription}\n          </p>\n        </div>\n\n        <div className=\"flex justify-between items-center gap-4\">\n          <Link \n            href={episodesLink} \n            className=\"bg-white/10 hover:bg-white/20 text-white px-4 py-2 rounded transition-colors text-sm flex-1 max-w-[50%] text-center\"\n          >\n            Ver todos los episodios\n          </Link>\n\n          <Image src=\"/images/radio-congreso-logo.png\" alt=\"Radio Congreso\" width={80} height={80} className=\"flex-shrink-0\" />\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":3472},"components/footer.tsx":{"content":"\"use client\";\n\nimport type React from \"react\";\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\nimport ContactForm from \"./contact-form\";\n\nexport default function Footer() {\n  const [formData, setFormData] = useState({\n    nombre: \"\",\n    email: \"\",\n    telefono: \"\",\n    asunto: \"\",\n    empresa: \"\",\n    puesto: \"\",\n    ciudad: \"\",\n    estado: \"\",\n    mensaje: \"\",\n  });\n\n  const [formStatus, setFormStatus] = useState<{\n    status: \"idle\" | \"submitting\" | \"success\" | \"error\";\n    message: string;\n  }>({\n    status: \"idle\",\n    message: \"\",\n  });\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Set form status to submitting\n    setFormStatus({ status: \"submitting\", message: \"Enviando mensaje...\" });\n\n    try {\n      // Send the form data to the API route\n      const response = await fetch(\"/api/contact\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Reset form on success\n        setFormData({\n          nombre: \"\",\n          email: \"\",\n          telefono: \"\",\n          asunto: \"\",\n          empresa: \"\",\n          puesto: \"\",\n          ciudad: \"\",\n          estado: \"\",\n          mensaje: \"\",\n        });\n        setFormStatus({\n          status: \"success\",\n          message: \"Mensaje enviado correctamente. Gracias por contactarnos.\",\n        });\n      } else {\n        setFormStatus({\n          status: \"error\",\n          message:\n            result.message ||\n            \"Error al enviar el mensaje. Por favor, inténtelo de nuevo.\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      setFormStatus({\n        status: \"error\",\n        message: \"Error al enviar el mensaje. Por favor, inténtelo de nuevo.\",\n      });\n    }\n  };\n\n  return (\n    <footer className=\"bg-gray-700 text-white\">\n      {/* App Download Banner */}\n      <div className=\"bg-gray-800 py-6 px-4\">\n        <div className=\"container mx-auto flex flex-col md:flex-row justify-between items-center\">\n          <div>\n            <h3 className=\"text-lg font-bold uppercase mb-2\">\n              DESCARGA GRATIS NUESTRA APP\n            </h3>\n            <p className=\"text-sm text-gray-300 mb-4 md:mb-0\">\n              El Canal del Congreso en tus manos\n            </p>\n          </div>\n          <div className=\"flex space-x-4\">\n            <Link\n              href=\"https://play.google.com/store/apps/details?id=com.cic.canalcongreso&hl=es\"\n              className=\"inline-block\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Image\n                src=\"/images/google-play-badge.png\"\n                alt=\"Get it on Google Play\"\n                width={140}\n                height={42}\n              />\n            </Link>\n            <Link\n              href=\"https://apps.apple.com/mx/app/canal-del-congreso/id1291590905\"\n              className=\"inline-block\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Image\n                src=\"/images/app-store-badge.png\"\n                alt=\"Download on the App Store\"\n                width={140}\n                height={42}\n              />\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Footer Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Contact Form */}\n          <div className=\"lg:col-span-2\">\n            <h3 className=\"text-center uppercase font-bold mb-4\">\n              CONTÁCTENOS\n            </h3>\n\n            <ContactForm />\n          </div>\n\n          {/* Directory and Information */}\n          <div\n            className=\"p-6 rounded-lg\"\n            style={{ backgroundColor: \"#374151\" }}\n          >\n            {/* DIRECTORIO Section */}\n            <div className=\"mb-8\">\n              <h3 className=\"uppercase font-bold mb-3 text-white\">\n                DIRECTORIO\n              </h3>\n              <h4 className=\"text-sm font-bold mb-2 text-white\">\n                CANAL DEL CONGRESO\n              </h4>\n              <p className=\"text-sm text-blue-200 opacity-70 mb-1\">\n                Madrid 62,\n              </p>\n              <p className=\"text-sm text-blue-200 opacity-70 mb-1\">\n                {\" \"}\n                PB Col. Tabacalera,\n              </p>\n              <p className=\"text-sm text-blue-200 opacity-70 mb-4\">\n                {\" \"}\n                C.P. 06030, Ciudad de México.\n              </p>\n              <Link\n                href=\"https://www.canaldelcongreso.gob.mx/direccion-general\"\n                className=\"text-sm text-yellow-300 hover:text-yellow-200 block mb-2\"\n              >\n                Mando Superior\n              </Link>\n              <Link\n                href=\"https://canaldelcongreso.gob.mx/pdfs/directorio\"\n                className=\"text-sm text-yellow-300 hover:text-yellow-200 block mb-6\"\n              >\n                Mandos Medios\n              </Link>\n            </div>\n\n            {/* SOLICITUD DE SERVICIOS Section */}\n            <div className=\"mb-8\">\n              <h3 className=\"uppercase font-bold mb-3 text-white\">\n                SOLICITUD DE SERVICIOS\n              </h3>\n              <ul className=\"space-y-3\">\n                <li>\n                  <Link\n                    href=\"https://www.canaldelcongreso.gob.mx/files/tucanal/imagen/transparencia/documentos/pdfnormativacanal/guiadelusuario_210715.pdf\"\n                    className=\"text-sm text-yellow-300 hover:text-yellow-200 flex items-center\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-4 w-4 mr-2 text-blue-200 opacity-70\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                    Guía de usuario\n                  </Link>\n                </li>\n                <li>\n                  <Link\n                    href=\"https://www.canaldelcongreso.gob.mx/files/imagenes/PortalTransparencia/Solicitud_Servicios_2025.docx\"\n                    className=\"text-sm text-yellow-300 hover:text-yellow-200 flex items-center\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    download\n                  >\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-4 w-4 mr-2 text-blue-200 opacity-70\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                    Descarga formato\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          {/* Logo and Social Links */}\n          <div className=\"flex flex-col items-center\">\n            <Image\n              src=\"/images/logo-canal-congreso.png\"\n              alt=\"Canal del Congreso\"\n              width={180}\n              height={60}\n              className=\"h-16 w-auto mb-4\"\n            />\n            <div className=\"flex space-x-4 mt-4 py-4 min-h-[80px] items-center\">\n              <Link \n                href=\"https://whatsapp.com/channel/0029Vb55Zgo5EjxvIySofH1J\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300\"\n              >\n                <span className=\"sr-only\">WhatsApp</span>\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.893 3.488\"/>\n                </svg>\n              </Link>\n              <Link \n                href=\"https://www.facebook.com/share/1AEEAeTbkQ/\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300\"\n              >\n                <span className=\"sr-only\">Facebook</span>\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </Link>\n              <Link \n                href=\"https://x.com/canalcongreso\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300\"\n              >\n                <span className=\"sr-only\">X</span>\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n                </svg>\n              </Link>\n              <Link \n                href=\"https://www.instagram.com/canalcongresomx?igsh=MW5qNjJjNHU5aWZsdA==\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300\"\n              >\n                <span className=\"sr-only\">Instagram</span>\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 715.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </Link>\n              <Link \n                href=\"https://www.youtube.com/channel/UC0qf7R7Vq3H8JSNYfIs3uKg\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300\"\n              >\n                <span className=\"sr-only\">YouTube</span>\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M19.812 5.418c.861.23 1.538.907 1.768 1.768C21.998 8.746 22 12 22 12s0 3.255-.418 4.814a2.504 2.504 0 0 1-1.768 1.768c-1.56.419-7.814.419-7.814.419s-6.255 0-7.814-.419a2.505 2.505 0 0 1-1.768-1.768C2 15.255 2 12 2 12s0-3.255.417-4.814a2.507 2.507 0 0 1 1.768-1.768C5.744 5 11.998 5 11.998 5s6.255 0 7.814.418ZM15.194 12 10 15V9l5.194 3Z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </Link>\n              <Link \n                href=\"https://open.spotify.com/show/17bt21pyYPzCKdHOrgdY3B?si=28wx_d3QTZyEk9M8ABKhWA\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300\"\n              >\n                <span className=\"sr-only\">Spotify</span>\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M12 0C5.376 0 0 5.376 0 12s5.376 12 12 12 12-5.376 12-12S18.624 0 12 0zm5.568 17.328c-.24 0-.48-.096-.72-.24-2.16-1.2-4.896-1.44-7.68-.72-.24.072-.48-.024-.576-.24-.072-.24.024-.48.24-.576 3.024-.768 6.024-.528 8.4.816.216.144.288.432.144.648-.096.144-.288.312-.552.312zm.96-2.52c-.24 0-.48-.096-.72-.24-2.52-1.44-6.24-1.8-9.36-.96-.288.072-.576-.072-.648-.36-.072-.288.072-.576.36-.648 3.6-.96 7.68-.552 10.56 1.152.24.144.36.48.216.72-.144.24-.288.336-.408.336zm.096-2.64c-.24 0-.48-.096-.72-.24-3.12-1.68-8.16-1.8-11.04-.96-.36.096-.72-.12-.816-.48-.096-.36.12-.72.48-.816 3.36-.96 8.88-.816 12.48 1.152.288.144.432.48.288.768-.144.216-.36.336-.648.336z\"/>\n                </svg>\n              </Link>\n              <Link \n                href=\"https://www.tiktok.com/@canaldelcongresomx?_t=ZS-8yDjQ5NJpX5&_r=1\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-white hover:text-gray-300 transform transition-transform duration-300 hover:scale-95\"\n              >\n                <span className=\"sr-only\">TikTok</span>\n                <svg\n                  className=\"h-6 w-5\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M19.321 5.562a5.124 5.124 0 01-.443-.258 6.228 6.228 0 01-1.137-.966c-.849-.849-1.377-1.958-1.377-3.338h-3.357v13.83c0 2.417-1.884 4.368-4.301 4.368-2.417 0-4.301-1.951-4.301-4.368s1.884-4.368 4.301-4.368c.338 0 .664.049.976.135v-3.486a7.644 7.644 0 00-.976-.063C4.617 7.038 0 11.655 0 17.17s4.617 10.132 10.132 10.132 10.132-4.617 10.132-10.132V9.295a9.46 9.46 0 005.736 1.939V7.877a6.228 6.228 0 01-6.679-2.315z\"/>\n                </svg>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom Bar */}\n      <div className=\"bg-gray-800 py-2 text-xs text-gray-400\">\n        <div className=\"container mx-auto px-4 flex flex-col md:flex-row justify-between items-center\">\n          <p>Aviso de privacidad</p>\n          <p className=\"md:text-center\">\n            © Canal del Congreso, todos los derechos reservados 2025\n          </p>\n          <p>Mapa del sitio</p>\n        </div>\n      </div>\n      {/* If the footer needs any radio-specific content or styling, we can add it here.\n      For example, we might want to add radio-specific links or a radio player control in the footer. */}\n    </footer>\n  );\n}\n","size_bytes":17976},"components/placeholder-image.tsx":{"content":"\n\"use client\"\n\nimport Image from \"next/image\"\nimport { useState } from \"react\"\n\ninterface PlaceholderImageProps {\n  src?: string\n  alt: string\n  width?: number\n  height?: number\n  className?: string\n  fill?: boolean\n  fallbackText?: string\n  priority?: boolean\n}\n\nexport default function PlaceholderImage({\n  src,\n  alt,\n  width = 400,\n  height = 300,\n  className = '',\n  fill = false,\n  fallbackText,\n  priority = false\n}: PlaceholderImageProps) {\n  const [imageSrc, setImageSrc] = useState(src || '/placeholder.svg')\n  const [hasError, setHasError] = useState(false)\n\n  const handleError = () => {\n    if (!hasError) {\n      setHasError(true)\n      // Generate a placeholder SVG with proper dimensions and text\n      const placeholderSvg = `data:image/svg+xml,${encodeURIComponent(`\n        <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"100%\" height=\"100%\" fill=\"#f3f4f6\"/>\n          <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\"0.3em\" font-family=\"Arial, sans-serif\" font-size=\"14\" fill=\"#6b7280\">\n            ${fallbackText || 'Imagen no disponible'}\n          </text>\n        </svg>\n      `)}`\n      setImageSrc(placeholderSvg)\n    }\n  }\n\n  if (fill) {\n    return (\n      <Image\n        src={imageSrc}\n        alt={alt}\n        fill\n        className={className}\n        onError={handleError}\n        priority={priority}\n      />\n    )\n  }\n\n  return (\n    <Image\n      src={imageSrc}\n      alt={alt}\n      width={width}\n      height={height}\n      className={className}\n      onError={handleError}\n      priority={priority}\n    />\n  )\n}\n","size_bytes":1598},"app/api/admin/test-connection/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Test connection using environment variables\n    if (body.useEnvVars) {\n      try {\n        const pool = createDatabaseConnectionFromEnv()\n        \n        // Test the connection\n        const client = await pool.connect()\n        await client.query('SELECT 1')\n        client.release()\n        await pool.end()\n        \n        return NextResponse.json({ \n          success: true, \n          message: 'Database connection successful using environment variables' \n        })\n      } catch (error) {\n        console.error('Database connection test failed:', error)\n        return NextResponse.json(\n          { \n            success: false, \n            error: `Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}` \n          },\n          { status: 500 }\n        )\n      }\n    }\n    \n    // Original logic for manual config (not currently used)\n    return NextResponse.json(\n      { success: false, error: 'Manual configuration not supported in this version' },\n      { status: 400 }\n    )\n  } catch (error) {\n    console.error('Database connection test error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: error instanceof Error ? error.message : 'Failed to parse request' \n      },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1520},"components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"components/news-carousel.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect, useCallback } from \"react\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\n\n\ninterface NewsItem {\n  id: string\n  title: string\n  summary: string\n  content: string\n  imageUrl: string\n  category?: string\n  publishedAt: Date\n  createdAt: Date\n  slug: string\n}\n\ninterface NewsCarouselProps {\n  newsItems: NewsItem[]\n}\n\nexport default function NewsCarousel({ newsItems }: NewsCarouselProps) {\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [isHovering, setIsHovering] = useState(false)\n  const [isTransitioning, setIsTransitioning] = useState(false)\n\n  // Auto-advance the carousel\n  useEffect(() => {\n    if (isHovering) return\n\n    const interval = setInterval(() => {\n      handleNext()\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [isHovering, newsItems.length])\n\n  const handlePrev = useCallback(() => {\n    if (isTransitioning) return\n    setIsTransitioning(true)\n    setActiveIndex((current) => (current === 0 ? newsItems.length - 1 : current - 1))\n    setTimeout(() => setIsTransitioning(false), 500)\n  }, [isTransitioning, newsItems.length])\n\n  const handleNext = useCallback(() => {\n    if (isTransitioning) return\n    setIsTransitioning(true)\n    setActiveIndex((current) => (current === newsItems.length - 1 ? 0 : current + 1))\n    setTimeout(() => setIsTransitioning(false), 500)\n  }, [isTransitioning, newsItems.length])\n\n  const goToSlide = useCallback(\n    (index: number) => {\n      if (isTransitioning) return\n      setIsTransitioning(true)\n      setActiveIndex(index)\n      setTimeout(() => setIsTransitioning(false), 500)\n    },\n    [isTransitioning],\n  )\n\n  if (!newsItems.length) return null\n\n  const activeItem = newsItems[activeIndex]\n\n  return (\n    <div\n      className=\"relative w-full h-[500px] md:h-[600px] overflow-hidden\"\n      style={{\n        backgroundColor: \"#3b0764\",\n        backgroundImage: \"url(/images/purple-pattern-bg.png)\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n\n\n      {/* Main Carousel */}\n      <div className=\"relative h-full w-full\">\n        {/* Slides */}\n        {newsItems.map((item, index) => (\n          <div\n            key={item.id}\n            className={`absolute inset-0 transition-opacity duration-500 ease-in-out ${\n              index === activeIndex ? \"opacity-100 z-10\" : \"opacity-0 z-0\"\n            }`}\n          >\n            <div className=\"flex items-center justify-center h-full w-full\">\n              <Image\n                src={item.imageUrl || \"/placeholder.svg\"}\n                alt={item.title}\n                width={800}\n                height={600}\n                className=\"object-contain transition-transform duration-300 rounded-3xl max-h-full max-w-full\"\n                unoptimized={true}\n              />\n            </div>\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-black/10\"></div>\n            <div className=\"absolute inset-0 bg-gradient-to-r from-black/40 via-transparent to-transparent\"></div>\n          </div>\n        ))}\n\n        {/* Navigation arrows */}\n        <button\n          onClick={handlePrev}\n          className=\"absolute left-4 top-1/2 -translate-y-1/2 z-30 bg-black/30 hover:bg-black/50 text-white rounded-full p-2 transition-all duration-300 ease-in-out\"\n          aria-label=\"Anterior\"\n          disabled={isTransitioning}\n        >\n          <ChevronLeft className=\"h-8 w-8\" />\n        </button>\n        <button\n          onClick={handleNext}\n          className=\"absolute right-4 top-1/2 -translate-y-1/2 z-30 bg-black/30 hover:bg-black/50 text-white rounded-full p-2 transition-all duration-300 ease-in-out\"\n          aria-label=\"Siguiente\"\n          disabled={isTransitioning}\n        >\n          <ChevronRight className=\"h-8 w-8\" />\n        </button>\n\n        {/* Content */}\n        <div className=\"absolute bottom-0 left-0 p-8 text-white max-w-3xl z-20\">\n          <Link href={`/noticias/${activeItem.id}`} className=\"group\">\n            <span className=\"inline-block px-4 py-2 bg-purple-700/90 backdrop-blur-sm text-white text-xs uppercase font-bold rounded-full mb-3 shadow-lg\">\n              {activeItem.category}\n            </span>\n            <h1 className=\"text-2xl md:text-4xl font-bold mb-3 group-hover:text-purple-300 transition-colors drop-shadow-2xl leading-tight\">\n              {activeItem.title}\n            </h1>\n            <div\n                className=\"text-gray-200 text-sm mb-4 line-clamp-3 drop-shadow-lg\"\n                dangerouslySetInnerHTML={{ __html: activeItem.summary }}\n              />\n            <span className=\"inline-block mt-4 text-purple-300 font-medium group-hover:underline drop-shadow-lg\">Leer más</span>\n          </Link>\n        </div>\n      </div>\n\n      {/* Indicators */}\n      <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-3 z-30\">\n        {newsItems.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === activeIndex ? \"bg-white w-6\" : \"bg-white/50 hover:bg-white/70\"\n            }`}\n            aria-label={`Ir a la noticia ${index + 1}`}\n            disabled={isTransitioning}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}","size_bytes":5542},"app/admin/layout.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport { Inter } from \"next/font/google\"\nimport { Home, Monitor, BarChart3, Newspaper, Users, Settings, LogOut, Mail, Radio, Mic, Building, LayoutDashboard, Eye, Globe, Menu, X, Clock } from 'lucide-react'\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { useRouter, usePathname } from \"next/navigation\"\nimport { useState, useEffect } from \"react\"\nimport { Video } from 'lucide-react'\nimport { Button } from \"@/components/ui/button\"\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function AdminLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const pathname = usePathname()\n\n  // Function to determine link class based on active path\n  const linkClassName = (href: string) => {\n    const isActive = pathname === href;\n    return `flex items-center gap-3 px-3 py-2 rounded-lg min-h-[44px] touch-manipulation ${\n      isActive\n        ? \"bg-blue-500 text-white font-semibold\"\n        : \"text-gray-700 hover:bg-gray-100\"\n    }`;\n  };\n\n  // Close sidebar on route change\n  useEffect(() => {\n    setSidebarOpen(false)\n  }, [pathname])\n\n  return (\n    <div className={`${inter.className} flex min-h-screen bg-gray-100`}>\n      {/* Mobile menu button */}\n      <div className=\"lg:hidden fixed top-4 left-4 z-50\">\n        <Button\n          onClick={() => setSidebarOpen(!sidebarOpen)}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"bg-white shadow-md\"\n        >\n          {sidebarOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {/* Sidebar overlay for mobile */}\n      {sidebarOpen && (\n        <div \n          className=\"lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`w-64 bg-white shadow-lg fixed lg:static inset-y-0 left-0 z-40 transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 transition-transform duration-300`}>\n        <div className=\"p-4 sm:p-6\">\n          <h1 className=\"text-lg sm:text-xl font-bold text-gray-800\">Admin CMS</h1>\n          <p className=\"text-xs sm:text-sm text-gray-600\">Canal del Congreso</p>\n        </div>\n\n        <nav className=\"mt-4 sm:mt-6\">\n          <div className=\"px-3 sm:px-4 space-y-1 sm:space-y-2\">\n            <Link \n              href=\"/admin\" \n              className={linkClassName(\"/admin\")}\n            >\n              <Home className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Dashboard</span>\n            </Link>\n\n\n            <Link \n              href=\"/admin/live-streams\" \n              className={linkClassName(\"/admin/live-streams\")}\n            >\n              <Monitor className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Transmisiones</span>\n            </Link>\n            <Link\n              href=\"/admin/homepage-config\"\n              className={linkClassName(\"/admin/homepage-config\")}\n            >\n              <Settings className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Config Homepage</span>\n            </Link>\n\n            <Link \n              href=\"/admin/programs\" \n              className={linkClassName(\"/admin/programs\")}\n            >\n              <BarChart3 className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Programas TV</span>\n            </Link>\n\n            <Link \n              href=\"/admin/programacion\" \n              className={linkClassName(\"/admin/programacion\")}\n            >\n              <Monitor className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Programación</span>\n            </Link>\n\n            <Link \n              href=\"/admin/news\" \n              className={linkClassName(\"/admin/news\")}\n            >\n              <Newspaper className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Noticias</span>\n            </Link>\n\n            <Link \n              href=\"/admin/video-news\" \n              className={linkClassName(\"/admin/video-news\")}\n            >\n              <Video className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Video Noticias</span>\n            </Link>\n\n            <Link \n              href=\"/admin/documents\" \n              className={linkClassName(\"/admin/documents\")}\n            >\n              <Globe className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Documentos</span>\n            </Link>\n\n            <Link \n              href=\"/admin/defensoria\" \n              className={linkClassName(\"/admin/defensoria\")}\n            >\n              <Mic className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Defensoría</span>\n            </Link>\n\n            <Link \n              href=\"/admin/users\" \n              className={linkClassName(\"/admin/users\")}\n            >\n              <Users className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Usuarios</span>\n            </Link>\n\n            <Link \n              href=\"/admin/database-config\" \n              className={linkClassName(\"/admin/database-config\")}\n            >\n              <Settings className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Base de Datos</span>\n            </Link>\n\n             <Link \n               href=\"/admin/smtp-config\" \n               className={linkClassName(\"/admin/smtp-config\")}\n             >\n              <Mail className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">SMTP Config</span>\n            </Link>\n\n            <Link \n              href=\"/admin/radio-programs\" \n              className={linkClassName(\"/admin/radio-programs\")}\n            >\n              <Radio className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Radio Programas</span>\n            </Link>\n\n            <Link \n              href=\"/admin/organs\" \n              className={linkClassName(\"/admin/organs\")}\n            >\n              <Building className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Órganos</span>\n            </Link>\n\n            <Link \n              href=\"/admin/pages\" \n              className={linkClassName(\"/admin/pages\")}\n            >\n              <LayoutDashboard className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Páginas</span>\n            </Link>\n\n            <Link \n              href=\"/admin/channels\" \n              className={linkClassName(\"/admin/channels\")}\n            >\n              <Monitor className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Canales</span>\n            </Link>\n\n             <Link \n               href=\"/admin/featured-programs\" \n               className={linkClassName(\"/admin/featured-programs\")}\n             >\n              <Eye className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Programas Destacados</span>\n            </Link>\n\n            <Link \n              href=\"/admin/timezone-config\" \n              className={linkClassName(\"/admin/timezone-config\")}\n            >\n              <Clock className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Zona Horaria</span>\n            </Link>\n\n            <Link \n              href=\"/admin/transparency-sections\" \n              className={linkClassName(\"/admin/transparency-sections\")}\n            >\n              <Eye className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm sm:text-base\">Transparencia</span>\n            </Link>\n\n            <div className=\"mt-4 pt-4 border-t border-gray-200\">\n              <Link \n                href=\"/\" \n                className={linkClassName(\"/\")}\n              >\n                <LogOut className=\"h-4 w-4 flex-shrink-0\" />\n                <span className=\"text-sm sm:text-base\">Salir al Sitio</span>\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 lg:ml-0\">\n        <div className=\"lg:hidden h-16\"></div> {/* Spacer for mobile menu button */}\n        {children}\n        <Toaster />\n      </div>\n    </div>\n  )\n}","size_bytes":8482},"components/api-rate-limiter.tsx":{"content":"\nimport { createContext, useContext, useRef, ReactNode } from 'react'\n\ninterface RateLimiterContextType {\n  canMakeRequest: (endpoint: string) => boolean\n  recordRequest: (endpoint: string) => void\n}\n\nconst RateLimiterContext = createContext<RateLimiterContextType | null>(null)\n\nexport function useRateLimit() {\n  const context = useContext(RateLimiterContext)\n  if (!context) {\n    throw new Error('useRateLimit must be used within RateLimiterProvider')\n  }\n  return context\n}\n\ninterface RateLimiterProviderProps {\n  children: ReactNode\n}\n\nexport function RateLimiterProvider({ children }: RateLimiterProviderProps) {\n  const requestTimes = useRef<Record<string, number[]>>({})\n\n  const canMakeRequest = (endpoint: string): boolean => {\n    const now = Date.now()\n    const times = requestTimes.current[endpoint] || []\n    \n    // Remove requests older than 15 minutes\n    const fifteenMinutesAgo = now - 15 * 60 * 1000\n    const recentRequests = times.filter(time => time > fifteenMinutesAgo)\n    \n    // Update the array\n    requestTimes.current[endpoint] = recentRequests\n    \n    // Check if we can make another request (limit to 50 per 15 minutes for safety)\n    return recentRequests.length < 50\n  }\n\n  const recordRequest = (endpoint: string): void => {\n    const now = Date.now()\n    if (!requestTimes.current[endpoint]) {\n      requestTimes.current[endpoint] = []\n    }\n    requestTimes.current[endpoint].push(now)\n  }\n\n  return (\n    <RateLimiterContext.Provider value={{ canMakeRequest, recordRequest }}>\n      {children}\n    </RateLimiterContext.Provider>\n  )\n}\n","size_bytes":1576},"app/api/smtp/test/route.ts":{"content":"\nimport { NextRequest, NextResponse } from \"next/server\"\nimport { sendContactEmail, ContactFormData } from \"@/lib/email\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data: ContactFormData = await request.json()\n\n    // Add test prefix to subject\n    const testData = {\n      ...data,\n      asunto: `[TEST] ${data.asunto}`,\n      mensaje: `[ESTE ES UN EMAIL DE PRUEBA]\\n\\n${data.mensaje}\\n\\nEste email fue enviado desde la configuración SMTP del panel de administración para verificar que la configuración está funcionando correctamente.`\n    }\n\n    const result = await sendContactEmail(testData)\n\n    if (result.success) {\n      return NextResponse.json({\n        success: true,\n        message: \"Email de prueba enviado correctamente\",\n        messageId: result.messageId\n      })\n    } else {\n      return NextResponse.json(\n        {\n          success: false,\n          message: result.error || \"Error al enviar el email de prueba\"\n        },\n        { status: 500 }\n      )\n    }\n  } catch (error) {\n    console.error(\"Error in SMTP test:\", error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: \"Error interno del servidor al probar SMTP\"\n      },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1248},"app/sitemap.xml/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\n\n// Generate sitemap dynamically\nexport async function GET() {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'\n  \n  // Static pages\n  const staticPages = [\n    '',\n    '/noticias',\n    '/noticias/todas',\n    '/noticias/en-vivo',\n    '/radio',\n    '/transmisiones',\n    '/transparencia',\n    '/transparencia/focalizada',\n    '/transparencia/focalizada/tu-congreso',\n    '/transparencia/focalizada/representantes',\n    '/transparencia/focalizada/ciudadania',\n    '/transparencia/datos-abiertos',\n    '/transparencia/compromisos',\n    '/transparencia/compromisos/estructura',\n    '/transparencia/compromisos/informacion',\n    '/transparencia/compromisos/normatividad',\n    '/transparencia/plataforma-nacional',\n    '/programacion',\n    '/programacion/programas',\n    '/radio/legisladores',\n    '/radio/legisladores/busqueda',\n    '/contacto'\n  ]\n\n  // News categories\n  const newsCategories = ['politica', 'economia', 'sociedad', 'actualidad']\n\n  let sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n`\n\n  // Add static pages\n  staticPages.forEach(page => {\n    sitemap += `  <url>\n    <loc>${baseUrl}${page}</loc>\n    <lastmod>${new Date().toISOString()}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.8</priority>\n  </url>\n`\n  })\n\n  // Add news category pages\n  newsCategories.forEach(category => {\n    sitemap += `  <url>\n    <loc>${baseUrl}/noticias/categorias/${category}</loc>\n    <lastmod>${new Date().toISOString()}</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.7</priority>\n  </url>\n`\n  })\n\n  try {\n    // Fetch news articles\n    const newsResponse = await fetch(`${baseUrl}/api/news/all`, {\n      cache: 'no-store'\n    })\n    \n    if (newsResponse.ok) {\n      const news = await newsResponse.json()\n      news.forEach((article: any) => {\n        sitemap += `  <url>\n    <loc>${baseUrl}/noticias/${article.id}</loc>\n    <lastmod>${new Date(article.updatedAt || article.createdAt).toISOString()}</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.6</priority>\n  </url>\n`\n      })\n    }\n\n    // Fetch radio programs\n    const programsResponse = await fetch(`${baseUrl}/api/radio/programs`, {\n      cache: 'no-store'\n    })\n    \n    if (programsResponse.ok) {\n      const programs = await programsResponse.json()\n      programs.forEach((program: any) => {\n        if (program.slug) {\n          sitemap += `  <url>\n    <loc>${baseUrl}/radio/${program.slug}</loc>\n    <lastmod>${new Date(program.updatedAt || program.createdAt).toISOString()}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.7</priority>\n  </url>\n`\n          sitemap += `  <url>\n    <loc>${baseUrl}/radio/${program.slug}/episodios</loc>\n    <lastmod>${new Date(program.updatedAt || program.createdAt).toISOString()}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.6</priority>\n  </url>\n`\n        }\n      })\n    }\n\n    // Fetch legislators\n    const legislatorsResponse = await fetch(`${baseUrl}/api/legislators`, {\n      cache: 'no-store'\n    })\n    \n    if (legislatorsResponse.ok) {\n      const legislators = await legislatorsResponse.json()\n      legislators.forEach((legislator: any) => {\n        sitemap += `  <url>\n    <loc>${baseUrl}/radio/legisladores/${legislator.id}</loc>\n    <lastmod>${new Date().toISOString()}</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.5</priority>\n  </url>\n`\n      })\n    }\n\n    // Fetch programs (main programs)\n    const mainProgramsResponse = await fetch(`${baseUrl}/api/programs`, {\n      cache: 'no-store'\n    })\n    \n    if (mainProgramsResponse.ok) {\n      const mainPrograms = await mainProgramsResponse.json()\n      mainPrograms.forEach((program: any) => {\n        sitemap += `  <url>\n    <loc>${baseUrl}/programacion/programas/${program.id}</loc>\n    <lastmod>${new Date(program.updatedAt || program.createdAt).toISOString()}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.6</priority>\n  </url>\n`\n      })\n    }\n\n  } catch (error) {\n    console.error('Error generating sitemap:', error)\n  }\n\n  sitemap += `</urlset>`\n\n  return new NextResponse(sitemap, {\n    headers: {\n      'Content-Type': 'application/xml',\n      'Cache-Control': 'public, max-age=3600, s-maxage=3600'\n    }\n  })\n}\n","size_bytes":4333},"app/admin/video-news/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Plus, Edit, Trash2, ArrowLeft, Play } from \"lucide-react\"\n\ninterface VideoNews {\n  id: string\n  title: string\n  description?: string\n  videoUrl: string\n  thumbnailUrl?: string\n  category?: string\n  duration?: string\n  publishedAt: Date\n  status: string\n  createdAt: Date\n}\n\nexport default function VideoNewsAdmin() {\n  const [videoNews, setVideoNews] = useState<VideoNews[]>([])\n  const [showForm, setShowForm] = useState(false)\n  const [editingVideo, setEditingVideo] = useState<VideoNews | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    videoUrl: '',\n    thumbnailUrl: '',\n    category: '',\n    duration: '',\n    publishedAt: new Date().toISOString().slice(0, 16),\n  })\n  const [selectedThumbnail, setSelectedThumbnail] = useState<File | null>(null)\n  const [thumbnailPreview, setThumbnailPreview] = useState<string>('')\n\n  const categories = [\n    'Trabajo en comisiones',\n    'Trabajo en pleno', \n    'Relaciones Exteriores',\n    'Temas de actualidad',\n    'Reformas aprobadas',\n    'Foros y seminarios',\n    'Entrevistas',\n    'Reportajes especiales'\n  ]\n\n  useEffect(() => {\n    loadVideoNews()\n  }, [])\n\n  const loadVideoNews = async () => {\n    try {\n      setIsLoading(true)\n      const response = await fetch('/api/video-news/all', {\n        cache: 'no-store'\n      })\n      if (response.ok) {\n        const data = await response.json()\n        setVideoNews(data)\n      }\n    } catch (error) {\n      console.error('Error loading video news:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setSelectedThumbnail(file)\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setThumbnailPreview(reader.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const uploadThumbnail = async (file: File): Promise<string> => {\n    const uploadFormData = new FormData()\n    uploadFormData.append('file', file)\n    uploadFormData.append('type', 'video-thumbnails')\n\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: uploadFormData,\n    })\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }))\n      console.error('Upload error:', errorData)\n      throw new Error(errorData.error || 'Error uploading thumbnail')\n    }\n\n    const result = await response.json()\n    if (!result.success) {\n      throw new Error(result.error || 'Error uploading thumbnail')\n    }\n\n    return result.imageUrl\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    try {\n      setIsLoading(true)\n\n      let thumbnailUrl = formData.thumbnailUrl\n\n      if (selectedThumbnail) {\n        thumbnailUrl = await uploadThumbnail(selectedThumbnail)\n      }\n\n      const videoData = {\n        ...formData,\n        thumbnailUrl,\n        publishedAt: new Date(formData.publishedAt)\n      }\n\n      const url = editingVideo \n        ? `/api/video-news/${editingVideo.id}` \n        : '/api/video-news'\n\n      const method = editingVideo ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(videoData),\n      })\n\n      if (response.ok) {\n        setShowForm(false)\n        setEditingVideo(null)\n        resetForm()\n        loadVideoNews()\n      }\n    } catch (error) {\n      console.error('Error saving video news:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleEdit = (video: VideoNews) => {\n    setEditingVideo(video)\n    setFormData({\n      title: video.title,\n      description: video.description || '',\n      videoUrl: video.videoUrl,\n      thumbnailUrl: video.thumbnailUrl || '',\n      category: video.category || '',\n      duration: video.duration || '',\n      publishedAt: new Date(video.publishedAt).toISOString().slice(0, 16),\n    })\n    setSelectedThumbnail(null)\n    setThumbnailPreview(video.thumbnailUrl || '')\n    setShowForm(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar este video?')) {\n      try {\n        setIsLoading(true)\n        const response = await fetch(`/api/video-news/${id}`, {\n          method: 'DELETE',\n        })\n        if (response.ok) {\n          loadVideoNews()\n        }\n      } catch (error) {\n        console.error('Error deleting video news:', error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      videoUrl: '',\n      thumbnailUrl: '',\n      category: '',\n      duration: '',\n      publishedAt: new Date().toISOString().slice(0, 16),\n    })\n    setSelectedThumbnail(null)\n    setThumbnailPreview('')\n  }\n\n  const handleNewVideo = () => {\n    setEditingVideo(null)\n    resetForm()\n    setShowForm(true)\n  }\n\n  const handleCancel = () => {\n    setShowForm(false)\n    setEditingVideo(null)\n    resetForm()\n  }\n\n  if (showForm) {\n    return (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-6\">\n          <Button\n            variant=\"outline\"\n            onClick={handleCancel}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Volver\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">\n              {editingVideo ? 'Editar Video' : 'Nuevo Video'}\n            </h1>\n            <p className=\"text-gray-600\">\n              Completa la información del video noticia.\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"videoUrl\">URL de la Playlist de YouTube</Label>\n                    <Input\n                      id=\"videoUrl\"\n                      type=\"url\"\n                      placeholder=\"https://www.youtube.com/playlist?list=PLYourPlaylistID\"\n                      value={formData.videoUrl}\n                      onChange={(e) => setFormData(prev => ({ ...prev, videoUrl: e.target.value }))}\n                      required\n                      className=\"mt-1\"\n                    />\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Acepta cualquier URL de YouTube: playlists, videos individuales, transmisiones en vivo o URLs cortas (youtu.be).\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"publishedAt\">Fecha y Hora de Publicación</Label>\n                    <Input\n                      id=\"publishedAt\"\n                      type=\"datetime-local\"\n                      value={formData.publishedAt}\n                      onChange={(e) => setFormData({ ...formData, publishedAt: e.target.value })}\n                      required\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"description\">Descripción</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={formData.description}\n                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                      rows={4}\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  \n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-4 pt-6\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleCancel}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isLoading}>\n                  {isLoading ? 'Guardando...' : (editingVideo ? 'Actualizar' : 'Crear')}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Video Noticias</h1>\n          <p className=\"text-gray-600\">Gestiona videos noticiosos del portal</p>\n        </div>\n\n        <Button onClick={handleNewVideo}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nuevo Video\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Videos</CardTitle>\n          <CardDescription>\n            {videoNews.length} videos publicados\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-4\">Cargando videos...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Fecha</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {videoNews.map((video) => (\n                  <TableRow key={video.id}>\n                    <TableCell>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        video.status === 'published' ? 'bg-green-100 text-green-800' :\n                        video.status === 'scheduled' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {video.status === 'published' ? 'Publicado' :\n                         video.status === 'scheduled' ? 'Programado' :\n                         'Borrador'}\n                      </span>\n                    </TableCell>\n                    <TableCell>{new Date(video.publishedAt).toLocaleDateString('es-ES')}</TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open(video.videoUrl, '_blank')}\n                          title=\"Ver playlist en YouTube\"\n                        >\n                          <Play className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(video)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(video.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {videoNews.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={3} className=\"text-center py-8 text-gray-500\">\n                      No hay videos disponibles. Crea el primer video.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":12336},"app/api/programs/reorder/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { updateProgramOrderInDB } from '@/lib/api-database'\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const { programId, direction } = await request.json()\n    \n    if (!programId || !direction || !['up', 'down'].includes(direction)) {\n      return NextResponse.json(\n        { error: 'Invalid request. Need programId and direction (up/down)' },\n        { status: 400 }\n      )\n    }\n\n    const success = await updateProgramOrderInDB(programId, direction)\n    \n    if (!success) {\n      return NextResponse.json(\n        { error: 'Failed to update program order' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error reordering program:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":911},"app/api/admin/check-streams/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getLiveStreamsFromDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const streams = await getLiveStreamsFromDB()\n    \n    console.log('=== DATABASE STREAMS DEBUG ===')\n    console.log('Total streams found:', streams.length)\n    \n    streams.forEach((stream, index) => {\n      console.log(`Stream ${index + 1}:`, {\n        id: stream.id,\n        title: stream.title,\n        streamUrl: stream.streamUrl,\n        createdAt: stream.createdAt\n      })\n    })\n    \n    // Separate updated vs old streams\n    const updatedStreams = streams.filter(s => !s.streamUrl.includes('example.com'))\n    const oldStreams = streams.filter(s => s.streamUrl.includes('example.com'))\n    \n    console.log('Updated streams (good):', updatedStreams.length)\n    console.log('Old example streams (to delete):', oldStreams.length)\n    \n    return NextResponse.json({\n      success: true,\n      total: streams.length,\n      updated: updatedStreams.length,\n      oldExamples: oldStreams.length,\n      updatedStreams: updatedStreams.map(stream => ({\n        id: stream.id,\n        title: stream.title,\n        streamUrl: stream.streamUrl,\n        createdAt: stream.createdAt\n      })),\n      oldStreams: oldStreams.map(stream => ({\n        id: stream.id,\n        title: stream.title,\n        streamUrl: stream.streamUrl,\n        createdAt: stream.createdAt\n      }))\n    })\n  } catch (error) {\n    console.error('Error checking streams:', error)\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to check streams'\n    }, { status: 500 })\n  }\n}\n","size_bytes":1617},"app/api/news/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getNewsFromDB, createNewsItemInDB } from '@/lib/api-database'\nimport { parseAdminTimezoneDateTime } from '@/lib/timezone'\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '20')\n    const category = searchParams.get('category') || undefined\n    \n    const result = await getNewsFromDB(page, limit, category)\n    console.log('API: News fetched from DB:', result.news.length, 'items', { page, limit, total: result.total })\n\n    // Add detailed debug logging\n    console.log('API: All news items:', result.news.map(item => ({ \n      id: item.id, \n      title: item.title?.substring(0, 30) + '...',\n      imageUrl: item.imageUrl,\n      hasImage: !!item.imageUrl,\n      publishedAt: item.publishedAt,\n      createdAt: item.createdAt \n    })))\n\n    // Return with comprehensive no-cache headers to prevent deployment caching issues\n    return new Response(JSON.stringify(result), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'Last-Modified': new Date().toUTCString(),\n        'Vary': 'Accept-Encoding',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching news:', error)\n    return NextResponse.json({ error: 'Failed to fetch news' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n\n    // Handle publishedAt - if it's an ISO string from Date serialization, use it directly\n    // If it's a naive datetime-local string, parse it in admin timezone\n    let publishDate: Date\n    if (data.publishedAt) {\n      if (typeof data.publishedAt === 'string' && (data.publishedAt.includes('Z') || /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(data.publishedAt))) {\n        // It's an ISO string from Date serialization, use it directly\n        publishDate = new Date(data.publishedAt)\n      } else {\n        // It's a naive datetime-local string, parse in admin timezone\n        publishDate = await parseAdminTimezoneDateTime(data.publishedAt)\n      }\n    } else {\n      publishDate = new Date()\n    }\n\n    const now = new Date()\n    const status = data.status || (publishDate <= now ? 'published' : 'scheduled')\n\n    const newsItem = await createNewsItemInDB({\n      ...data,\n      publishedAt: publishDate,\n      status\n    })\n    return NextResponse.json(newsItem)\n  } catch (error) {\n    console.error('Error creating news item:', error)\n    return NextResponse.json({ error: 'Failed to create news item' }, { status: 500 })\n  }\n}","size_bytes":2831},"app/transmisiones/page.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport { Play, ExternalLink } from \"lucide-react\"\nimport { useState, useEffect, Suspense } from \"react\"\nimport { useSearchParams, useRouter } from \"next/navigation\"\n\n// Importa los componentes\nimport Footer from \"@/components/footer\"\nimport { getLiveStreams, type LiveStream } from \"@/lib/api\"\n\nfunction TransmisionesContent() {\n  const [liveStreams, setLiveStreams] = useState<LiveStream[]>([])\n  const [currentStream, setCurrentStream] = useState<LiveStream | null>(null)\n  const [loading, setLoading] = useState(true)\n  const searchParams = useSearchParams()\n  const router = useRouter()\n\n  useEffect(() => {\n    const fetchStreams = async () => {\n      try {\n        const response = await fetch('/api/live-streams', {\n          cache: 'no-store',\n          headers: {\n            'Cache-Control': 'no-cache',\n            'Pragma': 'no-cache'\n          }\n        })\n        if (response.ok) {\n          const allStreams = await response.json()\n          console.log('Fetched streams with status:', allStreams.map((s: LiveStream) => ({ id: s.id, status: s.status, channel: s.channel })))\n          // Show streams that are live, in recess, or signal open, hide offline streams\n          const onlineStreams = allStreams.filter((stream: LiveStream) => \n            stream.status === 'live' || stream.status === 'recess' || stream.status === 'signal_open'\n          )\n          setLiveStreams(onlineStreams)\n\n          // Check if there's a stream ID in the URL\n          const streamId = searchParams.get('stream')\n          if (streamId) {\n            const selectedStream = onlineStreams.find((stream: LiveStream) => stream.id === streamId)\n            if (selectedStream) {\n              setCurrentStream(selectedStream)\n            } else {\n              // If stream not found, default to first live or recess stream\n              const availableStream = onlineStreams.find((stream: LiveStream) => \n                stream.status === 'live' || stream.status === 'recess'\n              )\n              if (availableStream) {\n                setCurrentStream(availableStream)\n              }\n            }\n          } else {\n            // Set the first live, recess, or signal open stream as current\n            const availableStream = onlineStreams.find((stream: LiveStream) => \n              stream.status === 'live' || stream.status === 'recess' || stream.status === 'signal_open'\n            )\n            if (availableStream) {\n              setCurrentStream(availableStream)\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load live streams:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStreams()\n    \n    // Set up automatic refresh every 30 seconds to check for status updates\n    const interval = setInterval(fetchStreams, 30000)\n    \n    return () => clearInterval(interval)\n  }, [searchParams])\n\n  const getStreamUrl = (stream: LiveStream | null) => {\n    if (stream && stream.streamUrl) {\n      return stream.streamUrl\n    }\n    // Fallback to default stream\n    return 'https://ccstreaming.packet.mx/WebRTCAppEE/play.html?id=45.1_kd5oiNTTWO0gEOFc431277834&playOrder=hls'\n  }\n\n  const switchStream = (stream: LiveStream) => {\n    console.log('Switching to stream:', stream)\n    setCurrentStream(stream)\n    // Update URL with stream parameter\n    const url = new URL(window.location.href)\n    url.searchParams.set('stream', stream.id)\n    router.push(url.pathname + url.search, { scroll: false })\n  }\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <main className=\"flex-grow bg-gray-100\">\n        {/* Hero Section with Player */}\n        <section className=\"bg-purple-900 text-white py-8\">\n          <div className=\"container mx-auto px-4\">\n            <h1 className=\"text-4xl font-bold mb-4 text-center\">EN VIVO</h1>\n\n\n            {/* Main Video Player */}\n            <div className=\"relative aspect-video max-w-6xl mx-auto bg-black rounded-lg overflow-hidden mb-6\">\n              {loading ? (\n                <div className=\"absolute inset-0 flex items-center justify-center text-white\">\n                  <div className=\"text-center\">\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n                    <p>Cargando transmisión...</p>\n                  </div>\n                </div>\n              ) : currentStream ? (\n                <iframe\n                  key={currentStream.id}\n                  className=\"absolute inset-0 w-full h-full\"\n                  src={getStreamUrl(currentStream)}\n                  title={currentStream.title}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                />\n              ) : (\n                <iframe\n                  className=\"absolute inset-0 w-full h-full\"\n                  src={getStreamUrl(null)}\n                  title=\"Canal del Congreso en vivo\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                />\n              )}\n\n              {/* Live/Recess/Signal indicator */}\n              {currentStream && (currentStream.status === 'live' || currentStream.status === 'recess' || currentStream.status === 'signal_open') && (\n                <div className={`absolute top-4 left-4 text-white px-3 py-1 rounded-full text-sm font-bold ${\n                  currentStream.status === 'live' ? 'bg-red-600' : \n                  currentStream.status === 'recess' ? 'bg-orange-600' : \n                  'bg-blue-600'\n                }`}>\n                  {currentStream.status === 'live' ? '● EN VIVO' : \n                   currentStream.status === 'recess' ? '● EN RECESO' : \n                   '● SEÑAL ABIERTA'}\n                </div>\n              )}\n\n              \n            </div>\n\n            {/* Stream title below player */}\n            <div className=\"text-center mt-4 mb-6\">\n              <h2 className=\"text-white mb-2\">\n                {currentStream?.title || \"Canal del Congreso\"}\n              </h2>\n              <div className=\"flex items-center justify-center\">\n                <Image\n                  src={currentStream ? (() => {\n                    switch (currentStream.channel) {\n                      case 'C+':\n                        return '/images/channel-c-logo.png'\n                      case 'D+':\n                        return '/images/channel-d-logo.png'\n                      case 'S+':\n                        return '/images/channel-g-logo.png'\n                      case 'ST+':\n                        return '/images/channel-st-logo.png'\n                      default:\n                        return '/images/logo-canal-congreso.png'\n                    }\n                  })() : '/images/logo-canal-congreso.png'}\n                  alt=\"Channel Logo\"\n                  width={32}\n                  height={32}\n                  className=\"object-contain\"\n                />\n              </div>\n            </div>\n\n            {/* Quick channel access - Dynamic from live streams */}\n            <div className=\"flex justify-center gap-2 sm:gap-4 flex-wrap\">\n              {liveStreams.filter(stream => (stream.status === 'live' || stream.status === 'signal_open' || stream.status === 'recess')).sort((a, b) => {\n                // Sort by channel to ensure consistent order: C+ (45.1), S+ (45.2), D+ (45.3), ST+ (45.4)\n                const order = { 'C+': 1, 'S+': 2, 'D+': 3, 'ST+': 4 };\n                return (order[a.channel as keyof typeof order] || 999) - (order[b.channel as keyof typeof order] || 999);\n              }).map((stream) => {\n                const getChannelColor = (channel: string) => {\n                  switch (channel) {\n                    case 'C+':\n                      return 'bg-gray-500 hover:bg-gray-600'\n                    case 'S+':\n                      return 'bg-red-600 hover:bg-red-700'\n                    case 'D+':\n                      return 'bg-green-600 hover:bg-green-700'\n                    case 'ST+':\n                      return 'bg-blue-600 hover:bg-blue-700'\n                    default:\n                      return 'bg-gray-500 hover:bg-gray-600'\n                  }\n                }\n\n                const getChannelNumber = (channel: string) => {\n                  switch (channel) {\n                    case 'C+':\n                      return '45.1'\n                    case 'S+':\n                      return '45.2'\n                    case 'D+':\n                      return '45.3'\n                    case 'ST+':\n                      return 'Streaming'\n                    default:\n                      return channel || 'Canal'\n                  }\n                }\n\n                const getChannelLogo = (channel: string) => {\n                  switch (channel) {\n                    case 'C+':\n                      return '/images/channel-c-logo.png'\n                    case 'D+':\n                      return '/images/channel-d-logo.png'\n                    case 'S+':\n                      return '/images/channel-g-logo.png'\n                    case 'ST+':\n                      return '/images/channel-st-logo.png'\n                    default:\n                      return '/images/logo-canal-congreso.png'\n                  }\n                }\n\n                return (\n                  <button\n                    key={stream.id}\n                    onClick={() => switchStream(stream)}\n                    className={`${getChannelColor(stream.channel || '')} text-white px-3 py-1 sm:px-4 sm:py-2 rounded-full text-xs sm:text-sm font-medium transition-colors flex items-center gap-2 ${\n                      currentStream?.id === stream.id ? 'ring-2 ring-white' : ''\n                    }`}\n                  >\n                    <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                    <Image\n                      src={getChannelLogo(stream.channel || '')}\n                      alt={`${stream.channel} logo`}\n                      width={20}\n                      height={20}\n                      className=\"object-contain\"\n                    />\n                    {stream.channel === 'ST+' ? 'Streaming' : `Canal ${getChannelNumber(stream.channel || '')}`}\n                  </button>\n                )\n              })}\n            </div>\n          </div>\n        </section>\n\n        {/* Transmisiones Actuales */}\n        <section className=\"py-8\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-2xl font-bold mb-6 text-center uppercase\">Transmisiones Actuales</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {liveStreams.map((stream) => {\n                // Function to get channel logo\n                const getChannelLogo = (channel: string) => {\n                  switch (channel) {\n                    case 'C+':\n                      return '/images/channel-c-logo.png'\n                    case 'D+':\n                      return '/images/channel-d-logo.png'\n                    case 'S+':\n                      return '/images/channel-g-logo.png'\n                    case 'ST+':\n                      return '/images/channel-st-logo.png'\n                    default:\n                      return '/images/logo-canal-congreso.png'\n                  }\n                }\n\n                return (\n                  <div key={stream.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                    <div className=\"relative h-48 w-full\">\n                      <Image\n                        src={stream.thumbnailUrl || '/placeholder.svg?height=192&width=384&text=Stream'}\n                        alt={stream.title}\n                        fill\n                        className=\"object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-black bg-opacity-20\"></div>\n                      {(stream.status === 'live' || stream.status === 'recess' || stream.status === 'signal_open') && (\n                        <div className={`absolute top-2 left-2 text-white px-2 py-1 rounded text-xs font-bold ${\n                          stream.status === 'live' ? 'bg-red-600' : \n                          stream.status === 'recess' ? 'bg-orange-600' : \n                          'bg-blue-600'\n                        }`}>\n                          {stream.status === 'live' ? '● EN VIVO' : \n                           stream.status === 'recess' ? '● EN RECESO' : \n                           '● SEÑAL ABIERTA'}\n                        </div>\n                      )}\n                      </div>\n                    <div className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Image\n                          src={getChannelLogo(stream.channel || '')}\n                          alt=\"Channel Logo\"\n                          width={20}\n                          height={20}\n                          className=\"object-contain flex-shrink-0\"\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className={`text-xs px-2 py-0.5 rounded-full text-white font-medium ${\n                              stream.channel === 'C+' ? 'bg-gray-500' :\n                              stream.channel === 'S+' ? 'bg-red-600' :\n                              stream.channel === 'D+' ? 'bg-green-600' :\n                              stream.channel === 'ST+' ? 'bg-blue-600' :\n                              'bg-gray-600'\n                            }`}>\n                              {stream.channel === 'C+' ? '45.1' :\n                               stream.channel === 'S+' ? '45.2' :\n                               stream.channel === 'D+' ? '45.3' :\n                               stream.channel === 'ST+' ? 'Streaming' :\n                               stream.channel || 'Canal'}\n                            </span>\n                          </div>\n                          <h3 className=\"font-bold text-sm\">{stream.title}</h3>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs font-medium ${\n                          stream.status === 'live' ? 'text-red-500' :\n                          stream.status === 'recess' ? 'text-orange-500' :\n                          stream.status === 'signal_open' ? 'text-blue-500' :\n                          'text-gray-500'\n                        }`}>\n                          {stream.status === 'live' ? 'En vivo' :\n                           stream.status === 'recess' ? 'En receso' :\n                           stream.status === 'signal_open' ? 'Señal abierta' :\n                           'Offline'}\n                        </span>\n                        <div className=\"flex space-x-2\">\n                          <button\n                            onClick={() => switchStream(stream)}\n                            className=\"text-purple-900 text-sm font-medium hover:underline flex items-center transition-colors\"\n                          >\n                            Ver ahora <ExternalLink className=\"h-3 w-3 ml-1\" />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n\n              {liveStreams.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <p className=\"text-gray-500\">No hay transmisiones disponibles en este momento</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  )\n}\n\nexport default function TransmisionesPage() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <TransmisionesContent />\n    </Suspense>\n  )\n}","size_bytes":16297},"app/api/channels/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getDatabaseConnection } from '@/lib/database'\n\ninterface ChannelConfig {\n  id: string\n  name: string\n  number: string\n  logo: string\n  backgroundColor: string\n  textColor: string\n  transmisionesLink: string\n  isActive: boolean\n  order: number\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n// Create table if it doesn't exist\nasync function ensureChannelTable() {\n  const pool = getDatabaseConnection()\n  if (!pool) {\n    throw new Error('Database connection not available')\n  }\n\n  try {\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS channel_config (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(50) NOT NULL,\n        number VARCHAR(10) NOT NULL,\n        logo TEXT,\n        background_color VARCHAR(7) NOT NULL,\n        text_color VARCHAR(7) DEFAULT '#ffffff',\n        transmisiones_link TEXT NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        order_position INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Insert default channels if table is empty\n    const result = await pool.query('SELECT COUNT(*) FROM channel_config')\n    const count = parseInt(result.rows[0].count)\n\n    if (count === 0) {\n      await pool.query(`\n        INSERT INTO channel_config (name, number, logo, background_color, text_color, transmisiones_link, is_active, order_position)\n        VALUES \n        ('C+', '45.1', '/images/channel-c-logo.png', '#4a4a4a', '#ffffff', '/transmisiones?stream=1', true, 1),\n        ('S+', '45.2', '/images/channel-g-logo.png', '#b91c1c', '#ffffff', '/transmisiones?stream=3', true, 2),\n        ('D+', '45.3', '/images/channel-d-logo.png', '#15803d', '#ffffff', '/transmisiones?stream=2', true, 3)\n      `)\n    }\n  } catch (error) {\n    console.error('Error ensuring channel table:', error)\n  }\n}\n\nexport async function GET() {\n  const pool = getDatabaseConnection()\n  if (!pool) {\n    return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n  }\n\n  try {\n    await ensureChannelTable()\n    \n    const result = await pool.query(`\n      SELECT \n        id,\n        name,\n        number,\n        logo,\n        background_color as \"backgroundColor\",\n        text_color as \"textColor\",\n        transmisiones_link as \"transmisionesLink\",\n        is_active as \"isActive\",\n        order_position as \"order\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM channel_config \n      ORDER BY order_position ASC, id ASC\n    `)\n\n    return NextResponse.json(result.rows)\n  } catch (error) {\n    console.error('Error fetching channels:', error)\n    return NextResponse.json({ error: 'Error al obtener los canales' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  const pool = getDatabaseConnection()\n  if (!pool) {\n    return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n  }\n\n  try {\n    const body = await request.json()\n    const { name, number, logo, backgroundColor, textColor, transmisionesLink, isActive, order } = body\n\n    if (!name || !number || !backgroundColor || !transmisionesLink) {\n      return NextResponse.json(\n        { error: 'Campos requeridos: name, number, backgroundColor, transmisionesLink' },\n        { status: 400 }\n      )\n    }\n\n    await ensureChannelTable()\n\n    const result = await pool.query(`\n      INSERT INTO channel_config \n      (name, number, logo, background_color, text_color, transmisiones_link, is_active, order_position)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING \n        id,\n        name,\n        number,\n        logo,\n        background_color as \"backgroundColor\",\n        text_color as \"textColor\",\n        transmisiones_link as \"transmisionesLink\",\n        is_active as \"isActive\",\n        order_position as \"order\"\n    `, [name, number, logo || '', backgroundColor, textColor || '#ffffff', transmisionesLink, isActive ?? true, order || 0])\n\n    return NextResponse.json(result.rows[0], { status: 201 })\n  } catch (error) {\n    console.error('Error creating channel:', error)\n    return NextResponse.json({ error: 'Error al crear el canal' }, { status: 500 })\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  const pool = getDatabaseConnection()\n  if (!pool) {\n    return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n  }\n\n  try {\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n    \n    if (!id) {\n      return NextResponse.json({ error: 'ID de canal requerido' }, { status: 400 })\n    }\n\n    const body = await request.json()\n    const { name, number, logo, backgroundColor, textColor, transmisionesLink, isActive, order } = body\n\n    if (!name || !number || !backgroundColor || !transmisionesLink) {\n      return NextResponse.json(\n        { error: 'Campos requeridos: name, number, backgroundColor, transmisionesLink' },\n        { status: 400 }\n      )\n    }\n\n    const result = await pool.query(`\n      UPDATE channel_config \n      SET \n        name = $1,\n        number = $2,\n        logo = $3,\n        background_color = $4,\n        text_color = $5,\n        transmisiones_link = $6,\n        is_active = $7,\n        order_position = $8,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = $9\n      RETURNING \n        id,\n        name,\n        number,\n        logo,\n        background_color as \"backgroundColor\",\n        text_color as \"textColor\",\n        transmisiones_link as \"transmisionesLink\",\n        is_active as \"isActive\",\n        order_position as \"order\"\n    `, [name, number, logo || '', backgroundColor, textColor || '#ffffff', transmisionesLink, isActive ?? true, order || 0, id])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json({ error: 'Canal no encontrado' }, { status: 404 })\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating channel:', error)\n    return NextResponse.json({ error: 'Error al actualizar el canal' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  const pool = getDatabaseConnection()\n  if (!pool) {\n    return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n  }\n\n  try {\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n    \n    if (!id) {\n      return NextResponse.json({ error: 'ID de canal requerido' }, { status: 400 })\n    }\n\n    const result = await pool.query('DELETE FROM channel_config WHERE id = $1', [id])\n    \n    if (result.rowCount === 0) {\n      return NextResponse.json({ error: 'Canal no encontrado' }, { status: 404 })\n    }\n\n    return NextResponse.json({ message: 'Canal eliminado correctamente' })\n  } catch (error) {\n    console.error('Error deleting channel:', error)\n    return NextResponse.json({ error: 'Error al eliminar el canal' }, { status: 500 })\n  }\n}\n","size_bytes":6981},"app/admin/news/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport TinyMCEWrapper from \"@/components/tinymce-wrapper\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Plus, Edit, Trash2, ArrowLeft, Search, Send, Star } from \"lucide-react\"\nimport { getNews, createNewsItem, updateNewsItem, deleteNewsItem, type NewsItem } from \"@/lib/api-client\"\nimport BulkNewsUpload from \"@/components/bulk-news-upload\"\nimport { formatForAdminTimezoneInput, parseAdminTimezoneDateTime } from \"@/lib/timezone\"\n\nexport default function NewsAdmin() {\n  const [news, setNews] = useState<NewsItem[]>([])\n  const [filteredNews, setFilteredNews] = useState<NewsItem[]>([])\n  const [showForm, setShowForm] = useState(false)\n  const [editingNews, setEditingNews] = useState<NewsItem | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedCategory, setSelectedCategory] = useState('all')\n  const [selectedStatus, setSelectedStatus] = useState('all')\n  const [selectedItems, setSelectedItems] = useState<string[]>([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage] = useState(10)\n  const [formData, setFormData] = useState({\n    title: '',\n    summary: '',\n    content: '',\n    imageUrl: '',\n    category: '',\n    publishedAt: '',\n    date: new Date().toISOString().split('T')[0],\n    isFeatured: false,\n    featuredRank: null as number | null\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [imagePreview, setImagePreview] = useState<string>('')\n\n  const categories = [\n    'Trabajo en comisiones',\n    'Trabajo en pleno',\n    'Relaciones Exteriores',\n    'Temas de actualidad',\n    'Reformas aprobadas',\n    'Foros y seminarios'\n  ]\n\n  useEffect(() => {\n    loadNews()\n\n    // Set up interval to refresh news list periodically\n    const interval = setInterval(loadNews, 60000) // Refresh every minute\n\n    return () => clearInterval(interval)\n  }, [])\n\n  // Filter and search functionality\n  useEffect(() => {\n    let filtered = news\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(item =>\n        item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (item.summary && item.summary.toLowerCase().includes(searchTerm.toLowerCase())) ||\n        (item.category && item.category.toLowerCase().includes(searchTerm.toLowerCase()))\n      )\n    }\n\n    // Category filter\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(item => item.category === selectedCategory)\n    }\n\n    // Status filter\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(item => item.status === selectedStatus)\n    }\n\n    setFilteredNews(filtered)\n    setCurrentPage(1) // Reset to first page when filters change\n  }, [news, searchTerm, selectedCategory, selectedStatus])\n\n  const loadNews = async () => {\n    try {\n      setIsLoading(true)\n      // For admin, we want to see all news including scheduled\n      const response = await fetch('/api/news/all', {\n        cache: 'no-store'\n      })\n      if (response.ok) {\n        const data = await response.json()\n        setNews(data.news) // Fix: Use data.news instead of data\n      }\n    } catch (error) {\n      console.error('Error loading news:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Bulk operations\n  const handleSelectAll = () => {\n    if (selectedItems.length === filteredNews.length) {\n      setSelectedItems([])\n    } else {\n      setSelectedItems(filteredNews.map(item => item.id))\n    }\n  }\n\n  const handleSelectItem = (id: string) => {\n    setSelectedItems(prev =>\n      prev.includes(id)\n        ? prev.filter(item => item !== id)\n        : [...prev, id]\n    )\n  }\n\n  const handleBulkDelete = async () => {\n    if (selectedItems.length === 0) return\n\n    if (confirm(`¿Estás seguro de que quieres eliminar ${selectedItems.length} noticias?`)) {\n      try {\n        setIsLoading(true)\n        const deletePromises = selectedItems.map(id => \n          fetch(`/api/news/${id}`, { method: 'DELETE' })\n        )\n        await Promise.all(deletePromises)\n        setSelectedItems([])\n        loadNews()\n        alert('Noticias eliminadas exitosamente')\n      } catch (error) {\n        console.error('Error deleting news:', error)\n        alert('Error al eliminar noticias')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  }\n\n\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setSelectedFile(file)\n      // Create preview URL\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const uploadImage = async (file: File): Promise<string> => {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', 'news')\n\n    try {\n      console.log('Uploading news image:', file.name)\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Error uploading image')\n      }\n\n      const result = await response.json()\n      console.log('News image uploaded successfully:', result.imageUrl)\n      return result.imageUrl\n    } catch (error) {\n      console.error('Error uploading news image:', error)\n      throw error\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent | null, forcedStatus?: string) => {\n    if (e) e.preventDefault()\n\n    try {\n      setIsLoading(true)\n\n      let imageUrl = formData.imageUrl\n\n      // Upload new image if file is selected\n      if (selectedFile) {\n        imageUrl = await uploadImage(selectedFile)\n      }\n\n      // Determine status and publication date\n      let status = forcedStatus\n      let publishedAt: Date = new Date()\n\n      if (forcedStatus === 'draft') {\n        // For drafts, use current time but status will be handled by API\n        status = 'draft'\n        publishedAt = new Date()\n      } else if (forcedStatus === 'publish_now') {\n        // Force immediate publication with current time\n        status = 'published'\n        publishedAt = new Date()\n      } else if (formData.publishedAt) {\n        // Send raw datetime-local string to server - let server handle timezone conversion\n        publishedAt = new Date(formData.publishedAt) // Keep for status determination only\n        const now = new Date()\n        \n        // If we're editing and the original status was 'scheduled', preserve the scheduled date\n        if (editingNews && editingNews.status === 'scheduled' && !forcedStatus) {\n          status = publishedAt <= now ? 'published' : 'scheduled'\n        } else {\n          status = publishedAt <= now ? 'published' : 'scheduled'\n        }\n      } else {\n        // No date provided and not forced as draft, publish immediately\n        status = 'published'\n        publishedAt = new Date()\n      }\n\n      const newsData = {\n        ...formData,\n        imageUrl,\n        publishedAt: publishedAt, // Always use the Date object for type safety\n        status\n      }\n\n      if (editingNews) {\n        await updateNewsItem(editingNews.id, newsData)\n      } else {\n        await createNewsItem(newsData)\n      }\n\n      setShowForm(false)\n      setEditingNews(null)\n      setFormData({ \n        title: '', \n        summary: '', \n        content: '', \n        imageUrl: '', \n        category: '',\n        publishedAt: '',\n        date: new Date().toISOString().split('T')[0],\n        isFeatured: false,\n        featuredRank: null\n      })\n      setSelectedFile(null)\n      setImagePreview('')\n      loadNews()\n    } catch (error) {\n      console.error('Error saving news:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleEdit = async (newsItem: NewsItem) => {\n    setEditingNews(newsItem)\n    // Format the publishedAt date using admin timezone (NO CONVERSION)\n    const formattedDate = await formatForAdminTimezoneInput(new Date(newsItem.publishedAt))\n    \n    setFormData({\n      title: newsItem.title,\n      summary: newsItem.summary,\n      content: newsItem.content,\n      imageUrl: newsItem.imageUrl,\n      category: newsItem.category || '',\n      publishedAt: formattedDate,\n      date: new Date(newsItem.publishedAt).toISOString().split('T')[0],\n      isFeatured: newsItem.isFeatured || false,\n      featuredRank: newsItem.featuredRank ?? null\n    })\n    setSelectedFile(null)\n    setImagePreview(newsItem.imageUrl || '')\n    setShowForm(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar esta noticia?')) {\n      try {\n        setIsLoading(true)\n        await deleteNewsItem(id)\n        loadNews()\n        alert('Noticia eliminada exitosamente')\n      } catch (error) {\n        console.error('Error deleting news:', error)\n        alert('Error al eliminar la noticia')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  }\n\n  const handlePublishNow = async (newsItem: NewsItem) => {\n    if (confirm('¿Estás seguro de que quieres publicar esta noticia ahora?')) {\n      try {\n        setIsLoading(true)\n        \n        // Send minimal payload to avoid overwriting unintended fields\n        const updateData = {\n          status: 'published',\n          publishedAt: new Date()\n        }\n        \n        await updateNewsItem(newsItem.id, updateData)\n        loadNews()\n        alert('Noticia publicada exitosamente')\n      } catch (error) {\n        console.error('Error publishing news:', error)\n        alert('Error al publicar la noticia')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  }\n\n  const handleNewNews = () => {\n    setEditingNews(null)\n    setFormData({ \n          title: '', \n          summary: '', \n          content: '', \n          imageUrl: '', \n          category: '',\n          publishedAt: '',  // Empty by default\n          date: new Date().toISOString().split('T')[0],\n          isFeatured: false,\n          featuredRank: null\n        })\n    setSelectedFile(null)\n    setImagePreview('')\n    setShowForm(true)\n  }\n\n  const handleCancel = () => {\n    setShowForm(false)\n    setEditingNews(null)\n    setFormData({ \n      title: '', \n      summary: '', \n      content: '', \n      imageUrl: '', \n      category: '',\n      publishedAt: '',\n      date: new Date().toISOString().split('T')[0],\n      isFeatured: false,\n      featuredRank: null\n    })\n    setSelectedFile(null)\n    setImagePreview('')\n  }\n\n  // Pagination\n  const totalPages = Math.ceil(filteredNews.length / itemsPerPage)\n  const startIndex = (currentPage - 1) * itemsPerPage\n  const endIndex = startIndex + itemsPerPage\n  const currentNews = filteredNews.slice(startIndex, endIndex)\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page)\n    setSelectedItems([]) // Clear selections when changing pages\n  }\n\n  if (showForm) {\n    return (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-6\">\n          <Button\n            variant=\"outline\"\n            onClick={handleCancel}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Volver\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">\n              {editingNews ? 'Editar Noticia' : 'Nueva Noticia'}\n            </h1>\n            <p className=\"text-gray-600\">\n              Completa la información de la noticia.\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardContent className=\"p-3 sm:p-4 md:p-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-4 sm:space-y-6\">\n              <div className=\"space-y-6\">\n                {/* Basic Information Section */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"title\">Título</Label>\n                    <Input\n                      id=\"title\"\n                      value={formData.title}\n                      onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                      required\n                      className=\"mt-1\"\n                      placeholder=\"Ingresa el título de la noticia\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"category\">Categoría</Label>\n                    <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n                      <SelectTrigger className=\"mt-1 bg-white\">\n                        <SelectValue placeholder=\"Selecciona una categoría\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {categories.map((category) => (\n                          <SelectItem key={category} value={category}>\n                            {category}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"publishedAt\">Fecha y Hora de Publicación</Label>\n                    <Input\n                      id=\"publishedAt\"\n                      type=\"datetime-local\"\n                      value={formData.publishedAt}\n                      onChange={(e) => setFormData({ ...formData, publishedAt: e.target.value })}\n                      className=\"mt-1\"\n                    />\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Deja vacío para guardar como borrador\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"image\">Imagen</Label>\n                    <Input\n                      id=\"image\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileChange}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                {/* Image Preview Section */}\n                {imagePreview && (\n                  <div className=\"w-full\">\n                    <Label>Vista previa de imagen</Label>\n                    <div className=\"mt-2 p-4 border rounded-lg bg-gray-50\">\n                      <img \n                        src={imagePreview} \n                        alt=\"Vista previa\" \n                        className=\"max-w-full h-48 object-cover rounded border mx-auto\"\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {editingNews && !selectedFile && !imagePreview && (\n                  <div className=\"w-full\">\n                    <p className=\"text-sm text-gray-500 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n                      💡 Selecciona una nueva imagen para reemplazar la actual\n                    </p>\n                  </div>\n                )}\n\n                {/* Featured News Section */}\n                <div className=\"border-t pt-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-lg font-semibold flex items-center gap-2\">\n                        <Star className=\"h-5 w-5 text-yellow-500\" />\n                        Noticia Destacada\n                      </Label>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Las noticias destacadas aparecen en posiciones prominentes con mayor visibilidad.\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"isFeatured\" \n                        checked={formData.isFeatured}\n                        onCheckedChange={(checked) => \n                          setFormData({ \n                            ...formData, \n                            isFeatured: checked as boolean,\n                            featuredRank: checked ? formData.featuredRank || 1 : null\n                          })\n                        }\n                      />\n                      <Label htmlFor=\"isFeatured\" className=\"text-sm font-medium\">\n                        Destacar esta noticia\n                      </Label>\n                    </div>\n\n                    {formData.isFeatured && (\n                      <div className=\"ml-6\">\n                        <Label htmlFor=\"featuredRank\" className=\"text-sm\">\n                          Prioridad de visualización\n                        </Label>\n                        <Input\n                          id=\"featuredRank\"\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"999\"\n                          value={formData.featuredRank || ''}\n                          onChange={(e) => setFormData({ \n                            ...formData, \n                            featuredRank: e.target.value ? parseInt(e.target.value) : null \n                          })}\n                          className=\"mt-1 w-32\"\n                          placeholder=\"0\"\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Números menores tienen mayor prioridad (0 = más alta prioridad)\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Content Section */}\n                <div className=\"space-y-8\">\n                  <div className=\"border-t pt-6\">\n                    <div className=\"mb-4\">\n                      <Label htmlFor=\"summary\" className=\"text-lg font-semibold\">Resumen de la Noticia</Label>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Escribe un resumen atractivo que capture la esencia de la noticia. Este será visible en las vistas previas.\n                      </p>\n                    </div>\n                    <div className=\"mt-1\">\n                      <Textarea\n                        id=\"summary\"\n                        value={formData.summary}\n                        onChange={(e) => setFormData({ ...formData, summary: e.target.value })}\n                        placeholder=\"Escribe un resumen conciso y atractivo de la noticia...\"\n                        rows={6}\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-6\">\n                    <div className=\"mb-4\">\n                      <Label htmlFor=\"content\" className=\"text-lg font-semibold\">Contenido Principal</Label>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Desarrolla la noticia completa con todos los detalles. Usa los botones del editor para dar formato y estructura al contenido.\n                      </p>\n                    </div>\n                    <div className=\"mt-1\">\n                      <TinyMCEWrapper\n                        value={formData.content}\n                        onChange={(value) => setFormData({ ...formData, content: value })}\n                        placeholder=\"Desarrolla la noticia completa con todos los detalles importantes...\"\n                        height={500}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row sm:justify-end space-y-3 sm:space-y-0 sm:space-x-4 pt-6\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleCancel} className=\"w-full sm:w-auto min-h-[44px]\">\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => handleSubmit(null, 'draft')}\n                  disabled={isLoading}\n                  className=\"w-full sm:w-auto min-h-[44px]\"\n                >\n                  {isLoading ? 'Guardando...' : 'Guardar como Borrador'}\n                </Button>\n                {editingNews && editingNews.status === 'draft' && (\n                  <Button \n                    type=\"button\" \n                    onClick={() => handleSubmit(null, 'publish_now')}\n                    disabled={isLoading}\n                    className=\"bg-green-600 hover:bg-green-700 text-white w-full sm:w-auto min-h-[44px]\"\n                  >\n                    {isLoading ? 'Publicando...' : 'Publicar Ahora'}\n                  </Button>\n                )}\n                <Button type=\"submit\" disabled={isLoading} className=\"w-full sm:w-auto min-h-[44px]\">\n                  {isLoading ? 'Guardando...' : (editingNews ? 'Actualizar' : 'Publicar')}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 md:mb-6 gap-4\">\n        <div>\n          <h1 className=\"text-xl sm:text-2xl font-bold\">Noticias</h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">Gestiona artículos y noticias del portal</p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n          <Button onClick={handleNewNews} className=\"w-full sm:w-auto min-h-[44px]\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Nueva Noticia\n          </Button>\n          <BulkNewsUpload onComplete={loadNews} />\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-4 md:mb-6\">\n        <CardContent className=\"p-3 sm:p-4 md:p-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Buscar</Label>\n              <Input\n                id=\"search\"\n                placeholder=\"Buscar por título, resumen o categoría...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">Categoría</Label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"mt-1 bg-white\">\n                  <SelectValue placeholder=\"Todas las categorías\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                  <SelectItem value=\"all\">Todas las categorías</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"status\">Estado</Label>\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger className=\"mt-1 bg-white\">\n                  <SelectValue placeholder=\"Todos los estados\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                  <SelectItem value=\"all\">Todos los estados</SelectItem>\n                  <SelectItem value=\"published\">Publicado</SelectItem>\n                  <SelectItem value=\"scheduled\">Programado</SelectItem>\n                  <SelectItem value=\"draft\">Borrador</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm('')\n                  setSelectedCategory('all')\n                  setSelectedStatus('all')\n                }}\n                className=\"mt-1\"\n              >\n                Limpiar filtros\n              </Button>\n            </div>\n          </div>\n\n          {/* Bulk Actions */}\n          {selectedItems.length > 0 && (\n            <div className=\"mt-4 p-4 bg-blue-50 rounded-lg border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium\">\n                    {selectedItems.length} elementos seleccionados\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button size=\"sm\" variant=\"destructive\" onClick={handleBulkDelete}>\n                    <Trash2 className=\"h-4 w-4 mr-1\" />\n                    Eliminar seleccionados\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Noticias</CardTitle>\n          <CardDescription>\n            {filteredNews.length} de {news.length} noticias\n            {searchTerm || selectedCategory !== 'all' || selectedStatus !== 'all' ? ' (filtradas)' : ''}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-4\">Cargando noticias...</div>\n          ) : (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedItems.length === currentNews.length && currentNews.length > 0}\n                        onChange={handleSelectAll}\n                        className=\"rounded\"\n                      />\n                    </TableHead>\n                    <TableHead>Título</TableHead>\n                    <TableHead>Categoría</TableHead>\n                    <TableHead>Estado</TableHead>\n                    <TableHead>Fecha</TableHead>\n                    <TableHead>Vistas</TableHead>\n                    <TableHead>Acciones</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currentNews.map((newsItem) => (\n                    <TableRow key={newsItem.id}>\n                      <TableCell>\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedItems.includes(newsItem.id)}\n                          onChange={() => handleSelectItem(newsItem.id)}\n                          className=\"rounded\"\n                        />\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"max-w-xs\">\n                          <div className=\"truncate\">{newsItem.title}</div>\n                          {newsItem.imageUrl && (\n                            <div className=\"text-xs text-gray-500 mt-1\">📷 Con imagen</div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs\">\n                          {newsItem.category || 'Sin categoría'}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span className={`px-2 py-1 rounded-full text-xs ${\n                          newsItem.status === 'published' ? 'bg-green-100 text-green-800' :\n                          newsItem.status === 'scheduled' ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {newsItem.status === 'published' ? 'Publicado' :\n                           newsItem.status === 'scheduled' ? 'Programado' :\n                           'Borrador'}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div>{new Date(newsItem.publishedAt).toLocaleDateString('es-ES')}</div>\n                          <div className=\"text-gray-500\">{new Date(newsItem.publishedAt).toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm text-gray-500\">-</span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          {newsItem.status === 'draft' && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handlePublishNow(newsItem)}\n                              className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                              title=\"Publicar ahora\"\n                            >\n                              <Send className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(newsItem)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(newsItem.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {currentNews.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                        {filteredNews.length === 0 && news.length === 0\n                          ? 'No hay noticias disponibles. Crea la primera noticia.'\n                          : 'No se encontraron noticias con los filtros aplicados.'\n                        }\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between mt-6\">\n                  <div className=\"text-sm text-gray-500\">\n                    Mostrando {startIndex + 1} a {Math.min(endIndex, filteredNews.length)} de {filteredNews.length} resultados\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handlePageChange(currentPage - 1)}\n                      disabled={currentPage === 1}\n                    >\n                      Anterior\n                    </Button>\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => handlePageChange(page)}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handlePageChange(currentPage + 1)}\n                      disabled={currentPage === totalPages}\n                    >\n                      Siguiente\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":32963},"components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"app/admin/users/page.tsx":{"content":"\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Trash2, Plus, Key } from 'lucide-react'\n\ninterface User {\n  id: number\n  username: string\n  role: string\n  is_active: boolean\n}\n\nexport default function UsersManagementPage() {\n  const [users, setUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [message, setMessage] = useState('')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false)\n  const [selectedUser, setSelectedUser] = useState<string>('')\n\n  // Form states\n  const [newUsername, setNewUsername] = useState('')\n  const [newPassword, setNewPassword] = useState('')\n  const [newRole, setNewRole] = useState('admin')\n  const [updatePassword, setUpdatePassword] = useState('')\n\n  useEffect(() => {\n    fetchUsers()\n  }, [])\n\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch('/api/users')\n      if (response.ok) {\n        const data = await response.json()\n        setUsers(data)\n      } else {\n        setMessage('Error al obtener los usuarios')\n      }\n    } catch (error) {\n      setMessage('Error al obtener los usuarios')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const createUser = async () => {\n    if (!newUsername || !newPassword) {\n      setMessage('El nombre de usuario y la contraseña son obligatorios')\n      return\n    }\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: newUsername,\n          password: newPassword,\n          role: newRole,\n        }),\n      })\n\n      if (response.ok) {\n        setMessage('Usuario creado exitosamente')\n        setNewUsername('')\n        setNewPassword('')\n        setNewRole('admin')\n        setIsCreateDialogOpen(false)\n        fetchUsers()\n      } else {\n        const error = await response.json()\n        setMessage(error.error || 'Error al crear el usuario')\n      }\n    } catch (error) {\n      setMessage('Error al crear el usuario')\n    }\n  }\n\n  const deactivateUser = async (username: string) => {\n    if (!confirm(`¿Estás seguro de que quieres desactivar al usuario: ${username}?`)) {\n      return\n    }\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          action: 'deactivate',\n        }),\n      })\n\n      if (response.ok) {\n        setMessage('Usuario desactivado exitosamente')\n        fetchUsers()\n      } else {\n        const error = await response.json()\n        setMessage(error.error || 'Error al desactivar el usuario')\n      }\n    } catch (error) {\n      setMessage('Error al desactivar el usuario')\n    }\n  }\n\n  const updateUserPassword = async () => {\n    if (!selectedUser || !updatePassword) {\n      setMessage('El usuario y la nueva contraseña son obligatorios')\n      return\n    }\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: selectedUser,\n          newPassword: updatePassword,\n          action: 'updatePassword',\n        }),\n      })\n\n      if (response.ok) {\n        setMessage('Contraseña actualizada exitosamente')\n        setUpdatePassword('')\n        setSelectedUser('')\n        setIsPasswordDialogOpen(false)\n      } else {\n        const error = await response.json()\n        setMessage(error.error || 'Error al actualizar la contraseña')\n      }\n    } catch (error) {\n      setMessage('Error al actualizar la contraseña')\n    }\n  }\n\n  const initializeUsers = async () => {\n    try {\n      const response = await fetch('/api/admin/init-users', {\n        method: 'POST',\n      })\n\n      if (response.ok) {\n        setMessage('Usuarios predeterminados inicializados exitosamente')\n        fetchUsers()\n      } else {\n        const error = await response.json()\n        setMessage(error.error || 'Error al inicializar los usuarios')\n      }\n    } catch (error) {\n      setMessage('Error al inicializar los usuarios')\n    }\n  }\n\n  if (loading) {\n    return <div className=\"p-6\">Cargando usuarios...</div>\n  }\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Gestión de Usuarios</CardTitle>\n          <CardDescription>\n            Administra los usuarios del sistema y sus permisos de acceso\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {message && (\n            <Alert className=\"mb-4\">\n              <AlertDescription>{message}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex gap-2 mb-6\">\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Crear Usuario\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Crear Nuevo Usuario</DialogTitle>\n                  <DialogDescription>\n                    Agregar un nuevo usuario al sistema\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Nombre de Usuario</Label>\n                    <Input\n                      id=\"username\"\n                      value={newUsername}\n                      onChange={(e) => setNewUsername(e.target.value)}\n                      placeholder=\"Ingresa el nombre de usuario\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"password\">Contraseña</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      placeholder=\"Ingresa la contraseña\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"role\">Rol</Label>\n                    <Select value={newRole} onValueChange={setNewRole}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Administrador</SelectItem>\n                        <SelectItem value=\"editor\">Editor</SelectItem>\n                        <SelectItem value=\"viewer\">Visualizador</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button onClick={createUser} className=\"w-full\">\n                    Crear Usuario\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog open={isPasswordDialogOpen} onOpenChange={setIsPasswordDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  Actualizar Contraseña\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Actualizar Contraseña de Usuario</DialogTitle>\n                  <DialogDescription>\n                    Cambiar la contraseña de un usuario\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"userSelect\">Seleccionar Usuario</Label>\n                    <Select value={selectedUser} onValueChange={setSelectedUser}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecciona un usuario\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {users.filter(user => user.is_active).map((user) => (\n                          <SelectItem key={user.id} value={user.username}>\n                            {user.username}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"newPassword\">Nueva Contraseña</Label>\n                    <Input\n                      id=\"newPassword\"\n                      type=\"password\"\n                      value={updatePassword}\n                      onChange={(e) => setUpdatePassword(e.target.value)}\n                      placeholder=\"Ingresa la nueva contraseña\"\n                    />\n                  </div>\n                  <Button onClick={updateUserPassword} className=\"w-full\">\n                    Actualizar Contraseña\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Button variant=\"outline\" onClick={initializeUsers}>\n              Inicializar Usuarios Predeterminados\n            </Button>\n          </div>\n\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ID</TableHead>\n                <TableHead>Usuario</TableHead>\n                <TableHead>Rol</TableHead>\n                <TableHead>Estado</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>{user.id}</TableCell>\n                  <TableCell>{user.username}</TableCell>\n                  <TableCell>\n                    <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n                      {user.role}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span \n                      className={`px-2 py-1 text-xs rounded-full ${\n                        user.is_active \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-red-100 text-red-800'\n                      }`}\n                    >\n                      {user.is_active ? 'Activo' : 'Inactivo'}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    {user.is_active && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => deactivateUser(user.username)}\n                        className=\"text-red-600 hover:text-red-800\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n\n          {users.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No se encontraron usuarios. Haz clic en \"Inicializar Usuarios Predeterminados\" para crear las cuentas de administrador predeterminadas.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":12125},"components/conditional-components.tsx":{"content":"\n\"use client\"\n\nimport { usePathname } from \"next/navigation\"\nimport Navbar from \"@/components/navbar\"\nimport SocialBar from \"@/components/social-bar\"\nimport AccessibilityButton from \"@/components/accessibility-button\"\n\nexport default function ConditionalComponents() {\n  const pathname = usePathname()\n  \n  // Hide navbar, social bar, and accessibility button on transmission pages, admin pages, and login page\n  const isTransmissionPage = pathname?.startsWith('/transmisiones/') && pathname !== '/transmisiones'\n  const isAdminPage = pathname?.startsWith('/admin')\n  const isLoginPage = pathname === '/login'\n  \n  if (isTransmissionPage || isAdminPage || isLoginPage) {\n    return null\n  }\n  \n  return (\n    <>\n      <SocialBar />\n      <AccessibilityButton />\n      <Navbar />\n    </>\n  )\n}\n","size_bytes":793},"components/radio-search.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Search, X } from 'lucide-react'\nimport Link from 'next/link'\nimport { Input } from '@/components/ui/input'\n\ninterface RadioProgram {\n  id: string\n  title: string\n  description: string\n  category: string\n  programLink: string\n}\n\ninterface RadioSearchProps {\n  programs: RadioProgram[]\n  onClose?: () => void\n}\n\nexport default function RadioSearch({ programs, onClose }: RadioSearchProps) {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filteredPrograms, setFilteredPrograms] = useState<RadioProgram[]>([])\n  const [isOpen, setIsOpen] = useState(false)\n\n  useEffect(() => {\n    if (searchTerm.trim() === '') {\n      setFilteredPrograms([])\n      return\n    }\n\n    const filtered = programs.filter(program =>\n      program.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      program.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      program.category.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    setFilteredPrograms(filtered)\n  }, [searchTerm, programs])\n\n  const handleClose = () => {\n    setIsOpen(false)\n    setSearchTerm('')\n    onClose?.()\n  }\n\n  return (\n    <div className=\"relative\">\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"relative\">\n          <Input\n            type=\"text\"\n            placeholder=\"Buscar programas...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            onFocus={() => setIsOpen(true)}\n            className=\"bg-gray-800 text-white text-sm px-3 py-1 rounded-md w-40 md:w-48 focus:outline-none focus:ring-2 focus:ring-purple-500\"\n          />\n          <Search className=\"w-4 h-4 absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n        </div>\n        {isOpen && (\n          <button\n            onClick={handleClose}\n            className=\"text-gray-400 hover:text-white\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        )}\n      </div>\n\n      {isOpen && searchTerm && (\n        <div className=\"absolute top-full left-0 right-0 mt-2 bg-white border rounded-md shadow-lg z-50 max-h-96 overflow-y-auto\">\n          {filteredPrograms.length > 0 ? (\n            <div className=\"py-2\">\n              {filteredPrograms.map((program) => (\n                <Link\n                  key={program.id}\n                  href={program.programLink}\n                  className=\"block px-4 py-2 hover:bg-gray-100 text-gray-900\"\n                  onClick={handleClose}\n                >\n                  <div className=\"font-medium\">{program.title}</div>\n                  <div className=\"text-sm text-gray-600 truncate\">\n                    {program.description}\n                  </div>\n                  <div className=\"text-xs text-purple-600 mt-1\">\n                    {program.category}\n                  </div>\n                </Link>\n              ))}\n            </div>\n          ) : (\n            <div className=\"px-4 py-6 text-center text-gray-500\">\n              No se encontraron programas\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":3147},"components/encuentra-participacion.tsx":{"content":"import LegislatorSearch from \"@/components/legislator-search\"\nimport type { ParliamentaryGroup } from \"@/lib/api\"\nimport Image from 'next/image'\n\ninterface EncuentraParticipacionProps {\n  parliamentaryGroups: any[]\n}\n\nexport default function EncuentraParticipacion({\n  parliamentaryGroups,\n}: EncuentraParticipacionProps) {\n  return (\n    <section\n      className=\"w-full py-12 md:py-16 bg-[#2e004f]\"\n      style={{\n        backgroundImage:\n          \"url('https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-GQcG3uPDtVwAkBDw9QkggoZczNXgwf.png')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n          <div>\n            <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-bold leading-tight text-white uppercase tracking-wide\">\n              ENCUENTRA LA\n              <br />\n              <span className=\"text-[#FFD700] font-extrabold\">PARTICIPACIÓN</span>\n              <br />\n              DE TUS LEGISLADORES:\n            </h2>\n          </div>\n          <div>\n            <LegislatorSearch parliamentaryGroups={parliamentaryGroups} />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n          {parliamentaryGroups.length > 0 ? (\n            parliamentaryGroups.map((group) => (\n              <div key={group.id} className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-2 rounded-full overflow-hidden\">\n                  <Image\n                    src={group.imageUrl || \"/placeholder.svg\"}\n                    alt={group.name}\n                    width={64}\n                    height={64}\n                    className=\"object-cover w-full h-full\"\n                  />\n                </div>\n                <p className=\"text-xs font-medium text-gray-800\">{group.abbreviation}</p>\n              </div>\n            ))\n          ) : null}\n        </div>\n      </div>\n    </section>\n  )\n}","size_bytes":2094},"replit.md":{"content":"# Radio Congreso - Plataforma Digital de Transmisión Legislativa\n\n## Overview\n\nRadio Congreso is a comprehensive digital platform for the Mexican Congress built with Next.js 15, React 19, and PostgreSQL. The application serves as the official broadcasting platform for legislative content, providing live streaming capabilities for congressional sessions, radio programming, news management, and transparency portals.\n\nThe platform features a content management system for administrators to manage news articles, radio programs, live streams, and legislative information. It includes multiple transmission channels (45.1, 45.2, 45.3), live radio streaming with HLS support, and a responsive design optimized for mobile, tablet, and desktop devices.\n\n## Recent Changes (October 2025)\n\n### Transparency Portal Redesign\n- Redesigned all transparency cards using pure CSS/Tailwind (removed PNG dependencies)\n- Implemented unified TransparencyCard component with:\n  - Gradient pill-shaped headers (purple to fuchsia)\n  - Dark indigo/purple gradient body with rounded borders\n  - Shadow and glow effects for visual depth\n  - Optional circular \"+\" button with gradient\n  - Support for both descriptive text and downloadable file lists\n- Applied consistent design across all 7 transparency sections:\n  - Información de Utilidad Pública\n  - Estructura y Presupuesto\n  - Normatividad\n  - Compromisos con la Transparencia\n  - Transparencia Focalizada\n  - Datos Abiertos\n  - Acerca de Nosotros\n- Added comprehensive accessibility features:\n  - ARIA labels for screen readers\n  - Visible focus styles for keyboard navigation\n  - Semantic HTML structure\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Next.js 15 with App Router and React 19\n- **Styling**: Tailwind CSS with shadcn/ui components and Radix UI primitives\n- **State Management**: React Context for floating player and mobile menu state\n- **Authentication**: JWT-based authentication with HTTP-only cookies\n- **File Handling**: Custom file upload system with local storage in `/public/uploads/`\n\n### Backend Architecture\n- **API Routes**: Next.js API routes following RESTful conventions\n- **Database**: PostgreSQL with direct connection pooling\n- **Authentication Middleware**: JWT verification protecting `/admin` routes\n- **File Serving**: Custom file API endpoint for serving uploaded content\n- **Auto-publishing**: Scheduled content publishing system with background jobs\n\n### Content Management System\n- **News Management**: Rich text editor with markdown support, categorization, and scheduled publishing\n- **Radio Programs**: Episode management with audio file uploads and program organization\n- **Live Streams**: Multi-channel streaming configuration with HLS support\n- **User Management**: Role-based access control for administrators and content managers\n\n### Media Streaming\n- **Audio Streaming**: HLS.js for live radio streams with fallback support\n- **Video Streaming**: Multiple channel configuration (45.1, 45.2, 45.3) with live status monitoring\n- **File Storage**: Local file system storage with API-based serving\n\n### Database Schema\nThe PostgreSQL database includes tables for:\n- Users (authentication and roles)\n- News articles with categories and scheduling\n- Radio programs and episodes\n- Live streams and channels\n- Parliamentary groups and legislators\n- Organs and transparency information\n\n### Security Features\n- JWT token authentication with secure cookie storage\n- Password hashing with bcryptjs\n- Input validation and sanitization\n- Rate limiting for API endpoints\n- CORS protection and secure headers\n\n## External Dependencies\n\n### Core Dependencies\n- **Next.js 15**: React framework with App Router\n- **React 19**: UI library with latest features\n- **PostgreSQL**: Primary database with pg driver\n- **TypeScript**: Static typing throughout the application\n\n### UI Components\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **shadcn/ui**: Pre-built component system\n\n### Media Processing\n- **HLS.js**: HTTP Live Streaming for audio/video playback\n- **@uiw/react-md-editor**: Rich text editing capabilities\n\n### Authentication & Security\n- **bcryptjs**: Password hashing\n- **jsonwebtoken**: JWT token generation and verification\n- **nodemailer**: Email functionality for contact forms\n\n### Development Tools\n- **autoprefixer**: CSS vendor prefixing\n- **postcss**: CSS processing\n- **class-variance-authority**: Component variant management\n- **clsx**: Conditional className utility\n\n### Third-party Integrations\n- **Email Service**: Configurable SMTP for contact form submissions\n- **Social Media**: Integration with WhatsApp, Facebook, and Twitter/X\n- **VOD Platform**: Integration with Canal del Congreso VOD service for legislator search\n- **External Transparency Portal**: Links to official transparency website\n\nThe application is designed for deployment on cloud platforms with support for environment-based configuration and automatic scaling capabilities.","size_bytes":5128},"middleware.ts":{"content":"import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { jwtVerify } from 'jose'\n\nconst JWT_SECRET = new TextEncoder().encode(\n  process.env.JWT_SECRET || 'default-secret-key-for-development-only'\n)\n\nexport async function middleware(request: NextRequest) {\n  // Only protect admin routes\n  if (request.nextUrl.pathname.startsWith('/admin')) {\n    const token = request.cookies.get('auth-token')?.value\n\n    if (!token) {\n      return NextResponse.redirect(new URL('/login', request.url))\n    }\n\n    try {\n      // Edge-compatible JWT verification with jose\n      const { payload } = await jwtVerify(token, JWT_SECRET)\n      \n      // Additional security check: ensure the token has required fields\n      if (!payload.username || !payload.role) {\n        throw new Error('Invalid token payload')\n      }\n\n      return NextResponse.next()\n    } catch (error) {\n      // Token is invalid (expired, malformed, or signature doesn't match)\n      return NextResponse.redirect(new URL('/login', request.url))\n    }\n  }\n\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: '/admin/:path*'\n}","size_bytes":1138},"components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1897},"app/noticias/en-vivo/page.tsx":{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\nimport SocialBar from \"@/components/social-bar\"\nimport Footer from \"@/components/footer\"\nimport ChannelBar from \"@/components/channel-bar\"\nimport VideoGrid from \"@/components/video-grid\"\n\n// Fetch video news from database\nasync function getVideoNewsFromDB() {\n  // Skip API calls during build time or when server is not available\n  if (typeof window === 'undefined' && (\n    process.env.NODE_ENV === 'production' || \n    process.env.NEXT_PHASE === 'phase-production-build'\n  )) {\n    console.log('Skipping API call during build time')\n    return []\n  }\n\n  try {\n    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'\n    const response = await fetch(`${baseUrl}/api/video-news/all`, {\n      cache: 'no-store'\n    })\n\n    if (!response.ok) {\n      console.error('Failed to fetch video news:', response.statusText)\n      return []\n    }\n\n    const data = await response.json()\n    return data.map((item: any) => ({\n      id: parseInt(item.id),\n      title: item.title,\n      imageUrl: item.thumbnailUrl || '/placeholder.svg',\n      videoUrl: item.videoUrl || '#',\n    }))\n  } catch (error) {\n    console.error('Error fetching video news:', error)\n    return []\n  }\n}\n\nconst videoItems = await getVideoNewsFromDB()\n\nexport default function EnVivoPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-purple-900 text-white\">\n        <div className=\"container mx-auto px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Image\n              src=\"/placeholder.svg?height=40&width=40&text=CC\"\n              alt=\"Canal del Congreso Logo\"\n              width={40}\n              height={40}\n              className=\"mr-2\"\n            />\n            <span className=\"font-semibold text-lg\">Canal del Congreso</span>\n          </div>\n          <nav className=\"hidden md:flex space-x-6 uppercase text-sm font-medium\">\n            <Link href=\"/\" className=\"hover:text-purple-200\">\n              Inicio\n            </Link>\n            <Link href=\"/programacion\" className=\"hover:text-purple-200\">\n              Programación\n            </Link>\n            <Link href=\"/noticias\" className=\"hover:text-purple-200\">\n              Noticias\n            </Link>\n            <Link href=\"/noticias/en-vivo\" className=\"text-white font-bold border-b-2 border-white\">\n              En Vivo\n            </Link>\n            <Link href=\"/transparencia\" className=\"hover:text-purple-200\">\n              Transparencia\n            </Link>\n            <Link href=\"/contacto\" className=\"hover:text-purple-200\">\n              Contacto\n            </Link>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"flex-grow\">\n        <ChannelBar />\n\n        {/* Video Grid Section */}\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4 relative\">\n            {/* Left Arrow */}\n            <button className=\"absolute left-4 top-1/2 -translate-y-1/2 z-10\" aria-label=\"Previous videos\">\n              <Image src=\"/images/flecha-izq.png\" alt=\"Previous\" width={60} height={60} />\n            </button>\n\n            {/* Right Arrow */}\n            <button className=\"absolute right-4 top-1/2 -translate-y-1/2 z-10\" aria-label=\"Next videos\">\n              <Image src=\"/images/flecha-der.png\" alt=\"Next\" width={60} height={60} />\n            </button>\n\n            <VideoGrid videos={videoItems} />\n\n            {/* Ver más button */}\n            <div className=\"flex flex-col items-center mt-10\">\n              <Link\n                href=\"/videos\"\n                className=\"flex flex-col items-center text-pink-600 hover:text-pink-500 transition-colors\"\n              >\n                <span className=\"text-xl font-bold\">Ver más</span>\n                <div className=\"w-16 h-16 flex items-center justify-center\">\n                  <svg\n                    width=\"40\"\n                    height=\"40\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"text-pink-600\"\n                  >\n                    <path\n                      d=\"M12 15.713L18.01 9.70299L16.597 8.28799L12 12.888L7.40399 8.28799L5.98999 9.70199L12 15.713Z\"\n                      fill=\"currentColor\"\n                    />\n                  </svg>\n                </div>\n              </Link>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <Footer />\n\n      {/* Social Bar */}\n      <SocialBar />\n    </div>\n  )\n}","size_bytes":4664},"app/admin/radio-navigation/page.tsx":{"content":"\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\nimport { Trash2, Plus, GripVertical } from 'lucide-react'\n\ninterface NavigationItem {\n  id: string\n  name: string\n  href: string\n  displayOrder: number\n}\n\nexport default function RadioNavigationAdmin() {\n  const [navigationItems, setNavigationItems] = useState<NavigationItem[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n\n  useEffect(() => {\n    fetchNavigationItems()\n  }, [])\n\n  const fetchNavigationItems = async () => {\n    try {\n      const response = await fetch('/api/radio/navigation')\n      if (response.ok) {\n        const data = await response.json()\n        setNavigationItems(data)\n      }\n    } catch (error) {\n      console.error('Error fetching navigation items:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const saveNavigationItems = async () => {\n    setIsSaving(true)\n    try {\n      const response = await fetch('/api/radio/navigation', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(navigationItems),\n      })\n\n      if (response.ok) {\n        alert('Navigation items saved successfully!')\n      } else {\n        alert('Error saving navigation items')\n      }\n    } catch (error) {\n      console.error('Error saving navigation items:', error)\n      alert('Error saving navigation items')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const addNavigationItem = () => {\n    const newItem: NavigationItem = {\n      id: `nav-${Date.now()}`,\n      name: '',\n      href: '',\n      displayOrder: navigationItems.length\n    }\n    setNavigationItems([...navigationItems, newItem])\n  }\n\n  const updateNavigationItem = (id: string, field: keyof NavigationItem, value: string | number) => {\n    setNavigationItems(items =>\n      items.map(item =>\n        item.id === id ? { ...item, [field]: value } : item\n      )\n    )\n  }\n\n  const removeNavigationItem = (id: string) => {\n    setNavigationItems(items => items.filter(item => item.id !== id))\n  }\n\n  const moveItem = (fromIndex: number, toIndex: number) => {\n    const newItems = [...navigationItems]\n    const [movedItem] = newItems.splice(fromIndex, 1)\n    newItems.splice(toIndex, 0, movedItem)\n    \n    // Update display order\n    newItems.forEach((item, index) => {\n      item.displayOrder = index\n    })\n    \n    setNavigationItems(newItems)\n  }\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading...</div>\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Radio Navigation Management</h1>\n        <p className=\"text-gray-600\">Manage the navigation items that appear in the radio section bar.</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Radio Navigation Items\n            <Button onClick={addNavigationItem} size=\"sm\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Item\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {navigationItems.map((item, index) => (\n              <div key={item.id} className=\"border p-4 rounded-lg\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"cursor-move\">\n                    <GripVertical className=\"w-4 h-4 text-gray-400\" />\n                  </div>\n                  \n                  <div className=\"flex-1 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor={`name-${item.id}`}>Display Name</Label>\n                      <Input\n                        id={`name-${item.id}`}\n                        value={item.name}\n                        onChange={(e) => updateNavigationItem(item.id, 'name', e.target.value)}\n                        placeholder=\"e.g., Toma Tribuna\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor={`href-${item.id}`}>URL Path</Label>\n                      <Input\n                        id={`href-${item.id}`}\n                        value={item.href}\n                        onChange={(e) => updateNavigationItem(item.id, 'href', e.target.value)}\n                        placeholder=\"e.g., /radio/toma-tribuna\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => removeNavigationItem(item.id)}\n                    className=\"text-red-600 hover:text-red-800\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {navigationItems.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No navigation items yet. Click \"Add Item\" to create one.\n            </div>\n          )}\n\n          <div className=\"mt-6 flex gap-2\">\n            <Button onClick={saveNavigationItems} disabled={isSaving}>\n              {isSaving ? 'Saving...' : 'Save Changes'}\n            </Button>\n            <Button variant=\"outline\" onClick={fetchNavigationItems}>\n              Reset Changes\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":5741},"components/bulk-episode-upload.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Upload, X, Plus } from \"lucide-react\"\n\ninterface BulkEpisodeData {\n  publishDate: string\n  title: string\n  description: string\n  file: File | null\n  image: File | null\n  programId: string\n}\n\ninterface BulkEpisodeUploadProps {\n  onComplete: () => void\n}\n\nexport default function BulkEpisodeUpload({ onComplete }: BulkEpisodeUploadProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [episodes, setEpisodes] = useState<BulkEpisodeData[]>([\n    { publishDate: '', title: '', description: '', file: null, image: null, programId: '' }\n  ])\n  const [isUploading, setIsUploading] = useState(false)\n  const [programs, setPrograms] = useState<any[]>([])\n  const { toast } = useToast()\n\n  // Fetch programs when dialog opens\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch('/api/radio/programs')\n      if (response.ok) {\n        const programsData = await response.json()\n        setPrograms(programsData)\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error)\n    }\n  }\n\n  const addEpisode = () => {\n    if (episodes.length < 10) {\n      setEpisodes([...episodes, { publishDate: '', title: '', description: '', file: null, image: null, programId: '' }])\n    }\n  }\n\n  const removeEpisode = (index: number) => {\n    if (episodes.length > 1) {\n      const newEpisodes = episodes.filter((_, i) => i !== index)\n      setEpisodes(newEpisodes)\n    }\n  }\n\n  const updateEpisode = (index: number, field: keyof BulkEpisodeData, value: any) => {\n    const newEpisodes = [...episodes]\n    newEpisodes[index] = { ...newEpisodes[index], [field]: value }\n    setEpisodes(newEpisodes)\n  }\n\n  const handleFileChange = (index: number, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file && file.type.startsWith('audio/')) {\n      updateEpisode(index, 'file', file)\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Por favor selecciona un archivo de audio válido\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleImageChange = (index: number, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file && file.type.startsWith('image/')) {\n      updateEpisode(index, 'image', file)\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Por favor selecciona un archivo de imagen válido\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const uploadFile = async (file: File, type: string): Promise<string> => {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', type)\n\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: formData,\n    })\n\n    if (!response.ok) {\n      throw new Error('Error al subir el archivo')\n    }\n\n    const data = await response.json()\n    return data.url\n  }\n\n  const handleBulkUpload = async () => {\n    // Validate all episodes\n    const validEpisodes = episodes.filter(ep => \n      ep.publishDate && ep.title && ep.file && ep.programId\n    )\n\n    if (validEpisodes.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Debe completar al menos un episodio\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    setIsUploading(true)\n\n    try {\n      const results = []\n\n      for (const episode of validEpisodes) {\n        // Upload audio file\n        const audioUrl = await uploadFile(episode.file!, 'audio')\n\n        // Upload image file if provided\n        let imageUrl = ''\n        if (episode.image) {\n          imageUrl = await uploadFile(episode.image, 'general')\n        }\n\n        // Get program info\n        const selectedProgram = programs.find(p => p.id === episode.programId)\n\n        // Create episode\n        const episodeData = {\n          title: episode.title,\n          description: episode.description || `Episodio de ${selectedProgram?.title || 'Programa'}`,\n          audioUrl: audioUrl,\n          duration: '30MIN', // Default duration\n          publishDate: episode.publishDate,\n          imageUrl: imageUrl || selectedProgram?.imageUrl || '/images/carousel/programas.png',\n          programId: episode.programId\n        }\n\n        const response = await fetch('/api/radio/episodes', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(episodeData),\n        })\n\n        if (response.ok) {\n          results.push(await response.json())\n        } else {\n          throw new Error(`Error al crear episodio: ${episode.title}`)\n        }\n      }\n\n      toast({\n        title: \"Éxito\",\n        description: `Se crearon ${results.length} episodios correctamente`\n      })\n\n      // Reset form\n      setEpisodes([{ publishDate: '', title: '', description: '', file: null, image: null, programId: '' }])\n      setIsOpen(false)\n      onComplete()\n\n    } catch (error) {\n      console.error('Error in bulk upload:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al subir los episodios\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      setIsOpen(open)\n      if (open) {\n        fetchPrograms()\n      }\n    }}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">\n          <Upload className=\"h-4 w-4 mr-2\" />\n          Subida Masiva\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Subida Masiva de Episodios</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {episodes.map((episode, index) => (\n            <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h4 className=\"font-medium\">Episodio {index + 1}</h4>\n                {episodes.length > 1 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeEpisode(index)}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Fecha y Hora de Publicación</Label>\n                  <Input\n                    type=\"datetime-local\"\n                    value={episode.publishDate}\n                    onChange={(e) => updateEpisode(index, 'publishDate', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label>Programa</Label>\n                  <Select\n                    value={episode.programId}\n                    onValueChange={(value) => updateEpisode(index, 'programId', value)}\n                  >\n                    <SelectTrigger className=\"bg-white\">\n                      <SelectValue placeholder=\"Seleccionar programa...\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white\">\n                      {programs.map((program) => (\n                        <SelectItem key={program.id} value={program.id}>\n                          {program.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label>Título</Label>\n                <Input\n                  value={episode.title}\n                  onChange={(e) => updateEpisode(index, 'title', e.target.value)}\n                  placeholder=\"Título del episodio\"\n                />\n              </div>\n\n              <div>\n                <Label>Descripción</Label>\n                <Textarea\n                  value={episode.description}\n                  onChange={(e) => updateEpisode(index, 'description', e.target.value)}\n                  placeholder=\"Descripción del episodio (opcional)\"\n                  rows={3}\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Si no se especifica, se generará automáticamente\n                </p>\n              </div>\n\n              <div>\n                <Label>Archivo MP3</Label>\n                <p className=\"text-xs text-gray-500\">Tamaño máximo: 200MB</p>\n                <Input\n                  type=\"file\"\n                  accept=\"audio/mp3,audio/mpeg\"\n                  onChange={(e) => handleFileChange(index, e)}\n                />\n                {episode.file && (\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    Archivo seleccionado: {episode.file.name}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label>Imagen del Episodio (Opcional)</Label>\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => handleImageChange(index, e)}\n                />\n                {episode.image && (\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    Imagen seleccionada: {episode.image.name}\n                  </p>\n                )}\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Si no se selecciona imagen, se usará la imagen del programa\n                </p>\n              </div>\n            </div>\n          ))}\n\n          <div className=\"flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={addEpisode}\n              disabled={episodes.length >= 10}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Agregar Episodio ({episodes.length}/10)\n            </Button>\n\n            <div className=\"space-x-2\">\n              <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={handleBulkUpload} disabled={isUploading}>\n                {isUploading ? 'Subiendo...' : 'Subir Episodios'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":10745},"app/admin/featured-programs/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Label } from '@/components/ui/label'\nimport { Plus, Edit, Trash2, Upload, Save, Eye } from 'lucide-react'\nimport Image from 'next/image'\n\ninterface FeaturedProgram {\n  id: string\n  title: string\n  description: string\n  schedule: string\n  imageUrl: string\n  isActive: boolean\n  displayOrder: number\n  createdAt: string\n  updatedAt: string\n}\n\nexport default function FeaturedProgramsAdmin() {\n  const [programs, setPrograms] = useState<FeaturedProgram[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [editingProgram, setEditingProgram] = useState<FeaturedProgram | null>(null)\n  const [message, setMessage] = useState('')\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    schedule: '',\n    imageUrl: '',\n    isActive: true,\n    displayOrder: 0\n  })\n\n  useEffect(() => {\n    fetchPrograms()\n  }, [])\n\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch('/api/featured-programs')\n      if (response.ok) {\n        const data = await response.json()\n        setPrograms(data)\n      } else {\n        setMessage('Error al cargar los programas destacados')\n      }\n    } catch (error) {\n      setMessage('Error al cargar los programas destacados')\n      console.error('Error fetching programs:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    try {\n      const url = editingProgram \n        ? `/api/featured-programs/${editingProgram.id}`\n        : '/api/featured-programs'\n      \n      const method = editingProgram ? 'PUT' : 'POST'\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      })\n\n      if (response.ok) {\n        setMessage(editingProgram ? 'Programa actualizado exitosamente' : 'Programa creado exitosamente')\n        setIsDialogOpen(false)\n        resetForm()\n        fetchPrograms()\n      } else {\n        const error = await response.json()\n        setMessage(error.error || 'Error al guardar el programa')\n      }\n    } catch (error) {\n      setMessage('Error al guardar el programa')\n      console.error('Error saving program:', error)\n    }\n  }\n\n  const handleEdit = (program: FeaturedProgram) => {\n    setEditingProgram(program)\n    setFormData({\n      title: program.title,\n      description: program.description,\n      schedule: program.schedule,\n      imageUrl: program.imageUrl,\n      isActive: program.isActive,\n      displayOrder: program.displayOrder\n    })\n    setIsDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('¿Estás seguro de que quieres eliminar este programa destacado?')) {\n      return\n    }\n\n    try {\n      const response = await fetch(`/api/featured-programs/${id}`, {\n        method: 'DELETE'\n      })\n\n      if (response.ok) {\n        setMessage('Programa eliminado exitosamente')\n        fetchPrograms()\n      } else {\n        setMessage('Error al eliminar el programa')\n      }\n    } catch (error) {\n      setMessage('Error al eliminar el programa')\n      console.error('Error deleting program:', error)\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      schedule: '',\n      imageUrl: '',\n      isActive: true,\n      displayOrder: 0\n    })\n    setEditingProgram(null)\n  }\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('folder', 'featured-programs')\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setFormData(prev => ({ ...prev, imageUrl: data.url }))\n        setMessage('Imagen subida exitosamente')\n      } else {\n        setMessage('Error al subir la imagen')\n      }\n    } catch (error) {\n      setMessage('Error al subir la imagen')\n      console.error('Error uploading image:', error)\n    }\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Eye className=\"h-8 w-8 text-purple-600\" />\n          Programas Destacados\n        </h1>\n        <p className=\"text-gray-600 mt-1\">Gestiona los programas que aparecen en la sección destacada de la página de programación</p>\n      </div>\n\n      {message && (\n        <Alert className=\"mb-6\">\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-xl font-semibold\">Lista de Programas Destacados</h2>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Programa\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProgram ? 'Editar Programa Destacado' : 'Nuevo Programa Destacado'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Título del Programa</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Descripción</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={4}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"schedule\">Horario</Label>\n                <Input\n                  id=\"schedule\"\n                  value={formData.schedule}\n                  onChange={(e) => setFormData({ ...formData, schedule: e.target.value })}\n                  placeholder=\"ej: Lunes a Viernes 6:00\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"displayOrder\">Orden de Visualización</Label>\n                <Input\n                  id=\"displayOrder\"\n                  type=\"number\"\n                  value={formData.displayOrder}\n                  onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n                  min=\"0\"\n                  placeholder=\"0\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"image\">Imagen del Programa</Label>\n                <Input\n                  id=\"image\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  className=\"mb-2\"\n                />\n                {formData.imageUrl && (\n                  <div className=\"relative h-32 w-32 border rounded\">\n                    <Image\n                      src={formData.imageUrl}\n                      alt=\"Vista previa\"\n                      fill\n                      className=\"object-cover rounded\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isActive\"\n                  checked={formData.isActive}\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                />\n                <Label htmlFor=\"isActive\">Programa Activo</Label>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button type=\"submit\">\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {editingProgram ? 'Actualizar' : 'Crear'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancelar\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Cargando programas...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Imagen</TableHead>\n                  <TableHead>Título</TableHead>\n                  <TableHead>Descripción</TableHead>\n                  <TableHead>Horario</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Orden</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {programs.map((program) => (\n                  <TableRow key={program.id}>\n                    <TableCell>\n                      {program.imageUrl ? (\n                        <div className=\"relative h-16 w-16\">\n                          <Image\n                            src={program.imageUrl}\n                            alt={program.title}\n                            fill\n                            className=\"object-cover rounded\"\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"h-16 w-16 bg-gray-200 rounded flex items-center justify-center\">\n                          <Upload className=\"h-6 w-6 text-gray-400\" />\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{program.title}</TableCell>\n                    <TableCell className=\"max-w-xs truncate\">{program.description}</TableCell>\n                    <TableCell>{program.schedule}</TableCell>\n                    <TableCell>\n                      <span className={`px-2 py-1 rounded text-xs ${\n                        program.isActive \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-red-100 text-red-800'\n                      }`}>\n                        {program.isActive ? 'Activo' : 'Inactivo'}\n                      </span>\n                    </TableCell>\n                    <TableCell>{program.displayOrder}</TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(program)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(program.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":12382},"components/ui/command.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4899},"app/noticias/[id]/page.tsx":{"content":"import Link from \"next/link\"\nimport Image from \"next/image\"\nimport { getNewsFromDB, getLiveStreamsFromDB } from \"@/lib/api-database\"\nimport { Play } from \"lucide-react\"\n\n// Importa los componentes\nimport Footer from \"@/components/footer\"\nimport TwitterFeed from \"@/components/twitter-feed\"\n\n// Import rich text styles\nimport \"@/styles/rich-text.css\"\n\n// Define the News interface with optional additional image URLs\ninterface News {\n  id: string;\n  title: string;\n  summary?: string;\n  content?: string;\n  imageUrl: string;\n  imageUrl2?: string;\n  imageUrl3?: string;\n  imageUrl4?: string;\n  imageUrl5?: string;\n  category?: string;\n  status?: string;\n  publishedAt?: string;\n  createdAt?: string;\n}\n\nexport default async function NoticiaDetallePage({ params }: { params: Promise<{ id: string }> }) {\n  const { id } = await params\n\n  let news: News[] = []\n  let noticia: News | undefined\n  let liveStreams: any[] = []\n\n  try {\n    const newsData = await getNewsFromDB()\n    news = newsData.news.map(item => ({\n      ...item,\n      publishedAt: item.publishedAt ? item.publishedAt.toISOString() : undefined,\n      createdAt: item.createdAt ? item.createdAt.toISOString() : undefined\n    }))\n\n    // Fetch live streams\n    const streamsData = await getLiveStreamsFromDB()\n    liveStreams = streamsData || []\n\n    console.log(`Looking for news with ID: ${id}`)\n    console.log(`Available news IDs: ${news.map(n => n.id).join(', ')}`)\n\n    noticia = news.find((item) => item.id.toString() === id)\n\n    if (!noticia) {\n      console.log(`News item with ID ${id} not found`)\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n          <div className=\"bg-white p-8 rounded-lg shadow-md max-w-md\">\n            <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Noticia no encontrada</h1>\n            <p className=\"text-gray-600 mb-6\">La noticia que estás buscando no existe o ha sido eliminada.</p>\n            <Link href=\"/noticias\" className=\"bg-purple-900 text-white px-4 py-2 rounded hover:bg-purple-800\">\n              Volver a Noticias\n            </Link>\n          </div>\n        </div>\n      )\n    }\n\n    console.log(`Found news item: ${noticia.title}`)\n  } catch (error) {\n    console.error('Error fetching news for detail page:', error)\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n        <div className=\"bg-white p-8 rounded-lg shadow-md max-w-md\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Error al cargar la noticia</h1>\n          <p className=\"text-gray-600 mb-6\">Hubo un problema al cargar la noticia. Por favor intenta nuevamente.</p>\n          <Link href=\"/noticias\" className=\"bg-purple-900 text-white px-4 py-2 rounded hover:bg-purple-800\">\n            Volver a Noticias\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  // Obtener noticias relacionadas (excluyendo la actual y solo publicadas)\n  const now = new Date();\n  const noticiasRelacionadas = news.filter((item) => {\n    const publishedDate = new Date(item.publishedAt || item.createdAt || new Date());\n    return item.id.toString() !== id && \n           (!item.status || item.status === 'published') && \n           publishedDate <= now;\n  }).sort((a, b) => {\n    // Sort by publishedAt date, most recent first\n    const aDate = new Date(a.publishedAt || a.createdAt || Date.now());\n    const bDate = new Date(b.publishedAt || b.createdAt || Date.now());\n    return bDate.getTime() - aDate.getTime();\n  }).slice(0, 3)\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      {/* Submenú de navegación */}\n      <div className=\"bg-purple-900 border-t border-purple-800\">\n        <div className=\"container mx-auto overflow-x-auto\">\n          <div className=\"flex justify-center space-x-6 py-3 text-sm font-medium text-white\">\n            <Link href=\"/noticias\" className=\"text-white hover:text-purple-200\">\n              Inicio\n            </Link>\n            <Link href=\"/noticias/categorias/foros-y-seminarios\" className=\"text-white hover:text-purple-200\">\n              Foros y seminarios\n            </Link>\n            <Link href=\"/noticias/categorias/reformas-aprobadas\" className=\"text-white hover:text-purple-200\">\n              Reformas aprobadas\n            </Link>\n            <Link href=\"/noticias/categorias/temas-de-actualidad\" className=\"text-white hover:text-purple-200\">\n              Temas de actualidad\n            </Link>\n            <Link href=\"/noticias/categorias/trabajo-en-comisiones\" className=\"text-white hover:text-purple-200\">\n              Trabajo en comisiones\n            </Link>\n            <Link href=\"/noticias/categorias/reformas-en-dof\" className=\"text-white hover:text-purple-200\">\n              Reformas en DOF\n            </Link>\n            <Link href=\"/noticias/categorias/trabajo-en-pleno\" className=\"text-white hover:text-purple-200\">\n              Trabajos en pleno\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"flex-grow bg-gray-100\">\n        {/* Breadcrumbs */}\n        <div className=\"bg-white border-b\">\n          <div className=\"container mx-auto px-4 py-3\">\n            <div className=\"flex items-center text-sm text-gray-500\">\n              <Link href=\"/\" className=\"hover:text-purple-900\">\n                Inicio\n              </Link>\n              <span className=\"mx-2\">/</span>\n              <Link href=\"/noticias\" className=\"hover:text-purple-900\">\n                Noticias\n              </Link>\n              <span className=\"mx-2\">/</span>\n              <span className=\"text-gray-700 truncate max-w-xs\">{noticia.title}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Article Content */}\n            <article className=\"lg:col-span-2 bg-white rounded-lg shadow-md overflow-hidden\">\n              <div \n                className=\"relative h-96 w-full rounded-lg overflow-hidden flex items-center justify-center p-4\"\n                style={{\n                  backgroundImage: \"url(/images/purple-pattern-bg.png)\",\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundColor: \"#7c3aed\"\n                }}\n              >\n                <Image\n                  src={noticia.imageUrl || \"/placeholder.svg?height=400&width=800&text=Sin+Imagen\"}\n                  alt={noticia.title}\n                  width={600}\n                  height={400}\n                  className=\"object-contain rounded-[2rem] shadow-lg\"\n                  style={{\n                    maxHeight: \"calc(100% - 2rem)\",\n                    maxWidth: \"calc(100% - 2rem)\",\n                    borderRadius: \"44px\"\n                  }}\n                  unoptimized={true}\n                  priority\n                />\n                <div className=\"absolute bottom-0 left-0 bg-purple-900 text-white px-3 py-1 text-xs\">\n                  {new Date(noticia.publishedAt || noticia.createdAt || Date.now()).toLocaleDateString(\"es-MX\", {\n                    day: \"numeric\",\n                    month: \"long\",\n                    year: \"numeric\",\n                  })}\n                </div>\n              </div>\n\n              <div className=\"p-6 md:p-8\">\n                <h1 className=\"text-3xl font-bold mb-4\">{noticia.title}</h1>\n                <div className=\"flex items-center text-sm text-gray-500 mb-6\">\n                  <span className=\"bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs\">\n                    {noticia.title.includes(\"Senado\")\n                      ? \"Senado de la República\"\n                      : noticia.title.includes(\"Cámara\")\n                        ? \"Cámara de Diputados\"\n                        : noticia.title.includes(\"México\")\n                          ? \"México, Estados Unidos\"\n                          : \"Noticias Generales\"}\n                  </span>\n                </div>\n\n                <div className=\"prose prose-lg max-w-none\">\n                  <div \n                    className=\"rich-text-content text-lg text-gray-700 mb-6\"\n                    dangerouslySetInnerHTML={{ \n                      __html: (noticia.summary || \"\").replace(\n                        /!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, \n                        '<img src=\"$2\" alt=\"$1\" class=\"rounded-lg shadow-md max-w-full h-auto my-4\" />'\n                      )\n                    }}\n                  />\n                  <div className=\"rich-text-content text-gray-700 leading-relaxed\">\n\n                    {noticia.content ? (\n                      <div \n                        className=\"rich-text-content public-view prose prose-lg max-w-none\"\n                        dangerouslySetInnerHTML={{ \n                          __html: noticia.content.includes('two-column-layout') \n                            ? noticia.content.replace(/class=\"([^\"]*?)two-column-layout([^\"]*?)\"/g, 'class=\"$1two-column-layout$2\"')\n                            : noticia.content \n                        }}\n                      />\n                    ) : (\n                      <>\n                        <p>\n                          El día de hoy, en el marco de las actividades legislativas, se llevó a cabo un importante\n                          evento relacionado con {noticia.title.toLowerCase()}. Esta iniciativa representa un avance\n                          significativo en la agenda legislativa del país.\n                        </p>\n                        <p>\n                          Durante la sesión, diversos legisladores expresaron sus puntos de vista sobre la importancia\n                          de esta medida y su impacto en la sociedad mexicana. Se destacó la necesidad de continuar\n                          trabajando en un marco legal que responda a las necesidades actuales de la ciudadanía.\n                        </p>\n                        <p>\n                          El presidente de la comisión encargada del tema señaló que \"este es un paso importante para\n                          fortalecer nuestras instituciones y garantizar el bienestar de todos los mexicanos\". Asimismo,\n                          se anunció que en las próximas semanas se continuará con el análisis y discusión de propuestas\n                          relacionadas.\n                        </p>\n                        <p>\n                          Esta noticia se suma a una serie de acciones que el Congreso ha implementado en los últimos\n                          meses, reafirmando su compromiso con la transparencia y el fortalecimiento democrático del\n                          país.\n                        </p>\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                {/* Additional Images Gallery */}\n                {(noticia.imageUrl2 || noticia.imageUrl3 || noticia.imageUrl4 || noticia.imageUrl5) && (\n                  <div className=\"mt-8\">\n                    <h3 className=\"text-xl font-bold mb-4\">Galería de imágenes</h3>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      {noticia.imageUrl2 && (\n                        <div className=\"relative aspect-square\">\n                          <Image\n                            src={noticia.imageUrl2}\n                            alt={`${noticia.title} - Imagen 2`}\n                            fill\n                            className=\"object-cover rounded-lg\"\n                          />\n                        </div>\n                      )}\n                      {noticia.imageUrl3 && (\n                        <div className=\"relative aspect-square\">\n                          <Image\n                            src={noticia.imageUrl3}\n                            alt={`${noticia.title} - Imagen 3`}\n                            fill\n                            className=\"object-cover rounded-lg\"\n                          />\n                        </div>\n                      )}\n                      {noticia.imageUrl4 && (\n                        <div className=\"relative aspect-square\">\n                          <Image\n                            src={noticia.imageUrl4}\n                            alt={`${noticia.title} - Imagen 4`}\n                            fill\n                            className=\"object-cover rounded-lg\"\n                          />\n                        </div>\n                      )}\n                      {noticia.imageUrl5 && (\n                        <div className=\"relative aspect-square\">\n                          <Image\n                            src={noticia.imageUrl5}\n                            alt={`${noticia.title} - Imagen 5`}\n                            fill\n                            className=\"object-cover rounded-lg\"\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Share Buttons */}\n                <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-sm font-medium text-gray-700 mr-4\">Compartir:</span>\n                    <div className=\"flex space-x-2\">\n                      <Link\n                        href=\"https://x.com/NoticiaCongreso\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"p-2 bg-gray-800 text-white rounded-full hover:bg-black transition-colors\"\n                        aria-label=\"Compartir en X\"\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"/>\n                        </svg>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </article>\n\n            {/* Sidebar */}\n            <div className=\"space-y-8\">\n              {/* Noticias Relacionadas */}\n              <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                <h2 className=\"bg-purple-900 text-white px-4 py-2 font-bold uppercase text-sm\">\n                  Noticias Relacionadas\n                </h2>\n                <div className=\"p-4 space-y-4\">\n                  {noticiasRelacionadas.map((item) => (\n                    <div key={item.id} className=\"flex space-x-3\">\n                      <div className=\"relative w-20 h-20 flex-shrink-0\">\n                        <Image\n                          src={item.imageUrl || \"/placeholder.svg?height=80&width=80\"}\n                          alt={item.title}\n                          fill\n                          className=\"object-cover rounded\"\n                        />\n                      </div>\n                      <div>\n                        <h3 className=\"text-sm font-medium line-clamp-2\">{item.title}</h3>\n                        <Link\n                          href={`/noticias/${item.id}`}\n                          className=\"text-purple-900 text-xs font-medium hover:underline\"\n                        >\n                          Leer más →\n                        </Link>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  )\n}","size_bytes":15773},"app/radio/legisladores/[id]/page.tsx":{"content":"import Link from \"next/link\"\nimport Image from \"next/image\"\nimport { getLegislatorById, getParliamentaryGroupById } from \"@/lib/api\"\nimport Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\n\nexport default async function LegislatorDetailPage({ params }: { params: Promise<{ id: string }> }) {\n  const { id } = await params\n  const legislator = await getLegislatorById(id)\n\n  if (!legislator) {\n    return (\n      <div className=\"flex flex-col min-h-screen\">\n        <Navbar />\n        <main className=\"flex-grow bg-gray-100 flex items-center justify-center\">\n          <div className=\"bg-white p-8 rounded-lg shadow-md text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">Legislador no encontrado</h1>\n            <Link href=\"/radio/legisladores\" className=\"text-[#3b0764] hover:underline\">\n              Volver al listado de legisladores\n            </Link>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    )\n  }\n\n  const parliamentaryGroup = await getParliamentaryGroupById(legislator.parliamentaryGroupId)\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Navbar />\n\n      <main className=\"flex-grow bg-gray-100\">\n        <div className=\"container mx-auto py-8 px-4\">\n          <div className=\"mb-6\">\n            <Link href=\"/radio/legisladores\" className=\"text-[#3b0764] hover:underline mb-4 inline-block\">\n              ← Volver al listado de legisladores\n            </Link>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n            <div className=\"md:flex\">\n              <div className=\"md:w-1/3 p-6 flex justify-center\">\n                <div className=\"relative w-48 h-48 rounded-full overflow-hidden\">\n                  <Image\n                    src={legislator.imageUrl || \"/placeholder.svg?height=192&width=192&text=Legislador\"}\n                    alt={legislator.name}\n                    fill\n                    className=\"object-cover\"\n                  />\n                </div>\n              </div>\n              <div className=\"md:w-2/3 p-6\">\n                <h1 className=\"text-3xl font-bold text-[#3b0764] mb-2\">{legislator.name}</h1>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-600\">Grupo Parlamentario</h3>\n                    <p>{parliamentaryGroup?.name || \"No disponible\"}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-600\">Legislatura</h3>\n                    <p>{legislator.legislature || \"No disponible\"}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-600\">Estado</h3>\n                    <p>{legislator.state || \"No disponible\"}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-600\">Tipo</h3>\n                    <p>{legislator.type || \"No disponible\"}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-600\">Género</h3>\n                    <p>{legislator.gender === \"M\" ? \"Masculino\" : \"Femenino\"}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-600\">Estado</h3>\n                    <p>{legislator.status}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-8\">\n            <h2 className=\"text-2xl font-bold text-[#3b0764] mb-4\">Participaciones</h2>\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\n              <p className=\"text-gray-600 text-center py-8\">No hay participaciones registradas para este legislador.</p>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}\n","size_bytes":3915},"components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"app/api/admin/init-radio/route.ts":{"content":"import { NextResponse } from 'next/server'\n\nexport async function POST() {\n  try {\n    // Import database pool dynamically\n    const { pool } = await import('@/lib/database')\n\n    // Check if pool is available\n    if (!pool) {\n      return NextResponse.json(\n        { error: 'Database connection not available. Please configure database connection first.' },\n        { status: 500 }\n      )\n    }\n\n    // Create radio_programs table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_programs (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        latest_episode_title VARCHAR(255),\n        latest_episode_date VARCHAR(100),\n        latest_episode_duration VARCHAR(50),\n        latest_episode_description TEXT,\n        program_link TEXT,\n        episodes_link TEXT,\n        category VARCHAR(100) DEFAULT 'General',\n        published BOOLEAN DEFAULT true,\n        display_order INTEGER DEFAULT 0,\n        featured BOOLEAN DEFAULT false,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `)\n\n    // Create radio_categories table  \n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_categories (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        name VARCHAR(255) NOT NULL UNIQUE,\n        slug VARCHAR(255) NOT NULL UNIQUE,\n        description TEXT,\n        image_url TEXT,\n        display_order INTEGER DEFAULT 0,\n        active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `)\n\n    // Create radio_episodes table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_episodes (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        category VARCHAR(100) NOT NULL,\n        audio_url TEXT NOT NULL,\n        duration VARCHAR(50),\n        publish_date DATE,\n        image_url TEXT,\n        program_id UUID REFERENCES radio_programs(id) ON DELETE SET NULL,\n        published BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `)\n\n    // Insert default categories\n    await pool.query(`\n      INSERT INTO radio_categories (name, slug, description, image_url, display_order) VALUES\n      ('Programas', 'programas', 'Todos los programas de Radio Congreso', '/images/carousel/programas.png', 1),\n      ('Sitio Abierto', 'sitio-abierto', 'Programa de debate político con Javier Solórzano', '/images/carousel/sitio-abierto.png', 2),\n      ('Entrevistas', 'entrevistas', 'Entrevistas exclusivas con legisladores', '/images/carousel/entrevistas.png', 3),\n      ('Noticias Congreso', 'noticias-congreso', 'Noticias del Congreso de la Unión', '/images/carousel/noticias.png', 4)\n      ON CONFLICT (name) DO NOTHING\n    `)\n\n    // Create indexes for better performance\n    await pool.query(`\n      CREATE INDEX IF NOT EXISTS idx_radio_programs_category ON radio_programs(category);\n      CREATE INDEX IF NOT EXISTS idx_radio_programs_published ON radio_programs(published);\n      CREATE INDEX IF NOT EXISTS idx_radio_episodes_category ON radio_episodes(category);\n      CREATE INDEX IF NOT EXISTS idx_radio_episodes_published ON radio_episodes(published);\n      CREATE INDEX IF NOT EXISTS idx_radio_episodes_publish_date ON radio_episodes(publish_date);\n    `)\n\n    // Insert sample programs\n    await pool.query(`\n      INSERT INTO radio_programs (\n        title, description, image_url, latest_episode_title, \n        latest_episode_date, latest_episode_duration, latest_episode_description,\n        program_link, episodes_link, category, display_order\n      ) VALUES \n      (\n        'SITIO ABIERTO',\n        'Programa de debate político con Javier Solórzano',\n        'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/01%20Imagen%20SA-zwZUP6ym2k7eEcC5VtKXiHO55JCA44.png',\n        'PAQUETE DE REFORMAS DE LA PRESIDENTA PARA ATENDER EL PROBLEMA DE DESAPARICIONES',\n        'martes, 25 de marzo de 2025',\n        '60MIN',\n        'Hoy en #SitioAbierto con Javier Solórzano, contamos la participación de la Senadora Margarita Valdez Martínez de MORENA, el Diputado Ricardo Mejía Berdeja del PT y de la Diputada Ana Isabel González González del PRI para hablar de: PAQUETE DE REFORMAS DE LA PRESIDENTA PARA ATENDER EL PROBLEMA DE DESAPARICIONES.',\n        '/radio/sitio-abierto',\n        '/radio/sitio-abierto/episodios',\n        'Sitio Abierto',\n        1\n      ),\n      (\n        'APUNTES PARLAMENTARIOS',\n        'Análisis parlamentario y legislativo',\n        'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/01%20Imagen%20AP-htppQHmOt7rgJN5E4KsVlXhUVfrDGN.png',\n        'Declaratoria de emergencia nacional en la frontera sur',\n        'miércoles, 22 de enero de 2025',\n        '35MIN',\n        'Noticias del Congreso #Radio La diputada Graciela Ortiz nos habló de la declaratoria de emergencia nacional en la frontera sur de Estados Unidos hecha por el presidente Donald Trump y platicamos del llamado del Congreso de la Unión a la unidad nacional ante las medidas anunciadas contra México',\n        '/radio/apuntes-parlamentarios',\n        '/radio/apuntes-parlamentarios/episodios',\n        'Programas',\n        2\n      )\n      ON CONFLICT DO NOTHING\n    `)\n\n    console.log('Radio database tables created successfully')\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Radio database tables created successfully' \n    })\n  } catch (error) {\n    console.error('Error initializing radio database:', error)\n    return NextResponse.json(\n      { error: 'Failed to initialize radio database' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":5773},"components/mobile-menu-context.tsx":{"content":"\"use client\"\n\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\n\ntype MobileMenuContextType = {\n  isMenuOpen: boolean\n  toggleMenu: () => void\n  closeMenu: () => void\n}\n\nconst MobileMenuContext = createContext<MobileMenuContextType | undefined>(undefined)\n\nexport function MobileMenuProvider({ children }: { children: ReactNode }) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n  const toggleMenu = () => {\n    setIsMenuOpen(prev => !prev)\n  }\n\n  const closeMenu = () => {\n    setIsMenuOpen(false)\n  }\n\n  // Prevent body scroll when menu is open\n  useEffect(() => {\n    if (isMenuOpen) {\n      // Apply immediately without delay\n      document.body.style.overflow = 'hidden'\n      document.body.style.position = 'fixed'\n      document.body.style.width = '100%'\n      document.body.classList.add(\"menu-open\")\n    } else {\n      // Small delay when closing to prevent flickering\n      const timeoutId = setTimeout(() => {\n        document.body.style.overflow = ''\n        document.body.style.position = ''\n        document.body.style.width = ''\n        document.body.classList.remove(\"menu-open\")\n      }, 50)\n      \n      return () => clearTimeout(timeoutId)\n    }\n\n    return () => {\n      document.body.style.overflow = ''\n      document.body.style.position = ''\n      document.body.style.width = ''\n      document.body.classList.remove(\"menu-open\")\n    }\n  }, [isMenuOpen])\n\n  return (\n    <MobileMenuContext.Provider value={{ isMenuOpen, toggleMenu, closeMenu }}>{children}</MobileMenuContext.Provider>\n  )\n}\n\nexport function useMobileMenu() {\n  const context = useContext(MobileMenuContext)\n  if (context === undefined) {\n    console.warn(\"useMobileMenu used outside MobileMenuProvider, returning default values\")\n    return { isMenuOpen: false, toggleMenu: () => {}, closeMenu: () => {} }\n  }\n  return context\n}","size_bytes":1863},"components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"app/admin/sitemap/page.tsx":{"content":"\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Separator } from '@/components/ui/separator'\nimport { RefreshCw, ExternalLink, CheckCircle, AlertCircle } from 'lucide-react'\nimport { useToast } from '@/components/ui/use-toast'\n\nexport default function SitemapManagementPage() {\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [lastGenerated, setLastGenerated] = useState<string | null>(null)\n  const [sitemapStats, setSitemapStats] = useState({\n    totalUrls: 0,\n    staticPages: 0,\n    newsArticles: 0,\n    radioPrograms: 0,\n    legislators: 0\n  })\n  const { toast } = useToast()\n\n  const generateSitemap = async () => {\n    setIsGenerating(true)\n    try {\n      const response = await fetch('/sitemap.xml')\n      if (response.ok) {\n        setLastGenerated(new Date().toISOString())\n        await fetchSitemapStats()\n        toast({\n          title: 'Sitemap generado exitosamente',\n          description: 'El sitemap se ha actualizado con el contenido más reciente.',\n        })\n      } else {\n        throw new Error('Error al generar sitemap')\n      }\n    } catch (error) {\n      console.error('Error generating sitemap:', error)\n      toast({\n        title: 'Error al generar sitemap',\n        description: 'No se pudo generar el sitemap. Intente nuevamente.',\n        variant: 'destructive',\n      })\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  const fetchSitemapStats = async () => {\n    try {\n      // Get counts from different APIs\n      const [newsRes, programsRes, legislatorsRes] = await Promise.all([\n        fetch('/api/news/all'),\n        fetch('/api/radio/programs'),\n        fetch('/api/legislators')\n      ])\n\n      const news = newsRes.ok ? await newsRes.json() : []\n      const programs = programsRes.ok ? await programsRes.json() : []\n      const legislators = legislatorsRes.ok ? await legislatorsRes.json() : []\n\n      const staticPages = 15 // Approximate count of static pages\n      const totalUrls = staticPages + news.length + programs.length + legislators.length\n\n      setSitemapStats({\n        totalUrls,\n        staticPages,\n        newsArticles: news.length,\n        radioPrograms: programs.length,\n        legislators: legislators.length\n      })\n    } catch (error) {\n      console.error('Error fetching sitemap stats:', error)\n    }\n  }\n\n  useEffect(() => {\n    fetchSitemapStats()\n  }, [])\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestión de Sitemap</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Administra el sitemap XML para mejorar el SEO de la plataforma\n          </p>\n        </div>\n        <Button \n          onClick={generateSitemap}\n          disabled={isGenerating}\n          className=\"flex items-center gap-2\"\n        >\n          <RefreshCw className={`h-4 w-4 ${isGenerating ? 'animate-spin' : ''}`} />\n          {isGenerating ? 'Generando...' : 'Regenerar Sitemap'}\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Sitemap Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              Estado del Sitemap\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Estado:</span>\n                <Badge variant=\"outline\" className=\"text-green-600\">\n                  Activo\n                </Badge>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Total URLs:</span>\n                <span className=\"font-semibold\">{sitemapStats.totalUrls}</span>\n              </div>\n              {lastGenerated && (\n                <div className=\"flex justify-between\">\n                  <span>Última actualización:</span>\n                  <span className=\"text-sm text-gray-500\">\n                    {new Date(lastGenerated).toLocaleString('es-MX')}\n                  </span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Content Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Estadísticas de Contenido</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span>Páginas estáticas:</span>\n                <span className=\"font-semibold\">{sitemapStats.staticPages}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Artículos de noticias:</span>\n                <span className=\"font-semibold\">{sitemapStats.newsArticles}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Programas de radio:</span>\n                <span className=\"font-semibold\">{sitemapStats.radioPrograms}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Legisladores:</span>\n                <span className=\"font-semibold\">{sitemapStats.legislators}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* SEO Tools */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Herramientas SEO</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\"\n                onClick={() => window.open('/sitemap.xml', '_blank')}\n              >\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Ver Sitemap XML\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\"\n                onClick={() => window.open('/robots.txt', '_blank')}\n              >\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Ver Robots.txt\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\"\n                onClick={() => window.open('https://search.google.com/search-console', '_blank')}\n              >\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Google Search Console\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Instructions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Instrucciones de Configuración</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-semibold mb-2\">1. Google Search Console</h4>\n            <p className=\"text-sm text-gray-600\">\n              Registra tu sitio en Google Search Console y envía el sitemap usando la URL: \n              <code className=\"bg-gray-100 px-2 py-1 rounded mx-1\">\n                {process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/sitemap.xml\n              </code>\n            </p>\n          </div>\n          <Separator />\n          <div>\n            <h4 className=\"font-semibold mb-2\">2. Bing Webmaster Tools</h4>\n            <p className=\"text-sm text-gray-600\">\n              También puedes registrar tu sitio en Bing Webmaster Tools para mejorar la indexación en Bing.\n            </p>\n          </div>\n          <Separator />\n          <div>\n            <h4 className=\"font-semibold mb-2\">3. Actualización Automática</h4>\n            <p className=\"text-sm text-gray-600\">\n              El sitemap se actualiza automáticamente cada vez que se accede. Para forzar una actualización, \n              usa el botón \"Regenerar Sitemap\" arriba.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":8160},"app/api/test-db/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getLiveStreamsFromDB, getProgramsFromDB, getNewsFromDB } from '@/lib/api-database'\nimport type { LiveStream, Program, NewsItem } from '@/lib/api'\n\nexport async function GET() {\n  try {\n    // Test basic database operations\n    const liveStreams: LiveStream[] = await getLiveStreamsFromDB()\n    const programs: Program[] = await getProgramsFromDB()\n    const news: {news: NewsItem[], total: number, totalPages: number} = await getNewsFromDB()\n    \n    return NextResponse.json({ \n      success: true, \n      message: 'Database connected successfully',\n      data: {\n        liveStreamsCount: liveStreams.length,\n        programsCount: programs.length,\n        newsCount: news.news.length\n      }\n    })\n  } catch (error) {\n    console.error('Database test failed:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Database connection failed',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1051},"app/api/radio/episodes/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\n\n// No mock data - using database only\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const programId = searchParams.get('programId')\n    const program = searchParams.get('program')\n\n    const { getRadioEpisodes, getRadioPrograms } = await import('@/lib/api')\n\n    // If we have a programId, use it directly (but check it's not undefined)\n    if (programId && programId !== 'undefined' && programId !== 'null') {\n      console.log('Fetching episodes for programId:', programId)\n      \n      // Directly fetch episodes without program verification for now\n      const episodes = await getRadioEpisodes(programId)\n      console.log('Episodes found:', episodes?.length || 0)\n      \n      // Map episodes with proper field names\n      const mappedEpisodes = (episodes || []).map((episode: any) => ({\n        id: episode.id,\n        title: episode.title,\n        description: episode.description,\n        audio_url: episode.audioUrl || episode.audio_url,\n        published_date: episode.publishDate || episode.published_date || episode.publish_date,\n        duration: episode.duration,\n        image_url: episode.imageUrl || episode.image_url,\n        program_id: episode.programId || episode.program_id,\n        programImageUrl: episode.programImageUrl\n      }))\n      \n      return NextResponse.json(mappedEpisodes)\n    }\n\n    // If we have a program name, we need to find the program ID first\n    if (program) {\n      const programs = await getRadioPrograms()\n      const matchingProgram = programs.find((p: any) => p.title === program)\n\n      if (matchingProgram) {\n        const episodes = await getRadioEpisodes(matchingProgram.id)\n        return NextResponse.json(episodes || [])\n      }\n    }\n\n    // Return all episodes if no filter\n    const episodes = await getRadioEpisodes()\n    return NextResponse.json(episodes || [])\n  } catch (error) {\n    console.error('Error fetching radio episodes:', error)\n    return NextResponse.json({ error: 'Failed to fetch episodes' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n\n    const { createRadioEpisode } = await import('@/lib/api')\n    const newEpisode = await createRadioEpisode(data)\n\n    return NextResponse.json(newEpisode, { status: 201 })\n  } catch (error) {\n    console.error('Error creating radio episode:', error)\n    return NextResponse.json({ error: 'Failed to create radio episode' }, { status: 500 })\n  }\n}","size_bytes":2567},"app/admin/live-streams/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Plus, Edit, Trash2 } from \"lucide-react\"\nimport { getLiveStreams, createLiveStream, updateLiveStream, deleteLiveStream, type LiveStream } from \"@/lib/api\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\"\nimport Image from 'next/image'\n\n// Function to get the channel logo based on the channel name\nconst getChannelLogo = (channel: string) => {\n  switch (channel) {\n    case 'C+':\n      return '/images/channel-c-logo.png'\n    case 'D+':\n      return '/images/channel-d-logo.png'\n    case 'S+':\n      return '/images/channel-g-logo.png'\n    case 'ST+':\n      return '/images/channel-st-logo.png'\n    default:\n      return '/images/placeholder-logo.png' // Or a default logo\n  }\n}\n\nexport default function LiveStreamsAdmin() {\n  const [streams, setStreams] = useState<LiveStream[]>([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [editingStream, setEditingStream] = useState<LiveStream | null>(null)\n  const [formData, setFormData] = useState({\n    title: '',\n    thumbnailUrl: '',\n    streamUrl: '',\n    channel: '',\n    isLive: false,\n    status: 'offline'\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [isUploading, setIsUploading] = useState(false)\n\n  useEffect(() => {\n    loadStreams()\n  }, [])\n\n  const loadStreams = async () => {\n    try {\n      // Call the API endpoint directly instead of using getLiveStreams\n      const response = await fetch('/api/live-streams')\n      if (!response.ok) {\n        throw new Error('Failed to fetch streams')\n      }\n      const data = await response.json()\n      console.log('Loaded streams in admin:', data)\n      console.log('Stream statuses:', data.map((s: LiveStream) => ({ id: s.id, title: s.title, status: s.status, isLive: s.isLive })))\n      setStreams(data)\n    } catch (error) {\n      console.error('Error loading streams in admin:', error)\n      setStreams([])\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({ title: '', thumbnailUrl: '', streamUrl: '', channel: '', isLive: false, status: 'offline' })\n    setEditingStream(null)\n    setSelectedFile(null)\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setSelectedFile(file)\n      // Create preview URL\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setFormData(prev => ({ ...prev, thumbnailUrl: reader.result as string }))\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const uploadImage = async (file: File): Promise<string> => {\n    const uploadFormData = new FormData()\n    uploadFormData.append('file', file)\n    uploadFormData.append('type', 'transmisiones')\n\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: uploadFormData,\n    })\n\n    if (!response.ok) {\n      throw new Error('Error uploading image')\n    }\n\n    const result = await response.json()\n    return result.imageUrl\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsUploading(true)\n\n    try {\n      let thumbnailUrl = formData.thumbnailUrl\n\n      // If a file is selected, upload it first\n      if (selectedFile) {\n        thumbnailUrl = await uploadImage(selectedFile)\n      }\n\n      const submitData = {\n        ...formData,\n        thumbnailUrl\n      }\n\n      console.log('Saving stream data:', submitData)\n\n      if (editingStream) {\n        console.log('Updating stream with ID:', editingStream.id)\n        const result = await updateLiveStream(editingStream.id, submitData)\n        console.log('Update result:', result)\n        \n        toast({\n          title: \"Éxito\",\n          description: \"Transmisión actualizada correctamente\"\n        })\n      } else {\n        console.log('Creating new stream')\n        const result = await createLiveStream(submitData)\n        console.log('Create result:', result)\n        \n        toast({\n          title: \"Éxito\", \n          description: \"Transmisión creada correctamente\"\n        })\n      }\n\n      // Reload the streams to reflect changes\n      await loadStreams()\n      setIsDialogOpen(false)\n      resetForm()\n    } catch (error) {\n      console.error('Error saving stream:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      toast({\n        title: \"Error\",\n        description: `Error al guardar la transmisión: ${errorMessage}`,\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const handleEdit = (stream: LiveStream) => {\n    setEditingStream(stream)\n    setFormData({\n      title: stream.title,\n      thumbnailUrl: stream.thumbnailUrl,\n      streamUrl: stream.streamUrl,\n      channel: stream.channel || '',\n      isLive: stream.isLive,\n      status: stream.status || 'offline'\n    })\n    setIsDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar esta transmisión?')) {\n      await deleteLiveStream(id)\n      loadStreams()\n    }\n  }\n\n  const handleQuickStatusUpdate = async (streamId: string, newStatus: string) => {\n    try {\n      console.log(`Updating stream ${streamId} status to ${newStatus}`)\n      \n      const updateData = {\n        status: newStatus,\n        isLive: newStatus === 'live'\n      }\n\n      await updateLiveStream(streamId, updateData)\n      \n      toast({\n        title: \"Éxito\",\n        description: `Estado actualizado a ${newStatus === 'live' ? 'EN VIVO' : newStatus === 'signal_open' ? 'SEÑAL ABIERTA' : newStatus === 'recess' ? 'EN RECESO' : 'FUERA DE LÍNEA'}`\n      })\n      \n      // Reload streams to show updated status\n      await loadStreams()\n    } catch (error) {\n      console.error('Error updating status:', error)\n      toast({\n        title: \"Error\", \n        description: \"Error al actualizar el estado\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 md:mb-6 gap-4\">\n        <div>\n          <h1 className=\"text-xl sm:text-2xl font-bold\">Transmisiones en Vivo</h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">Gestiona las señales y transmisiones en directo</p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button variant=\"outline\" className=\"w-full sm:w-auto min-h-[44px]\">\n                Limpiar datos de la BD\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Esta acción eliminará todos los registros de transmisiones de la base de datos y los reemplazará con transmisiones predeterminadas. \n                  <br /><br />\n                  <strong>Esta acción no se puede deshacer.</strong>\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={async () => {\n                    try {\n                      // First cleanup any example streams\n                      const cleanupResponse = await fetch('/api/admin/cleanup-streams', {\n                        method: 'POST'\n                      })\n\n                      if (!cleanupResponse.ok) {\n                        throw new Error('Error en limpieza')\n                      }\n\n                      // Then seed with real streams\n                      const seedResponse = await fetch('/api/admin/seed-live-streams', {\n                        method: 'POST'\n                      })\n\n                      if (!seedResponse.ok) {\n                        throw new Error('Error en inserción')\n                      }\n\n                      // Reload the streams from database\n                      await loadStreams()\n\n                      toast({\n                        title: \"Éxito\",\n                        description: \"Base de datos actualizada con transmisiones reales\"\n                      })\n                    } catch (error) {\n                      console.error('Error updating database:', error)\n                      toast({\n                        title: \"Error\",\n                        description: \"Error al actualizar la base de datos: \" + (error instanceof Error ? error.message : 'Error desconocido'),\n                        variant: \"destructive\"\n                      })\n                    }\n                  }}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  Sí, limpiar base de datos\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => {\n                setEditingStream(null)\n                resetForm()\n              }} className=\"w-full sm:w-auto min-h-[44px]\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nueva Transmisión\n              </Button>\n            </DialogTrigger>\n\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingStream ? 'Editar Transmisión' : 'Nueva Transmisión'}\n                </DialogTitle>\n                <DialogDescription>\n                  Completa la información de la transmisión en vivo.\n                </DialogDescription>\n              </DialogHeader>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"thumbnailUrl\">Miniatura</Label>\n                  <Input\n                    type=\"file\"\n                    id=\"thumbnailUrl\"\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                  />\n                  {formData.thumbnailUrl && typeof formData.thumbnailUrl === 'string' && (\n                    <img \n                      src={formData.thumbnailUrl}\n                      alt=\"Miniatura\"\n                      className=\"mt-2 w-32 h-auto\"\n                    />\n                  )}\n                </div>\n\n                <div>\n                 <Label htmlFor=\"channel\">Canal</Label>\n                  <div className=\"mt-2 flex flex-wrap gap-2\">\n                  <RadioGroup\n                        value={formData.channel}\n                        onValueChange={(value) => setFormData(prev => ({ ...prev, channel: value }))}\n                        className=\"flex flex-col space-y-2\"\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"C+\" id=\"c-plus\" />\n                          <label htmlFor=\"c-plus\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center space-x-2 cursor-pointer\">\n                            <div className=\"w-6 h-6 flex items-center justify-center\">\n                              <Image\n                                src=\"/images/channel-c-logo.png\"\n                                alt=\"C+ logo\"\n                                width={24}\n                                height={24}\n                                className=\"w-6 h-6 object-contain\"\n                                onError={(e) => {\n                                  e.currentTarget.src = \"/images/placeholder-logo.png\";\n                                }}\n                              />\n                            </div>\n                            <span>C+ (45.1)</span>\n                          </label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"S+\" id=\"s-plus\" />\n                          <label htmlFor=\"s-plus\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center space-x-2 cursor-pointer\">\n                            <div className=\"w-6 h-6 flex items-center justify-center\">\n                              <Image\n                                src=\"/images/channel-g-logo.png\"\n                                alt=\"S+ logo\"\n                                width={24}\n                                height={24}\n                                className=\"w-6 h-6 object-contain\"\n                                onError={(e) => {\n                                  e.currentTarget.src = \"/images/placeholder-logo.png\";\n                                }}\n                              />\n                            </div>\n                            <span>S+ (45.2)</span>\n                          </label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"D+\" id=\"d-plus\" />\n                          <label htmlFor=\"d-plus\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center space-x-2 cursor-pointer\">\n                            <div className=\"w-6 h-6 flex items-center justify-center\">\n                              <Image\n                                src=\"/images/channel-d-logo.png\"\n                                alt=\"D+ logo\"\n                                width={24}\n                                height={24}\n                                className=\"w-6 h-6 object-contain\"\n                                onError={(e) => {\n                                  e.currentTarget.src = \"/images/placeholder-logo.png\";\n                                }}\n                              />\n                            </div>\n                            <span>D+ (45.3)</span>\n                          </label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"ST+\" id=\"st-plus\" />\n                          <label htmlFor=\"st-plus\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center space-x-2 cursor-pointer\">\n                            <div className=\"w-6 h-6 flex items-center justify-center\">\n                              <Image\n                                src=\"/images/channel-st-logo.png\"\n                                alt=\"ST+ logo\"\n                                width={24}\n                                height={24}\n                                className=\"w-6 h-6 object-contain\"\n                                onError={(e) => {\n                                  e.currentTarget.src = \"/images/placeholder-logo.png\";\n                                }}\n                              />\n                            </div>\n                            <span>ST+ (Streaming)</span>\n                          </label>\n                        </div>\n                      </RadioGroup>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"streamUrl\">URL de Transmisión</Label>\n                  <Input\n                    id=\"streamUrl\"\n                    value={formData.streamUrl}\n                    onChange={(e) => setFormData({ ...formData, streamUrl: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"status\">Estado de la Transmisión</Label>\n                  <div className=\"mt-2\">\n                    <RadioGroup\n                      value={formData.status}\n                      onValueChange={(value) => setFormData(prev => ({ \n                        ...prev, \n                        status: value,\n                        isLive: value === 'live'\n                      }))}\n                      className=\"flex flex-col space-y-2\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"live\" id=\"live\" />\n                        <label htmlFor=\"live\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                          <span className=\"text-green-600\">● En Vivo</span>\n                        </label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"signal_open\" id=\"signal_open\" />\n                        <label htmlFor=\"signal_open\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                          <span className=\"text-green-600\">● Señal Abierta</span>\n                        </label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"recess\" id=\"recess\" />\n                        <label htmlFor=\"recess\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                          <span className=\"text-orange-600\">● En Receso</span>\n                        </label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"offline\" id=\"offline\" />\n                        <label htmlFor=\"offline\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                          <span className=\"text-gray-600\">● Fuera de Línea</span>\n                        </label>\n                      </div>\n                    </RadioGroup>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={isUploading}>\n                    {isUploading ? 'Subiendo...' : (editingStream ? 'Actualizar' : 'Crear')}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Transmisiones</CardTitle>\n          <CardDescription>\n            {streams.length} transmisiones configuradas\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Título</TableHead>\n                <TableHead>Canal</TableHead>\n                <TableHead>Estado</TableHead>\n                <TableHead>URL de Transmisión</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {streams.map((stream) => (\n                <TableRow key={stream.id}>\n                  <TableCell className=\"font-medium\">{stream.title}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <img \n                        src={\n                          stream.channel === 'C+' ? '/images/channel-c-logo.png' :\n                          stream.channel === 'D+' ? '/images/channel-d-logo.png' :\n                          stream.channel === 'S+' ? '/images/channel-g-logo.png' :\n                          stream.channel === 'ST+' ? '/images/channel-st-logo.png' :\n                          '/images/placeholder-logo.png'\n                        }\n                        alt={`Logo ${stream.channel}`}\n                        className=\"w-8 h-8 object-contain\"\n                      />\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                        stream.channel === 'C+' ? 'bg-gray-100 text-gray-800' :\n                        stream.channel === 'D+' ? 'bg-red-100 text-red-800' :\n                        stream.channel === 'S+' ? 'bg-green-100 text-green-800' :\n                        'bg-blue-100 text-blue-800'\n                      }`}>\n                        {stream.channel || 'Sin canal'}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className={`px-2 py-1 rounded-full text-xs ${\n                      stream.status === 'live' || stream.status === 'signal_open'\n                        ? 'bg-green-100 text-green-800' \n                        : stream.status === 'recess'\n                        ? 'bg-orange-100 text-orange-800'\n                        : 'bg-gray-100 text-gray-800'\n                    }`}>\n                      {stream.status === 'live' ? 'En Vivo' : \n                       stream.status === 'signal_open' ? 'Señal Abierta' :\n                       stream.status === 'recess' ? 'En Receso' : 'Fuera de Línea'}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <code className=\"text-xs bg-gray-100 px-2 py-1 rounded\">\n                      {stream.streamUrl}\n                    </code>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(stream)}\n                        title=\"Editar transmisión\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      {/* Quick status update buttons */}\n                      {stream.status !== 'live' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-green-50 hover:bg-green-100 border-green-200\"\n                          onClick={() => handleQuickStatusUpdate(stream.id, 'live')}\n                          title=\"Poner EN VIVO\"\n                        >\n                          <span className=\"text-xs text-green-600\">Live</span>\n                        </Button>\n                      )}\n                      \n                      {stream.status !== 'signal_open' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-green-50 hover:bg-green-100 border-green-200\"\n                          onClick={() => handleQuickStatusUpdate(stream.id, 'signal_open')}\n                          title=\"Poner SEÑAL ABIERTA\"\n                        >\n                          <span className=\"text-xs text-green-600\">Open</span>\n                        </Button>\n                      )}\n                      \n                      {stream.status !== 'recess' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\" \n                          className=\"bg-orange-50 hover:bg-orange-100 border-orange-200\"\n                          onClick={() => handleQuickStatusUpdate(stream.id, 'recess')}\n                          title=\"Poner EN RECESO\"\n                        >\n                          <span className=\"text-xs text-orange-600\">Rec</span>\n                        </Button>\n                      )}\n                      \n                      {stream.status !== 'offline' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-gray-50 hover:bg-gray-100 border-gray-200\"\n                          onClick={() => handleQuickStatusUpdate(stream.id, 'offline')}\n                          title=\"Poner FUERA DE LÍNEA\"\n                        >\n                          <span className=\"text-xs text-gray-600\">Off</span>\n                        </Button>\n                      )}\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(stream.id)}\n                        title=\"Eliminar transmisión\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":26041},"app/api/files/[...path]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { readFile, stat } from 'fs/promises'\nimport { join, normalize, sep, extname, basename } from 'path'\nimport { existsSync } from 'fs'\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n// Helper function to determine Content-Type based on file extension\nfunction getContentType(ext: string): string {\n  switch (ext) {\n    case '.jpg':\n    case '.jpeg':\n      return 'image/jpeg';\n    case '.png':\n      return 'image/png';\n    case '.gif':\n      return 'image/gif';\n    case '.webp':\n      return 'image/webp';\n    case '.svg':\n      return 'image/svg+xml';\n    case '.pdf':\n      return 'application/pdf';\n    case '.doc':\n      return 'application/msword';\n    case '.docx':\n      return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n    case '.mp3':\n      return 'audio/mpeg';\n    case '.mp4':\n      return 'video/mp4';\n    case '.webm':\n      return 'video/webm';\n    case '.wav':\n      return 'audio/wav';\n    case '.ogg':\n      return 'audio/ogg';\n    case '.m4a':\n      return 'audio/mp4';\n    default:\n      return 'application/octet-stream';\n  }\n}\n\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',\n      'Access-Control-Allow-Headers': 'Range',\n    },\n  })\n}\n\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ path: string[] }> }\n) {\n  try {\n    const params = await context.params\n    const filePath = params.path.join('/')\n\n    // Prevent directory traversal attacks\n    if (filePath.includes('..') || params.path.some(segment => segment === '..')) {\n      return new NextResponse('Invalid path', { status: 400 })\n    }\n\n    const baseDir = join(process.cwd(), 'public')\n    const fullPath = normalize(join(baseDir, filePath))\n\n    // Ensure the resolved path is within the public directory\n    if (!fullPath.startsWith(baseDir + sep) && fullPath !== baseDir) {\n      return new NextResponse('Invalid path', { status: 400 })\n    }\n\n    console.log('Serving file:', filePath)\n    console.log('Full path:', fullPath)\n    console.log('File exists:', existsSync(fullPath))\n\n    if (!existsSync(fullPath)) {\n      console.log('File not found:', fullPath)\n\n      // Try to find a similar file with different extension\n      const dirPath = join(process.cwd(), 'public', filePath.split('/').slice(0, -1).join('/'))\n      const fileName = filePath.split('/').pop()?.split('.')[0]\n\n      if (existsSync(dirPath) && fileName) {\n        const fs = require('fs')\n        const files = fs.readdirSync(dirPath)\n        const similarFile = files.find((f: string) => f.startsWith(fileName))\n\n        if (similarFile) {\n          console.log('Found similar file:', similarFile)\n          const similarPath = join(dirPath, similarFile)\n          const stats = await stat(similarPath)\n          const fileBuffer = await readFile(similarPath)\n\n          // Determine content type for similar file\n          const similarExt = similarFile.split('.').pop()?.toLowerCase()\n          let similarContentType = 'application/octet-stream'\n\n          switch (similarExt) {\n            case 'jpg':\n            case 'jpeg':\n              similarContentType = 'image/jpeg'\n              break\n            case 'png':\n              similarContentType = 'image/png'\n              break\n            case 'gif':\n              similarContentType = 'image/gif'\n              break\n            case 'webp':\n              similarContentType = 'image/webp'\n              break\n            case 'svg':\n              similarContentType = 'image/svg+xml'\n              break\n            case 'pdf':\n              similarContentType = 'application/pdf'\n              break\n            case 'doc':\n              similarContentType = 'application/msword'\n              break\n            case 'docx':\n              similarContentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n              break\n          }\n\n          const headers: Record<string, string> = {\n            'Content-Type': similarContentType,\n            'Content-Length': stats.size.toString(),\n            'Accept-Ranges': 'bytes',\n            'Cache-Control': 'public, max-age=31536000',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',\n            'Access-Control-Allow-Headers': 'Range',\n            'X-Content-Type-Options': 'nosniff',\n          }\n\n          // Force download for documents\n          if (similarContentType.includes('pdf') || similarContentType.includes('word') || similarContentType.includes('msword')) {\n            headers['Content-Disposition'] = `attachment; filename=\"${similarFile}\"`\n          }\n\n          return new NextResponse(new Uint8Array(fileBuffer), {\n            status: 200,\n            headers,\n          })\n        }\n      }\n\n      return new NextResponse('File not found', { status: 404 })\n    }\n\n    const stats = await stat(fullPath)\n\n    // Determine content type based on file extension\n    const ext = filePath.split('.').pop()?.toLowerCase()\n    let contentType = 'application/octet-stream'\n\n    switch (ext) {\n      case 'jpg':\n      case 'jpeg':\n        contentType = 'image/jpeg'\n        break\n      case 'png':\n        contentType = 'image/png'\n        break\n      case 'gif':\n        contentType = 'image/gif'\n        break\n      case 'webp':\n        contentType = 'image/webp'\n        break\n      case 'svg':\n        contentType = 'image/svg+xml'\n        break\n      case 'pdf':\n        contentType = 'application/pdf'\n        break\n      case 'doc':\n        contentType = 'application/msword'\n        break\n      case 'docx':\n        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n        break\n      case 'mp3':\n        contentType = 'audio/mpeg'\n        break\n      case 'mp4':\n        contentType = 'video/mp4'\n        break\n      case 'webm':\n        contentType = 'video/webm'\n        break\n      case 'wav':\n        contentType = 'audio/wav'\n        break\n      case 'ogg':\n        contentType = 'audio/ogg'\n        break\n      case 'm4a':\n        contentType = 'audio/mp4'\n        break\n    }\n\n    const range = request.headers.get('range')\n\n    if (range && (contentType.startsWith('audio/') || contentType.startsWith('video/'))) {\n      const parts = range.replace(/bytes=/, \"\").split(\"-\")\n      const start = parseInt(parts[0], 10)\n      const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1\n      const chunksize = (end - start) + 1\n\n      const fileBuffer = await readFile(fullPath)\n      const chunk = fileBuffer.slice(start, end + 1)\n\n      const rangeHeaders: Record<string, string> = {\n        'Content-Range': `bytes ${start}-${end}/${stats.size}`,\n        'Accept-Ranges': 'bytes',\n        'Content-Length': chunksize.toString(),\n        'Content-Type': contentType,\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',\n        'Access-Control-Allow-Headers': 'Range',\n        'X-Content-Type-Options': 'nosniff',\n      }\n\n      // Force download for documents in range requests too\n      if (contentType.includes('pdf') || contentType.includes('word') || contentType.includes('msword')) {\n        const fileName = filePath.split('/').pop() || 'document'\n        rangeHeaders['Content-Disposition'] = `attachment; filename=\"${fileName}\"`\n        rangeHeaders['Content-Transfer-Encoding'] = 'binary'\n      }\n\n      return new NextResponse(new Uint8Array(chunk), {\n        status: 206,\n        headers: rangeHeaders,\n      })\n    }\n\n    const fileBuffer = await readFile(fullPath)\n\n    const headers: Record<string, string> = {\n      'Content-Type': contentType,\n      'Content-Length': stats.size.toString(),\n      'Accept-Ranges': 'bytes',\n      'Cache-Control': 'public, max-age=31536000',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',\n      'Access-Control-Allow-Headers': 'Range',\n      'X-Content-Type-Options': 'nosniff',\n    }\n\n    // Force download for documents\n    if (contentType.includes('pdf') || contentType.includes('word') || contentType.includes('msword')) {\n      const fileName = filePath.split('/').pop() || 'document'\n      headers['Content-Disposition'] = `attachment; filename=\"${fileName}\"`\n      headers['Content-Transfer-Encoding'] = 'binary'\n    }\n\n    return new NextResponse(new Uint8Array(fileBuffer), {\n      status: 200,\n      headers,\n    })\n  } catch (error) {\n    console.error('Error serving file:', error)\n    return new NextResponse('Internal Server Error', { status: 500 })\n  }\n}","size_bytes":8762},"app/programacion/page-giant.tsx":{"content":"import { Suspense } from \"react\"\nimport { getLiveStreams } from \"@/lib/api\"\nimport AutoScrollCarouselGiant from \"@/components/auto-scroll-carousel-giant\"\n\nexport const metadata = {\n  title: \"Programación - Canal del Congreso\",\n  description: \"Consulta la programación del Canal del Congreso\",\n}\n\nexport default async function ProgramacionPage() {\n  const liveStreams = await getLiveStreams()\n\n  return (\n    <main className=\"min-h-screen bg-[#3b0764]\">\n      <div className=\"container mx-auto py-40\">\n        <h1 className=\"text-[300px] font-bold text-white text-center mb-80\">Programación</h1>\n\n        <section className=\"mb-120\">\n          <Suspense\n            fallback={<div className=\"text-white text-8xl text-center py-80\">Cargando transmisiones en vivo...</div>}\n          >\n            <AutoScrollCarouselGiant items={liveStreams} />\n          </Suspense>\n        </section>\n      </div>\n    </main>\n  )\n}\n","size_bytes":918},"congress-channel.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Play, ChevronLeft, ChevronRight } from \"lucide-react\";\n\nexport default function CongressChannel() {\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-purple-900 text-white\">\n        <div className=\"container mx-auto px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Image\n              src=\"/placeholder.svg?height=40&width=40\"\n              alt=\"Congress Channel Logo\"\n              width={40}\n              height={40}\n              className=\"mr-2\"\n            />\n            <span className=\"font-semibold text-lg\">Congreso</span>\n          </div>\n          <nav className=\"hidden md:flex space-x-6 uppercase text-sm font-medium\">\n            <Link href=\"/\" className=\"hover:text-purple-200\">\n              Inicio\n            </Link>\n            <Link href=\"/programacion\" className=\"hover:text-purple-200\">\n              Programación\n            </Link>\n            <Link href=\"/noticias\" className=\"hover:text-purple-200\">\n              Noticias\n            </Link>\n            <Link href=\"/transmisiones\" className=\"hover:text-purple-200\">\n              Transmisiones\n            </Link>\n            <Link href=\"/contacto\" className=\"hover:text-purple-200\">\n              Contacto\n            </Link>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"flex-grow\">\n        {/* Live Now Section */}\n        <section className=\"bg-purple-900 text-white py-4\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-xl font-bold mb-4 text-center\">\n              EN VIVO AHORA\n            </h2>\n            <div className=\"relative\">\n              <div className=\"flex overflow-x-auto space-x-4 py-2 scrollbar-hide\">\n                {[1, 2, 3, 4, 5].map((item) => (\n                  <div key={item} className=\"flex-shrink-0 w-64 relative group\">\n                    <div className=\"relative h-36 w-full bg-purple-800 rounded-lg overflow-hidden\">\n                      <Image\n                        src={`/placeholder.svg?height=144&width=256`}\n                        alt={`Live stream ${item}`}\n                        width={256}\n                        height={144}\n                        className=\"object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center\">\n                        <div className=\"w-12 h-12 rounded-full bg-purple-700 bg-opacity-70 flex items-center justify-center\">\n                          <Play className=\"w-6 h-6 text-white\" />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <button className=\"absolute left-0 top-1/2 -translate-y-1/2 bg-white bg-opacity-50 rounded-full p-1 z-10\">\n                <ChevronLeft className=\"w-6 h-6 text-purple-900\" />\n              </button>\n              <button className=\"absolute right-0 top-1/2 -translate-y-1/2 bg-white bg-opacity-50 rounded-full p-1 z-10\">\n                <ChevronRight className=\"w-6 h-6 text-purple-900\" />\n              </button>\n            </div>\n          </div>\n        </section>\n\n        {/* Our Programs Section */}\n        <section className=\"py-8 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-2xl font-bold mb-6 text-center text-purple-900\">\n              NUESTROS PROGRAMAS\n            </h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n              {[\"Agenda\", \"Noticias\", \"Congreso\", \"Mesa de\", \"Contacto\"].map(\n                (program, index) => (\n                  <div\n                    key={index}\n                    className=\"rounded-lg overflow-hidden shadow-md bg-gray-100\"\n                  >\n                    <div className=\"relative h-32\">\n                      <Image\n                        src={`/placeholder.svg?height=128&width=200`}\n                        alt={program}\n                        width={200}\n                        height={128}\n                        className=\"object-cover w-full h-full\"\n                      />\n                    </div>\n                    <div className=\"p-2 text-center font-medium text-sm\">\n                      {program}\n                    </div>\n                  </div>\n                ),\n              )}\n            </div>\n          </div>\n        </section>\n\n        {/* News Section */}\n        <section className=\"py-8 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-2xl font-bold mb-6 text-center text-purple-900\">\n              NOTICIAS\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((item) => (\n                <div\n                  key={item}\n                  className=\"rounded-lg overflow-hidden shadow-md\"\n                >\n                  <div className=\"relative h-48\">\n                    <Image\n                      src={`/placeholder.svg?height=192&width=384`}\n                      alt={`News ${item}`}\n                      width={384}\n                      height={192}\n                      className=\"object-cover w-full h-full\"\n                    />\n                  </div>\n                  <div className=\"p-4\">\n                    <h3 className=\"font-bold text-sm mb-2\">\n                      Lorem ipsum dolor sit amet, consectetur adipiscing elit\n                    </h3>\n                    <p className=\"text-xs text-gray-600\">\n                      Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                      Sed do eiusmod tempor incididunt ut labore et dolore magna\n                      aliqua.\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Find Participation Section */}\n        <section className=\"py-8 bg-purple-900 text-white\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex flex-col md:flex-row items-center justify-between\">\n              <div className=\"md:w-2/3\">\n                <h2 className=\"text-2xl font-bold mb-4\">\n                  ENCUENTRA LA PARTICIPACIÓN\n                  <br />\n                  DE TUS LEGISLADORES:\n                </h2>\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <div className=\"bg-purple-800 p-3 rounded\">\n                    <p className=\"text-sm\">Lorem ipsum dolor sit amet</p>\n                  </div>\n                  <div className=\"bg-purple-800 p-3 rounded\">\n                    <p className=\"text-sm\">Lorem ipsum dolor sit amet</p>\n                  </div>\n                  <div className=\"bg-purple-800 p-3 rounded\">\n                    <p className=\"text-sm\">Lorem ipsum dolor sit amet</p>\n                  </div>\n                  <div className=\"bg-purple-800 p-3 rounded\">\n                    <p className=\"text-sm\">Lorem ipsum dolor sit amet</p>\n                  </div>\n                </div>\n                <button className=\"bg-yellow-500 text-purple-900 px-4 py-2 rounded font-bold\">\n                  Buscar\n                </button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Congress Channel Organs Section */}\n        <section className=\"py-8 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-2xl font-bold mb-6 text-center text-purple-900\">\n              ÓRGANOS DEL CANAL DEL CONGRESO\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((item) => (\n                <div key={item} className=\"rounded-lg overflow-hidden\">\n                  <div className=\"relative h-40\">\n                    <Image\n                      src={`/placeholder.svg?height=160&width=320`}\n                      alt={`Organ ${item}`}\n                      width={320}\n                      height={160}\n                      className=\"object-cover w-full h-full\"\n                    />\n                  </div>\n                  <div className=\"p-4 text-center\">\n                    <h3 className=\"font-bold text-sm\">\n                      {item === 1\n                        ? \"DEFENSORÍA DE AUDIENCIA\"\n                        : item === 2\n                          ? \"COMISIÓN BICAMERAL\"\n                          : \"Consejo Consultivo\"}\n                    </h3>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Download App Section */}\n        <section className=\"py-8 bg-purple-900 text-white\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-2xl font-bold mb-6 text-center\">\n              DESCARGA NUESTRA APP\n            </h2>\n            <div className=\"flex flex-col md:flex-row items-center justify-center gap-8\">\n              <div className=\"text-center\">\n                <Image\n                  src=\"/placeholder.svg?height=120&width=120\"\n                  alt=\"QR Code\"\n                  width={120}\n                  height={120}\n                  className=\"mx-auto mb-2 bg-white p-2\"\n                />\n                <p className=\"text-sm\">Android</p>\n              </div>\n              <div className=\"text-center\">\n                <Image\n                  src=\"/placeholder.svg?height=120&width=120\"\n                  alt=\"QR Code\"\n                  width={120}\n                  height={120}\n                  className=\"mx-auto mb-2 bg-white p-2\"\n                />\n                <p className=\"text-sm\">iOS</p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-purple-900 text-white py-6\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <h3 className=\"font-bold mb-2\">Contacto</h3>\n              <p className=\"text-sm\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-bold mb-2\">Enlaces</h3>\n              <ul className=\"text-sm space-y-1\">\n                <li>\n                  <Link href=\"#\" className=\"hover:underline\">\n                    Inicio\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"#\" className=\"hover:underline\">\n                    Programación\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"#\" className=\"hover:underline\">\n                    Noticias\n                  </Link>\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-bold mb-2\">Redes Sociales</h3>\n              <div className=\"flex space-x-4\">\n                <Link href=\"#\" className=\"hover:text-purple-200\">\n                  FB\n                </Link>\n                <Link href=\"#\" className=\"hover:text-purple-200\">\n                  TW\n                </Link>\n                <Link href=\"#\" className=\"hover:text-purple-200\">\n                  IG\n                </Link>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-6 pt-6 border-t border-purple-800 text-center text-sm\">\n            <p>© 2023 Canal del Congreso. Todos los derechos reservados.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11751},"app/api/radio/stream-status/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function GET() {\n  try {\n    // Get current config\n    const configResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/radio/live-config`)\n    const config = await configResponse.json()\n    \n    // In a real implementation, you would check the actual stream status\n    // For now, we'll simulate the check\n    const isValidUrl = config.streamUrl && config.streamUrl.includes('.m3u8')\n    \n    if (isValidUrl) {\n      // Simulate checking stream availability\n      // In production, you might use a service like FFprobe or make a HEAD request\n      const status = {\n        connected: config.isLive,\n        listeners: Math.floor(Math.random() * 500) + 50, // Simulated listener count\n        quality: config.quality,\n        uptime: \"2h 15m\",\n        bitrate: config.quality === 'high' ? '320kbps' : config.quality === 'medium' ? '128kbps' : '64kbps'\n      }\n      \n      return NextResponse.json(status)\n    } else {\n      return NextResponse.json({\n        connected: false,\n        error: 'Invalid stream URL'\n      })\n    }\n  } catch (error) {\n    console.error('Error checking stream status:', error)\n    return NextResponse.json({\n      connected: false,\n      error: 'Unable to check stream status'\n    }, { status: 500 })\n  }\n}\n","size_bytes":1346},"app/robots.txt/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\n\nexport async function GET() {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'\n  \n  const robotsTxt = `User-agent: *\nAllow: /\n\n# Block admin area\nDisallow: /admin/\nDisallow: /api/\n\n# Block uploads directory browsing\nDisallow: /uploads/\n\n# Allow specific API endpoints for indexing\nAllow: /api/sitemap\n\nSitemap: ${baseUrl}/sitemap.xml\n`\n\n  return new NextResponse(robotsTxt, {\n    headers: {\n      'Content-Type': 'text/plain',\n    }\n  })\n}\n","size_bytes":513},"app/api/admin/timezone-config/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getDB } from '@/lib/database-env'\nimport { clearTimezoneCache } from '@/lib/timezone'\n\nexport async function GET() {\n  try {\n    const pool = getDB()\n\n    let result\n    try {\n      result = await pool.query(`\n        SELECT * FROM timezone_config \n        WHERE is_active = true \n        ORDER BY updated_at DESC \n        LIMIT 1\n      `)\n    } catch (dbError: any) {\n      if (dbError.code === '42703') {\n        result = await pool.query(`\n          SELECT * FROM timezone_config \n          ORDER BY updated_at DESC \n          LIMIT 1\n        `)\n      } else {\n        throw dbError\n      }\n    }\n\n    if (result.rows.length === 0) {\n      return NextResponse.json({\n        timezone: 'America/Mexico_City',\n        displayName: 'Ciudad de México (CST/CDT)',\n        isActive: true\n      })\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error fetching timezone config:', error)\n    return NextResponse.json({\n      timezone: 'America/Mexico_City',\n      displayName: 'Ciudad de México (CST/CDT)',\n      isActive: true\n    })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const url = new URL(request.url)\n    const clearCache = url.searchParams.get('clearCache')\n\n    // If this is just a cache clear request\n    if (clearCache === 'true') {\n      clearTimezoneCache()\n      return NextResponse.json({ success: true, message: 'Cache cleared' })\n    }\n\n    const { timezone, displayName } = await request.json()\n\n    if (!timezone || !displayName) {\n      return NextResponse.json({ error: 'Timezone and display name are required' }, { status: 400 })\n    }\n\n    const pool = getDB()\n\n    // Try to deactivate existing configurations (if is_active column exists)\n    try {\n      await pool.query('UPDATE timezone_config SET is_active = false')\n    } catch (deactivateError: any) {\n      if (deactivateError.code !== '42703') {\n        throw deactivateError\n      }\n    }\n\n    // Insert new configuration\n    let result\n    try {\n      result = await pool.query(`\n        INSERT INTO timezone_config (timezone, display_name, is_active, created_at, updated_at)\n        VALUES ($1, $2, true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n        RETURNING *\n      `, [timezone, displayName])\n    } catch (insertError: any) {\n      if (insertError.code === '42703') {\n        result = await pool.query(`\n          INSERT INTO timezone_config (timezone, display_name, created_at, updated_at)\n          VALUES ($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n          RETURNING *\n        `, [timezone, displayName])\n      } else {\n        throw insertError\n      }\n    }\n\n    // Clear the cache so the new timezone takes effect immediately\n    clearTimezoneCache()\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error saving timezone config:', error)\n    return NextResponse.json({ error: 'Failed to save timezone config' }, { status: 500 })\n  }\n}\n\nexport async function PUT(request: Request) {\n  try {\n    const { id, timezone, displayName } = await request.json()\n\n    if (!id || !timezone || !displayName) {\n      return NextResponse.json({ error: 'ID, timezone and display name are required' }, { status: 400 })\n    }\n\n    const pool = getDB()\n\n    // Try to deactivate all configurations first (if is_active column exists)\n    try {\n      await pool.query('UPDATE timezone_config SET is_active = false')\n    } catch (deactivateError: any) {\n      if (deactivateError.code !== '42703') {\n        throw deactivateError\n      }\n    }\n\n    // Update and activate the specified configuration\n    let result\n    try {\n      result = await pool.query(`\n        UPDATE timezone_config \n        SET timezone = $1, display_name = $2, is_active = true, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $3\n        RETURNING *\n      `, [timezone, displayName, id])\n    } catch (updateError: any) {\n      if (updateError.code === '42703') {\n        result = await pool.query(`\n          UPDATE timezone_config \n          SET timezone = $1, display_name = $2, updated_at = CURRENT_TIMESTAMP\n          WHERE id = $3\n          RETURNING *\n        `, [timezone, displayName, id])\n      } else {\n        throw updateError\n      }\n    }\n\n    if (result.rows.length === 0) {\n      return NextResponse.json({ error: 'Timezone configuration not found' }, { status: 404 })\n    }\n\n    // Clear the cache so the new timezone takes effect immediately\n    clearTimezoneCache()\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating timezone config:', error)\n    return NextResponse.json({ error: 'Failed to update timezone config' }, { status: 500 })\n  }\n}","size_bytes":4738},"components/error-boundary.tsx":{"content":"\n\"use client\"\n\nimport React from 'react'\n\ninterface ErrorBoundaryState {\n  hasError: boolean\n  error?: Error\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode\n  fallback?: React.ReactNode\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error\n    }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Log the error for debugging\n    console.error('Error Boundary caught an error:', error, errorInfo)\n    \n    // If it's a connection error, try to reload the page after a delay\n    if (error.message?.includes('Connection closed')) {\n      setTimeout(() => {\n        window.location.reload()\n      }, 2000)\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Something went wrong</h2>\n            <p className=\"text-gray-600 mb-4\">\n              {this.state.error?.message?.includes('Connection closed') \n                ? 'Connection interrupted. Reloading...' \n                : 'An unexpected error occurred.'}\n            </p>\n            <button \n              onClick={() => window.location.reload()}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              Reload Page\n            </button>\n          </div>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n","size_bytes":1741},"app/api/health/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\n\nexport async function GET() {\n  return NextResponse.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    service: 'Radio Congreso'\n  })\n}\n","size_bytes":202},"app/api/news/publish-scheduled/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getDB } from '@/lib/database-env'\nimport { formatConfiguredTime, getCurrentTimezone } from '@/lib/timezone'\n\nexport async function POST() {\n  try {\n    const pool = getDB()\n    \n    // First, check which items will be published (using Mexico City timezone)\n    const checkResult = await pool.query(`\n      SELECT id, title, published_at, status\n      FROM news \n      WHERE status = 'scheduled' AND published_at <= CURRENT_TIMESTAMP\n    `)\n    \n    const currentTimezone = await getCurrentTimezone()\n    const currentTime = await formatConfiguredTime(new Date())\n    \n    console.log(`Found ${checkResult.rows.length} scheduled items ready to publish (${currentTimezone} time: ${currentTime}):`, \n      checkResult.rows.map(row => ({\n        id: row.id,\n        title: row.title?.substring(0, 30) + '...',\n        publishedAt: row.published_at,\n        currentStatus: row.status\n      }))\n    )\n    \n    if (checkResult.rows.length === 0) {\n      return NextResponse.json({ \n        success: true, \n        publishedCount: 0,\n        message: 'No scheduled items ready to publish'\n      })\n    }\n    \n    // Update scheduled news items that should now be published (using Mexico City timezone)\n    const result = await pool.query(`\n      UPDATE news \n      SET status = 'published' \n      WHERE status = 'scheduled' AND published_at <= CURRENT_TIMESTAMP\n      RETURNING id, title, published_at\n    `)\n\n    console.log(`Successfully published ${result.rows.length} scheduled news items`)\n    \n    return NextResponse.json({ \n      success: true, \n      publishedCount: result.rows.length,\n      publishedItems: result.rows.map(row => ({\n        id: row.id,\n        title: row.title,\n        publishedAt: row.published_at\n      }))\n    })\n  } catch (error) {\n    console.error('Error publishing scheduled news:', error)\n    return NextResponse.json({ error: 'Failed to publish scheduled news' }, { status: 500 })\n  }\n}\n","size_bytes":1970},"components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"components/legislator-search.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Calendar } from \"lucide-react\"\nimport type { ParliamentaryGroup } from \"@/lib/api\"\n\nexport default function LegislatorSearch({\n  parliamentaryGroups,\n}: {\n  parliamentaryGroups: ParliamentaryGroup[]\n}) {\n  const router = useRouter()\n  const [name, setName] = useState(\"\")\n  const [groupId, setGroupId] = useState(\"\")\n  const [keywords, setKeywords] = useState(\"\")\n  const [startDate, setStartDate] = useState(\"\")\n  const [endDate, setEndDate] = useState(\"\")\n  const [isSearching, setIsSearching] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsSearching(true)\n\n    try {\n      // Build search query for VOD\n      const searchTerms = []\n      if (name) searchTerms.push(name)\n      if (groupId) searchTerms.push(groupId)\n      if (keywords) searchTerms.push(keywords)\n      \n      const searchQuery = searchTerms.join(\" \")\n      const vodUrl = `https://vod.canaldelcongreso.gob.mx/search?q=${encodeURIComponent(searchQuery)}`\n      \n      // Open VOD search in new tab\n      window.open(vodUrl, '_blank')\n    } catch (error) {\n      console.error(\"Error searching legislators:\", error)\n    } finally {\n      setIsSearching(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6 max-w-md mx-auto\">\n      <div className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"legislator-name\" className=\"block text-sm font-medium mb-2 text-white\">\n            Nombre Legislador (a):\n          </label>\n          <input\n            id=\"legislator-name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            className=\"w-full bg-transparent border-b border-white/70 pb-1 text-white focus:outline-none focus:border-white\"\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"parliamentary-group\" className=\"block text-sm font-medium mb-2 text-white\">\n            Grupo Parlamentario:\n          </label>\n          <input\n            id=\"parliamentary-group\"\n            type=\"text\"\n            value={groupId}\n            onChange={(e) => setGroupId(e.target.value)}\n            className=\"w-full bg-transparent border-b border-white/70 pb-1 text-white focus:outline-none focus:border-white\"\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"keywords\" className=\"block text-sm font-medium mb-2 text-white\">\n            Palabras Clave:\n          </label>\n          <input\n            id=\"keywords\"\n            type=\"text\"\n            value={keywords}\n            onChange={(e) => setKeywords(e.target.value)}\n            className=\"w-full bg-transparent border-b border-white/70 pb-1 text-white focus:outline-none focus:border-white\"\n          />\n        </div>\n\n        <div className=\"flex gap-8\">\n          <div className=\"flex-1\">\n            <label htmlFor=\"start-date\" className=\"block text-sm font-medium mb-2 text-white\">\n              Del\n            </label>\n            <div className=\"relative\">\n              <input\n                id=\"start-date\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"w-full bg-transparent border-b border-white/70 pb-1 text-white focus:outline-none focus:border-white [color-scheme:dark]\"\n              />\n              <Calendar className=\"absolute right-0 bottom-2 w-4 h-4 text-white\" />\n            </div>\n          </div>\n\n          <div className=\"flex-1\">\n            <label htmlFor=\"end-date\" className=\"block text-sm font-medium mb-2 text-white\">\n              Al\n            </label>\n            <div className=\"relative\">\n              <input\n                id=\"end-date\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"w-full bg-transparent border-b border-white/70 pb-1 text-white focus:outline-none focus:border-white [color-scheme:dark]\"\n              />\n              <Calendar className=\"absolute right-0 bottom-2 w-4 h-4 text-white\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center mt-8\">\n        <button\n          type=\"submit\"\n          disabled={isSearching}\n          className=\"bg-white text-[#2e004f] px-8 py-2 rounded-md font-medium disabled:opacity-70 hover:bg-white/90 transition-colors\"\n        >\n          {isSearching ? \"Buscando...\" : \"Enviar\"}\n        </button>\n      </div>\n    </form>\n  )\n}\n","size_bytes":4636},"app/api/auth/debug/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getDatabaseConnection } from '@/lib/database'\n\nexport async function GET(request: NextRequest) {\n  // Only allow in development or if specifically enabled\n  if (process.env.NODE_ENV === 'production' && process.env.ENABLE_DEBUG !== 'true') {\n    return NextResponse.json({ error: 'Debug endpoint disabled in production' }, { status: 403 })\n  }\n\n  const diagnostics: any = {\n    environment: {\n      nodeEnv: process.env.NODE_ENV,\n      hasJwtSecret: !!process.env.JWT_SECRET,\n      hasDatabaseUrl: !!process.env.DATABASE_URL,\n      hasPgHost: !!process.env.PGHOST,\n      hasPgDatabase: !!process.env.PGDATABASE,\n      hasPgUser: !!process.env.PGUSER,\n      hasPgPassword: !!process.env.PGPASSWORD,\n    },\n    cookies: {\n      authToken: !!request.cookies.get('auth-token'),\n      allCookies: request.cookies.getAll().map(c => ({ name: c.name, hasValue: !!c.value }))\n    },\n    request: {\n      host: request.headers.get('host'),\n      protocol: request.nextUrl.protocol,\n      userAgent: request.headers.get('user-agent'),\n    }\n  }\n\n  // Test database connection\n  try {\n    const pool = getDatabaseConnection()\n    if (pool) {\n      const result = await pool.query('SELECT COUNT(*) FROM users')\n      diagnostics.database = {\n        connected: true,\n        userCount: parseInt(result.rows[0].count)\n      }\n    } else {\n      diagnostics.database = { connected: false, error: 'No connection pool' }\n    }\n  } catch (error) {\n    diagnostics.database = { \n      connected: false, \n      error: error instanceof Error ? error.message : 'Unknown error'\n    }\n  }\n\n  return NextResponse.json(diagnostics)\n}\n","size_bytes":1673},"lib/upload.ts":{"content":"\n\"use server\"\n\nimport { writeFile } from 'fs/promises'\nimport { join } from 'path'\nimport { randomUUID } from 'crypto'\n\nexport async function uploadImage(formData: FormData): Promise<string> {\n  const file = formData.get(\"file\") as File\n\n  if (!file) {\n    throw new Error(\"No se proporcionó ningún archivo\")\n  }\n\n  // Validate file type\n  if (!file.type.startsWith('image/')) {\n    throw new Error(\"El archivo debe ser una imagen\")\n  }\n\n  // Validate file size (max 5MB)\n  if (file.size > 5 * 1024 * 1024) {\n    throw new Error(\"El archivo no puede ser mayor a 5MB\")\n  }\n\n  try {\n    // Convert file to buffer\n    const bytes = await file.arrayBuffer()\n    const buffer = Buffer.from(bytes)\n\n    // Generate unique filename\n    const fileExtension = file.name.split('.').pop()\n    const uniqueFilename = `${randomUUID()}.${fileExtension}`\n    \n    // Define upload path in public directory\n    const uploadDir = join(process.cwd(), 'public', 'uploads', 'programs')\n    const filePath = join(uploadDir, uniqueFilename)\n\n    // Create directory if it doesn't exist\n    const { mkdir } = await import('fs/promises')\n    await mkdir(uploadDir, { recursive: true })\n\n    // Write file to local storage\n    await writeFile(filePath, buffer)\n\n    // Return the public URL path\n    return `/uploads/programs/${uniqueFilename}`\n  } catch (error) {\n    console.error('Error uploading file:', error)\n    throw new Error(\"Error al subir el archivo\")\n  }\n}\n","size_bytes":1447},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1244},"components/ui/aspect-ratio.tsx":{"content":"\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":154},"components/bulk-news-upload.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Upload, X, Plus, Calendar } from \"lucide-react\"\nimport RichTextEditor from \"@/components/rich-text-editor\"\n\ninterface BulkNewsData {\n  title: string\n  summary: string\n  content: string\n  category: string\n  publishedAt: string\n  image: File | null\n}\n\ninterface BulkNewsUploadProps {\n  onComplete: () => void\n}\n\nexport default function BulkNewsUpload({ onComplete }: BulkNewsUploadProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [newsItems, setNewsItems] = useState<BulkNewsData[]>([\n    { title: '', summary: '', content: '', category: '', publishedAt: '', image: null }\n  ])\n  const [isUploading, setIsUploading] = useState(false)\n  const { toast } = useToast()\n\n  const categories = [\n    'Trabajo en comisiones',\n    'Trabajo en pleno',\n    'Relaciones Exteriores',\n    'Temas de actualidad',\n    'Reformas aprobadas',\n    'Foros y seminarios',\n    'Reformas en DOF'\n  ]\n\n  const addNewsItem = () => {\n    if (newsItems.length < 20) {\n      setNewsItems([...newsItems, {\n        title: '',\n        summary: '',\n        content: '',\n        category: categories[0],\n        publishedAt: new Date().toISOString().slice(0, 16), // datetime-local format\n        image: null\n      }])\n    }\n  }\n\n  const removeNewsItem = (index: number) => {\n    if (newsItems.length > 1) {\n      setNewsItems(newsItems.filter((_, i) => i !== index))\n    }\n  }\n\n  const updateNewsItem = (index: number, field: keyof BulkNewsData, value: string) => {\n    const updated = [...newsItems]\n    updated[index] = { ...updated[index], [field]: value }\n    setNewsItems(updated)\n  }\n\n  const handleFileChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      const updated = [...newsItems]\n      updated[index] = { ...updated[index], image: file }\n      setNewsItems(updated)\n    }\n  }\n\n  const uploadImage = async (file: File): Promise<string> => {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', 'news')\n\n    console.log('Uploading bulk news image:', file.name)\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: formData,\n    })\n\n    if (!response.ok) {\n      const errorData = await response.json()\n      console.error('Upload failed:', errorData)\n      throw new Error(errorData.error || 'Error uploading image')\n    }\n\n    const result = await response.json()\n    console.log('Bulk news image uploaded successfully:', result.imageUrl)\n    return result.imageUrl\n  }\n\n  const handleBulkUpload = async () => {\n    try {\n      setIsUploading(true)\n\n      // Validate all items\n      const invalidItems = newsItems.filter(item => \n        !item.title.trim() || !item.summary.trim() || !item.content.trim() || \n        !item.category || !item.publishedAt || !item.image\n      )\n\n      if (invalidItems.length > 0) {\n        toast({\n          title: \"Error de validación\",\n          description: \"Todos los campos son obligatorios incluyendo la imagen\",\n          variant: \"destructive\"\n        })\n        return\n      }\n\n      // Upload all news items\n      const uploadPromises = newsItems.map(async (item) => {\n        let imageUrl = ''\n        if (item.image) {\n          imageUrl = await uploadImage(item.image)\n        }\n\n        const publishDate = new Date(item.publishedAt)\n        const now = new Date()\n        const status = publishDate <= now ? 'published' : 'scheduled'\n\n        return fetch('/api/news', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title: item.title,\n            summary: item.summary,\n            content: item.content,\n            category: item.category,\n            imageUrl,\n            publishedAt: publishDate,\n            status\n          }),\n        })\n      })\n\n      const results = await Promise.all(uploadPromises)\n      const successful = results.filter(r => r.ok).length\n\n      toast({\n        title: \"Carga masiva completada\",\n        description: `Se cargaron ${successful} de ${newsItems.length} noticias exitosamente`,\n      })\n\n      // Reset form\n      setNewsItems([{ title: '', summary: '', content: '', category: '', publishedAt: '', image: null }])\n      setIsOpen(false)\n      onComplete()\n\n    } catch (error) {\n      console.error('Error in bulk upload:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al cargar las noticias masivamente\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" onClick={() => setIsOpen(true)}>\n          <Upload className=\"h-4 w-4 mr-2\" />\n          Carga Masiva\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Carga Masiva de Noticias</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {newsItems.map((item, index) => (\n            <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"font-semibold\">Noticia {index + 1}</h3>\n                {newsItems.length > 1 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeNewsItem(index)}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Título</Label>\n                  <Input\n                    value={item.title}\n                    onChange={(e) => updateNewsItem(index, 'title', e.target.value)}\n                    placeholder=\"Título de la noticia\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Categoría</Label>\n                  <Select value={item.category} onValueChange={(value) => updateNewsItem(index, 'category', value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona una categoría\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Fecha de Publicación</Label>\n                  <Input\n                    type=\"datetime-local\"\n                    value={item.publishedAt}\n                    onChange={(e) => updateNewsItem(index, 'publishedAt', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label>Imagen</Label>\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={(e) => handleFileChange(index, e)}\n                  />\n                  {item.image && (\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      Imagen seleccionada: {item.image.name}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label>Resumen</Label>\n                <Textarea\n                  value={item.summary}\n                  onChange={(e) => updateNewsItem(index, 'summary', e.target.value)}\n                  placeholder=\"Resumen de la noticia\"\n                  rows={3}\n                />\n              </div>\n\n              <div>\n                <Label>Contenido</Label>\n                <RichTextEditor\n                  value={item.content}\n                  onChange={(value) => updateNewsItem(index, 'content', value)}\n                  placeholder=\"Contenido completo de la noticia con formato rico\"\n                  height={300}\n                />\n              </div>\n            </div>\n          ))}\n\n          <div className=\"flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={addNewsItem}\n              disabled={newsItems.length >= 20}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Agregar Noticia ({newsItems.length}/20)\n            </Button>\n\n            <div className=\"space-x-2\">\n              <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={handleBulkUpload} disabled={isUploading}>\n                {isUploading ? 'Cargando...' : 'Cargar Noticias'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":9503},"components/ui/toggle.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1541},"app/api/homepage-config/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getHomepageConfigFromDB, createHomepageConfigInDB, updateHomepageConfigInDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const config = await getHomepageConfigFromDB()\n    return NextResponse.json(config)\n  } catch (error) {\n    console.error('Error fetching homepage config:', error)\n    return NextResponse.json({ error: 'Failed to fetch homepage config' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const data = await request.json()\n    console.log('API: Creating homepage config with data:', JSON.stringify(data, null, 2))\n    \n    // Validate required fields\n    if (!data.section) {\n      return NextResponse.json({ \n        error: 'Section is required' \n      }, { status: 400 })\n    }\n    \n    const config = await createHomepageConfigInDB(data)\n    console.log('API: Created config:', JSON.stringify(config, null, 2))\n    return NextResponse.json(config)\n  } catch (error) {\n    console.error('Error creating homepage config:', error)\n    console.error('Error details:', error instanceof Error ? error.message : String(error))\n    if (error instanceof Error && error.stack) {\n      console.error('Error stack:', error.stack)\n    }\n    return NextResponse.json({ \n      error: 'Failed to create homepage config', \n      details: error instanceof Error ? error.message : String(error) \n    }, { status: 500 })\n  }\n}\n\nexport async function PUT(request: Request) {\n  try {\n    const { section, ...data } = await request.json()\n    console.log('API: Updating homepage config for section:', section)\n    console.log('API: Update data:', JSON.stringify(data, null, 2))\n    \n    // Validate required fields\n    if (!section) {\n      return NextResponse.json({ \n        error: 'Section is required' \n      }, { status: 400 })\n    }\n    \n    const config = await updateHomepageConfigInDB(section, data)\n    \n    if (!config) {\n      console.log('API: No config found for section:', section)\n      return NextResponse.json({ error: 'Homepage config not found' }, { status: 404 })\n    }\n    \n    console.log('API: Updated config:', JSON.stringify(config, null, 2))\n    return NextResponse.json(config)\n  } catch (error) {\n    console.error('Error updating homepage config:', error)\n    console.error('Error details:', error instanceof Error ? error.message : String(error))\n    if (error instanceof Error && error.stack) {\n      console.error('Error stack:', error.stack)\n    }\n    return NextResponse.json({ \n      error: 'Failed to update homepage config', \n      details: error instanceof Error ? error.message : String(error) \n    }, { status: 500 })\n  }\n}\n","size_bytes":2678},"app/contacto/page.tsx":{"content":"import Image from \"next/image\"\nimport Footer from \"@/components/footer\"\n\nexport default function ContactoPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <main className=\"flex-grow bg-gray-100\">\n        {/* Hero Section */}\n        <section className=\"bg-purple-900 text-white py-8\">\n          <div className=\"container mx-auto px-4\">\n            <h1 className=\"text-4xl font-bold mb-4 text-center\">CONTACTO</h1>\n            <p className=\"text-xl max-w-3xl mx-auto text-center mb-8\">\n              Estamos para servirte, contáctanos para cualquier consulta o sugerencia\n            </p>\n          </div>\n        </section>\n\n        {/* Contact Info & Form */}\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n              {/* Contact Information */}\n              <div>\n                <h2 className=\"text-2xl font-bold mb-6 text-purple-900\">Información de Contacto</h2>\n\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-5 w-5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Dirección</h3>\n                      <p className=\"text-gray-600\">\n                        Madrid 62, PB  \n\n                        <br />\n                        Col. Tabacalera, C.P. 06030,\n                        <br />\n                        Ciudad de México.\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-5 w-5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                      >\n                        <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Teléfono</h3>\n                      <p className=\"text-gray-600\">\n                        +52 (55) 5036-0000\n                        <br />\n                        Lunes a Viernes: 9:00 - 18:00\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-5 w-5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                      >\n                        <path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\" />\n                        <path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Correo Electrónico</h3>\n                      <p className=\"text-gray-600\">\n                        contacto@canaldelcongreso.gob.mx\n                        <br />\n                        comentarios@canaldelcongreso.gob.mx\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-5 w-5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                      >\n                        <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Redes Sociales</h3>\n                      <div className=\"flex space-x-3 mt-2\">\n                        <a href=\"#\" className=\"bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700\">\n                          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path d=\"M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z\" />\n                          </svg>\n                        </a>\n                        <a href=\"#\" className=\"bg-blue-400 text-white p-2 rounded-full hover:bg-blue-500\">\n                          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.44 4.83c-.8.37-1.5.38-2.22.02.93-.56.98-.96 1.32-2.02-.88.52-1.86.9-2.9 1.1-.82-.88-2-1.43-3.3-1.43-2.5 0-4.55 2.04-4.55 4.54 0 .36.03.7.1 1.04-3.77-.2-7.12-2-9.36-4.75-.4.67-.6 1.45-.6 2.3 0 1.56.8 2.95 2 3.77-.74-.03-1.44-.23-2.05-.57v.06c0 2.2 1.56 4.03 3.64 4.44-.67.2-1.37.2-2.06.08.58 1.8 2.26 3.12 4.25 3.16C5.78 18.1 3.37 18.74 1 18.46c2 1.3 4.4 2.04 6.97 2.04 8.35 0 12.92-6.92 12.92-12.93 0-.2 0-.4-.02-.6.9-.63 1.96-1.22 2.56-2.14z\" />\n                          </svg>\n                        </a>\n                        <a href=\"#\" className=\"bg-pink-600 text-white p-2 rounded-full hover:bg-pink-700\">\n                          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path d=\"M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z\" />\n                          </svg>\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Map */}\n                <div className=\"mt-8\">\n                  <div className=\"bg-gray-300 rounded-lg h-64 relative overflow-hidden\">\n                    <Image\n                      src=\"/placeholder.svg?height=256&width=512&text=Mapa+de+ubicación\"\n                      alt=\"Mapa de ubicación\"\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Contact Form */}\n              <div>\n                <h2 className=\"text-2xl font-bold mb-6 text-purple-900\">Envíanos un Mensaje</h2>\n\n                <form className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label htmlFor=\"nombre\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Nombre\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"nombre\"\n                        name=\"nombre\"\n                        className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <label htmlFor=\"apellidos\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Apellidos\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"apellidos\"\n                        name=\"apellidos\"\n                        className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Correo Electrónico\n                    </label>\n                    <input\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"asunto\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Asunto\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"asunto\"\n                      name=\"asunto\"\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"mensaje\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Mensaje\n                    </label>\n                    <textarea\n                      id=\"mensaje\"\n                      name=\"mensaje\"\n                      rows={5}\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      required\n                    ></textarea>\n                  </div>\n\n                  <div>\n                    <button\n                      type=\"submit\"\n                      className=\"bg-purple-900 text-white px-6 py-3 rounded-md font-medium hover:bg-purple-800 transition-colors w-full md:w-auto\"\n                    >\n                      Enviar Mensaje\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* FAQ Section */}\n        <section className=\"py-12 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-2xl font-bold mb-8 text-center text-purple-900\">Preguntas Frecuentes</h2>\n\n            <div className=\"max-w-3xl mx-auto space-y-6\">\n              {[\n                {\n                  q: \"¿Cómo puedo ver la programación del Canal del Congreso?\",\n                  a: \"Puedes ver nuestra programación a través de nuestra señal de televisión, en nuestra página web o descargando nuestra aplicación móvil disponible para iOS y Android.\",\n                },\n                {\n                  q: \"¿Cómo puedo acceder a transmisiones anteriores?\",\n                  a: \"Todas nuestras transmisiones pasadas están disponibles en nuestro archivo digital en la sección de 'Transmisiones' de nuestra página web.\",\n                },\n                {\n                  q: \"¿Puedo utilizar el contenido del Canal del Congreso?\",\n                  a: \"Nuestro contenido es de acceso público, pero para su reproducción o uso con fines educativos o informativos, te pedimos citar la fuente correctamente.\",\n                },\n                {\n                  q: \"¿Cómo puedo proponer un tema para su cobertura?\",\n                  a: \"Puedes enviarnos tus sugerencias a través de este formulario de contacto o por correo electrónico a propuestas@canaldelcongreso.gob.mx.\",\n                },\n                {\n                  q: \"¿Ofrecen visitas guiadas al Canal del Congreso?\",\n                  a: \"Sí, ofrecemos visitas guiadas a grupos académicos y ciudadanos interesados en conocer nuestras instalaciones. Puedes solicitar una visita a través de nuestro formulario de contacto.\",\n                },\n              ].map((faq, index) => (\n                <div key={index} className=\"bg-gray-100 rounded-lg p-6\">\n                  <h3 className=\"font-bold text-lg mb-2\">{faq.q}</h3>\n                  <p className=\"text-gray-600\">{faq.a}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}\n","size_bytes":13846},"scripts/reset-user-passwords.js":{"content":"\nconst { Pool } = require('pg');\nconst bcrypt = require('bcryptjs');\n\nasync function resetPasswords() {\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL environment variable is not set');\n    process.exit(1);\n  }\n\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }\n  });\n\n  try {\n    console.log('Resetting user passwords...');\n    \n    // Reset admin password\n    const adminHash = await bcrypt.hash('admin123', 10);\n    await pool.query(\n      'UPDATE users SET password_hash = $1 WHERE username = $2',\n      [adminHash, 'admin']\n    );\n    console.log('✅ Admin password reset to: admin123');\n    \n    // Reset cmscanal password  \n    const cmscanalHash = await bcrypt.hash('hgqV&d3FJ!eDv#2Ji7v!kA', 10);\n    await pool.query(\n      'UPDATE users SET password_hash = $1 WHERE username = $2', \n      [cmscanalHash, 'cmscanal']\n    );\n    console.log('✅ Cmscanal password reset');\n    \n    // Verify the users exist and show their info\n    const result = await pool.query('SELECT username, role, is_active FROM users');\n    console.log('\\n📋 Current users:');\n    result.rows.forEach(user => {\n      console.log(`  - ${user.username} (${user.role}) - Active: ${user.is_active}`);\n    });\n    \n    console.log('\\n🔧 You can now login with:');\n    console.log('  Username: admin');\n    console.log('  Password: admin123');\n    \n  } catch (error) {\n    console.error('❌ Error resetting passwords:', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\nresetPasswords();\n","size_bytes":1620},"components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"components/SolicitudesCarousel.tsx":{"content":"'use client'\n\nimport { useCallback, useEffect, useState } from 'react'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline'\n\nconst solicitudesData = [\n  {\n    pregunta: \"¿Por qué no transmiten las sesiones completas del Senado?\",\n    respuesta: \"Le informamos que el Canal del Congreso transmite íntegramente todas las sesiones ordinarias y extraordinarias del Senado conforme a la programación oficial.\",\n    fecha: \"15 de agosto, 2024\"\n  },\n  {\n    pregunta: \"¿Pueden mejorar la calidad del audio en las transmisiones?\",\n    respuesta: \"Agradecemos su observación. Hemos implementado mejoras técnicas en nuestro sistema de audio para brindar una mejor experiencia a nuestra audiencia.\",\n    fecha: \"22 de agosto, 2024\"\n  },\n  {\n    pregunta: \"¿Por qué no hay subtítulos en las transmisiones?\",\n    respuesta: \"Estamos trabajando en implementar subtítulos automáticos para hacer más accesible nuestro contenido a personas con discapacidad auditiva.\",\n    fecha: \"1 de septiembre, 2024\"\n  },\n  {\n    pregunta: \"¿Cómo puedo reportar una falla técnica durante la transmisión?\",\n    respuesta: \"Puede contactarnos a través de nuestro formulario de contacto o enviando un mensaje directo a nuestras redes sociales oficiales durante la transmisión.\",\n    fecha: \"10 de septiembre, 2024\"\n  },\n  {\n    pregunta: \"¿Tienen programación especial para eventos legislativos importantes?\",\n    respuesta: \"Sí, programamos cobertura especial para sesiones extraordinarias, comparecencias y eventos legislativos de alta relevancia nacional.\",\n    fecha: \"18 de septiembre, 2024\"\n  }\n]\n\nexport default function SolicitudesCarousel() {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ \n    loop: true,\n    align: 'start',\n    slidesToScroll: 1,\n    breakpoints: {\n      '(min-width: 768px)': { slidesToScroll: 2 },\n      '(min-width: 1024px)': { slidesToScroll: 3 }\n    }\n  })\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(false)\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(false)\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev()\n  }, [emblaApi])\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext()\n  }, [emblaApi])\n\n  const onSelect = useCallback((emblaApi: any) => {\n    setPrevBtnDisabled(!emblaApi.canScrollPrev())\n    setNextBtnDisabled(!emblaApi.canScrollNext())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onSelect])\n\n  return (\n    <div className=\"relative\">\n      {/* Navigation Buttons */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <button\n          className=\"flex items-center justify-center w-10 h-10 rounded-full bg-purple-600 hover:bg-purple-700 text-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={scrollPrev}\n          disabled={prevBtnDisabled}\n        >\n          <ChevronLeftIcon className=\"w-5 h-5\" />\n        </button>\n        <button\n          className=\"flex items-center justify-center w-10 h-10 rounded-full bg-purple-600 hover:bg-purple-700 text-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={scrollNext}\n          disabled={nextBtnDisabled}\n        >\n          <ChevronRightIcon className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Carousel Container */}\n      <div className=\"overflow-hidden\" ref={emblaRef}>\n        <div className=\"flex\">\n          {solicitudesData.map((item, i) => (\n            <div key={i} className=\"flex-[0_0_100%] md:flex-[0_0_50%] lg:flex-[0_0_33.333%] pl-6\">\n              <div className=\"bg-white shadow-md p-0 overflow-hidden mr-6\">\n                <div className=\"bg-[#5b199a] text-white px-6 py-3 text-sm font-extrabold tracking-wide\">\n                  PREGUNTA:\n                </div>\n                <div className=\"p-6\">\n                  <p className=\"text-[14px] font-semibold text-gray-700 mb-3\">\n                    {item.pregunta}\n                  </p>\n                  <div className=\"bg-gray-100 text-white px-4 py-2 text-xs font-extrabold tracking-wide mb-3\">\n                    <span className=\"text-gray-600\">RESPUESTA:</span>\n                  </div>\n                  <p className=\"text-[13px] text-[#5b199a] leading-5 mb-4\">\n                    {item.respuesta}\n                  </p>\n                  <div className=\"text-right\">\n                    <span className=\"text-xs text-gray-500 font-medium\">\n                      {item.fecha}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Dots Indicator */}\n      <div className=\"flex justify-center mt-6 space-x-2\">\n        {solicitudesData.map((_, i) => (\n          <button\n            key={i}\n            className={`w-2 h-2 rounded-full transition-colors ${\n              i === 0 ? 'bg-purple-600' : 'bg-gray-300 hover:bg-gray-400'\n            }`}\n            onClick={() => emblaApi?.scrollTo(i)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}","size_bytes":5231},"scripts/fix-users-table.js":{"content":"\nconst { Pool } = require('pg');\nconst bcrypt = require('bcryptjs');\n\nasync function fixUsersTable() {\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL environment variable is not set');\n    process.exit(1);\n  }\n\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }\n  });\n\n  try {\n    console.log('Fixing users table schema...');\n    \n    // Check if password_hash column exists\n    const columnCheck = await pool.query(`\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_name = 'users' \n      AND column_name = 'password_hash'\n    `);\n    \n    if (columnCheck.rows.length === 0) {\n      console.log('Adding password_hash column...');\n      await pool.query('ALTER TABLE users ADD COLUMN password_hash VARCHAR(255)');\n      \n      // Get all users with their current passwords\n      const users = await pool.query('SELECT id, username, password FROM users');\n      \n      console.log('Migrating passwords to bcrypt hashes...');\n      for (const user of users.rows) {\n        if (user.password) {\n          // If password looks like it's already hashed (starts with $2), keep it\n          // Otherwise, hash it with bcrypt\n          let hashedPassword;\n          if (user.password.startsWith('$2')) {\n            hashedPassword = user.password;\n          } else {\n            hashedPassword = await bcrypt.hash(user.password, 10);\n          }\n          \n          await pool.query(\n            'UPDATE users SET password_hash = $1 WHERE id = $2',\n            [hashedPassword, user.id]\n          );\n          console.log(`✅ Updated password hash for user: ${user.username}`);\n        }\n      }\n      \n      // Make password_hash NOT NULL\n      await pool.query('ALTER TABLE users ALTER COLUMN password_hash SET NOT NULL');\n      \n      // Drop the old password column\n      await pool.query('ALTER TABLE users DROP COLUMN password');\n      \n      console.log('✅ Users table schema fixed successfully!');\n    } else {\n      console.log('password_hash column already exists');\n    }\n    \n    // Verify the final state\n    const finalUsers = await pool.query('SELECT username, role, is_active FROM users');\n    console.log('\\n📋 Final users:');\n    finalUsers.rows.forEach(user => {\n      console.log(`  - ${user.username} (${user.role}) - Active: ${user.is_active}`);\n    });\n    \n    console.log('\\n🔧 You can now login with:');\n    console.log('  Username: admin');\n    console.log('  Password: admin123');\n    \n  } catch (error) {\n    console.error('❌ Error fixing users table:', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\nfixUsersTable();\n","size_bytes":2733},"components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-2xl translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3845},"app/transparencia/compromisos/estructura/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\nimport Image from \"next/image\"\nimport { MobileMenuProvider } from \"@/components/mobile-menu-context\"\n\nexport default function EstructuraPage() {\n  return (\n    <MobileMenuProvider>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">Estructura y Presupuesto</h1>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-4\">Estructura Organizacional</h2>\n            <div className=\"bg-gray-100 p-4 rounded-lg\">\n              <Image\n                src=\"/hierarchical-org-chart.png\"\n                alt=\"Estructura Organizacional\"\n                width={600}\n                height={400}\n                className=\"w-full h-auto\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-4\">Presupuesto Anual</h2>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full bg-white border border-gray-300\">\n                <thead>\n                  <tr>\n                    <th className=\"py-2 px-4 border-b\">Año</th>\n                    <th className=\"py-2 px-4 border-b\">Presupuesto Asignado</th>\n                    <th className=\"py-2 px-4 border-b\">Detalle</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className=\"py-2 px-4 border-b\">2023</td>\n                    <td className=\"py-2 px-4 border-b\">$XXX,XXX,XXX.00</td>\n                    <td className=\"py-2 px-4 border-b\">\n                      <a href=\"#\" className=\"text-blue-600 hover:underline\">\n                        Ver detalle\n                      </a>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-2 px-4 border-b\">2022</td>\n                    <td className=\"py-2 px-4 border-b\">$XXX,XXX,XXX.00</td>\n                    <td className=\"py-2 px-4 border-b\">\n                      <a href=\"#\" className=\"text-blue-600 hover:underline\">\n                        Ver detalle\n                      </a>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </MobileMenuProvider>\n  )\n}\n","size_bytes":2560},"app/noticias/page.tsx":{"content":"import Link from \"next/link\";\nimport Image from \"next/image\";\nimport SocialBar from \"@/components/social-bar\";\nimport Footer from \"@/components/footer\";\nimport NewsCarousel from \"@/components/news-carousel\";\nimport NewsSubmenu from \"@/components/news-submenu\";\nimport ChannelBar from \"@/components/channel-bar\";\nimport VideoCarousel from \"@/components/video-carousel\";\nimport NewsGrid from \"@/components/news-grid\";\nimport { getNewsFromDB } from \"@/lib/api-database\";\n\ninterface NewsItem {\n  id: string;\n  title: string;\n  summary: string;\n  content: string;\n  imageUrl: string;\n  category?: string;\n  publishedAt: Date;\n  createdAt: Date;\n  status?: string;\n  isFeatured?: boolean;\n  featuredRank?: number | null;\n}\n\ninterface VideoNewsItem {\n  id: string;\n  title: string;\n  description: string;\n  thumbnailUrl: string;\n  videoUrl: string;\n  createdAt: Date;\n}\n\nasync function getVideoNewsFromDB(): Promise<VideoNewsItem[]> {\n  try {\n    const response = await fetch(\"/api/video-news/all\", {\n      cache: \"no-store\",\n    });\n\n    if (!response.ok) {\n      console.error(\"Failed to fetch video news:\", response.statusText);\n      return [];\n    }\n\n    const data = await response.json();\n    console.log(\"News page: Raw video news data:\", data);\n\n    const mappedData = data.map((item: any) => ({\n      id: item.id,\n      title: item.title,\n      description: item.description || \"\",\n      thumbnailUrl: item.thumbnailUrl || \"/placeholder.svg\",\n      videoUrl: item.videoUrl || \"#\",\n      createdAt: new Date(item.createdAt),\n    }));\n\n    console.log(\"News page: Mapped video news data:\", mappedData);\n    return mappedData;\n  } catch (error) {\n    console.error(\"Error fetching video news:\", error);\n    return [];\n  }\n}\n\n// Force dynamic rendering and disable caching\nexport const dynamic = \"force-dynamic\";\nexport const revalidate = 0;\n\nfunction createSlug(title: string): string {\n  return title\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/[^a-z0-9\\s]/g, \"\")\n    .replace(/\\s+/g, \"-\")\n    .replace(/^-+|-+$/g, \"\");\n}\n\nexport default async function NewsPage() {\n  // Automatically publish any scheduled news that should now be live\n  try {\n    await fetch(\"/api/news/publish-scheduled\", {\n      method: \"POST\",\n      cache: \"no-store\",\n    });\n  } catch (error) {\n    console.error(\"Error auto-publishing scheduled news:\", error);\n  }\n\n  // Fetch news from API route to avoid client-side database imports\n  let newsItems: NewsItem[] = [];\n  let featuredNews: NewsItem[] = [];\n  let videoItems: VideoNewsItem[] = [];\n\n  try {\n    // Fetch all news (no need for separate featured news fetch since we're not displaying a featured section)\n    const response = await fetch(\"/api/news/all\", {\n      cache: \"no-store\",\n    });\n\n    if (response.ok) {\n      const allNews = await response.json();\n      const now = new Date();\n      \n      // Filter to only show published news with publishedAt <= current date\n      // Include all published news (including previously featured ones) in carousel/grid\n      newsItems = (allNews?.news || []).filter((item: NewsItem) => {\n        const publishedDate = new Date(item.publishedAt);\n        return item.status === 'published' && publishedDate <= now;\n      }).sort((a: NewsItem, b: NewsItem) => {\n        // Sort by publishedAt date, most recent first\n        return new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime();\n      });\n\n      console.log(\"News page: Final newsItems for carousel/grid:\", newsItems.length, \"items\");\n    } else {\n      console.error(\n        \"Failed to fetch news:\",\n        response.status,\n        response.statusText,\n      );\n      newsItems = [];\n    }\n  } catch (error) {\n    console.error(\"Failed to load news:\", error);\n    newsItems = [];\n    featuredNews = [];\n  }\n\n  try {\n    // Fetch video news items\n    videoItems = await getVideoNewsFromDB();\n    console.log(\"News page: Loaded\", videoItems.length, \"video news items\");\n    console.log(\n      \"News page: Video items details:\",\n      videoItems.map((item) => ({\n        id: item.id,\n        title: item.title?.substring(0, 30) + \"...\",\n        thumbnailUrl: item.thumbnailUrl,\n        hasImage: !!item.thumbnailUrl,\n      })),\n    );\n  } catch (error) {\n    console.error(\"Error loading video news:\", error);\n    videoItems = [];\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-white\">\n      <main className=\"flex-grow bg-[url('/images/light-hexagon-pattern.png')] bg-cover\">\n        <ChannelBar />\n        <NewsSubmenu />\n\n\n        {newsItems.length > 0 && (\n          <NewsCarousel\n            newsItems={newsItems.slice(0, 4).map((item) => ({\n              ...item,\n              slug: createSlug(item.title),\n              category: item.category || \"General\",\n              date: new Date(item.publishedAt || item.createdAt)\n                .toISOString()\n                .split(\"T\")[0],\n            }))}\n          />\n        )}\n\n        {/* News Grid */}\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4\">\n            <NewsGrid newsItems={newsItems.slice(0, 6)} hideSearch={true} />\n          </div>\n        </section>\n\n        {/* Ver más link */}\n        {newsItems && newsItems.length > 0 && (\n          <section className=\"py-8\">\n            <div className=\"container mx-auto px-4\">\n              <div className=\"flex justify-center\">\n                <Link\n                  href=\"/noticias/todas\"\n                  className=\"text-[#e91e63] font-medium hover:text-[#f06292] transition-colors flex flex-col items-center\"\n                >\n                  Ver más\n                  <svg\n                    className=\"w-8 h-8 mt-1 text-[#e91e63]\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"currentColor\"\n                  >\n                    <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"></path>\n                  </svg>\n                </Link>\n              </div>\n            </div>\n          </section>\n        )}\n\n        {/* Video Carousel Section - Updated with light pattern background */}\n        {videoItems.length > 0 && (\n          <section className=\"py-12 bg-contain bg-repeat-y\">\n            <div className=\"container mx-auto px-4 py-8\">\n              <h2 className=\"text-2xl font-bold text-center mb-8 text-gray-800\">\n                Videos Destacados\n              </h2>\n              <VideoCarousel\n                videos={videoItems.map((item) => ({\n                  id: parseInt(item.id),\n                  title: item.title,\n                  imageUrl: item.thumbnailUrl,\n                  videoUrl: item.videoUrl,\n                  playlistUrl: item.videoUrl?.includes(\"playlist?list=\")\n                    ? item.videoUrl\n                    : undefined,\n                }))}\n              />\n            </div>\n          </section>\n        )}\n      </main>\n\n      {/* Footer */}\n      <Footer />\n\n      {/* Social Bar */}\n      <SocialBar />\n    </div>\n  );\n}\n","size_bytes":6997},"MANUAL_USUARIO.md":{"content":"# Manual de Usuario - Radio Congreso\n## Plataforma Digital de Transmisión Legislativa\n\n### Versión 1.0\n### Fecha: Julio 2025\n\n---\n\n## Tabla de Contenidos\n\n1. [Introducción](#introducción)\n2. [Acceso al Sistema](#acceso-al-sistema)\n3. [Navegación General](#navegación-general)\n4. [Sección de Noticias](#sección-de-noticias)\n5. [Radio Congreso](#radio-congreso)\n6. [Transmisiones en Vivo](#transmisiones-en-vivo)\n7. [Portal de Transparencia](#portal-de-transparencia)\n8. [Programación](#programación)\n9. [Panel de Administración](#panel-de-administración)\n10. [Solución de Problemas](#solución-de-problemas)\n11. [Contacto y Soporte](#contacto-y-soporte)\n\n---\n\n## Introducción\n\n### ¿Qué es Radio Congreso?\n\nRadio Congreso es una plataforma digital diseñada para la transmisión de contenido legislativo del Congreso de la Unión de México. La plataforma ofrece:\n\n- **Transmisión en vivo** de sesiones legislativas por canales 45.1, 45.2 y 45.3\n- **Radio en línea** con programas especializados\n- **Portal de noticias** legislativas actualizadas\n- **Portal de transparencia** con información del Congreso\n- **Programación televisiva** de los canales del Congreso\n\n### Características Principales\n\n- ✅ Interfaz responsive (móviles, tablets y escritorio)\n- ✅ Transmisión de audio y video en tiempo real vía HLS\n- ✅ Sistema de gestión de contenido\n- ✅ Portal de transparencia legislativa\n- ✅ Búsqueda de legisladores\n- ✅ Panel de administración completo\n\n---\n\n## Acceso al Sistema\n\n### Para Usuarios Generales\n\n1. **Acceso Web**: Ingrese a la URL principal de la plataforma\n2. **Navegación libre**: No requiere registro para consultar contenido público\n3. **Funciones disponibles**:\n   - Ver noticias\n   - Escuchar radio en vivo\n   - Ver transmisiones en vivo\n   - Consultar transparencia\n   - Buscar legisladores\n\n### Para Administradores\n\n1. **Página de acceso**: `/login`\n2. **Credenciales**: Usuario y contraseña del sistema\n3. **Panel administrativo**: Acceso a `/admin` después del login\n\n---\n\n## Navegación General\n\n### Menú Principal\n\n#### **Inicio** (`/`)\n- Página principal con noticias destacadas\n- Carrusel de transmisiones en vivo\n- Acceso a secciones principales\n\n#### **Noticias** (`/noticias`)\n- `/noticias` - Página principal de noticias\n- `/noticias/todas` - Todas las noticias\n- `/noticias/categorias/[categoria]` - Noticias por categoría (política, economía, sociedad)\n- `/noticias/en-vivo` - Video noticias en vivo\n- `/noticias/[id]` - Artículo individual\n\n#### **Radio** (`/radio`)\n- Radio en vivo con streaming de audio\n- Programas disponibles:\n  - Entrevistas\n  - Sitio Abierto\n  - Noticias del Congreso\n- `/radio/legisladores` - Directorio de legisladores\n- `/radio/legisladores/busqueda` - Búsqueda avanzada\n\n#### **Transmisiones** (`/transmisiones`)\n- Canales en vivo: 45.1, 45.2, 45.3\n- Streaming de video con HLS\n\n#### **Transparencia** (`/transparencia`)\n- `/transparencia/focalizada` - Transparencia focalizada\n- `/transparencia/datos-abiertos` - Datos abiertos\n- `/transparencia/compromisos` - Compromisos institucionales\n- `/transparencia/plataforma-nacional` - Plataforma nacional\n\n#### **Programación** (`/programacion`)\n- Parrilla de programación televisiva\n- `/programacion/programas` - Lista de programas\n\n#### **Contacto** (`/contacto`)\n- Información de contacto\n- Formulario de contacto\n\n---\n\n## Sección de Noticias\n\n### Visualización de Noticias\n\n#### **Página Principal** (`/noticias`)\n- Grid de noticias con imágenes\n- Filtros por categoría\n- Navegación paginada\n\n#### **Categorías Disponibles**\n- **Política**: Noticias políticas y legislativas\n- **Economía**: Temas económicos y presupuestales\n- **Sociedad**: Impacto social de decisiones legislativas\n\n#### **Artículo Individual** (`/noticias/[id]`)\n- Título y contenido completo\n- Imagen destacada\n- Fecha de publicación\n- Categoría asignada\n\n#### **Video Noticias** (`/noticias/en-vivo`)\n- Videos de noticias\n- Reproductor integrado\n- Miniaturas y descripciones\n\n### Navegación\n- Carrusel de noticias destacadas\n- Grid de noticias recientes\n- Filtrado por categorías\n\n---\n\n## Radio Congreso\n\n### Funciones Principales\n\n#### **Reproductor de Radio** (`/radio`)\n- Stream de audio en vivo\n- URL de streaming: Radio Congreso\n- Controles de play/pause/volumen\n- Información del programa actual\n\n#### **Canales Disponibles**\n- **Radio Congreso**: Canal principal\n- **Canal 45.1**: Cámara de Diputados  \n- **Canal 45.2**: Cámara de Senadores\n- **Canal 45.3**: Canal Institucional\n\n#### **Programas de Radio**\nLos programas se acceden vía `/radio/[programSlug]`:\n\n##### **Entrevistas** (`/radio/entrevistas`)\n- Entrevistas con legisladores y expertos\n\n##### **Sitio Abierto** (`/radio/sitio-abierto`)\n- Programa de participación ciudadana\n\n##### **Noticias del Congreso** (`/radio/noticias`)\n- Resumen informativo legislativo\n\n### Navegación de Programas\n- Cada programa tiene su página individual\n- Carrusel de programas en página principal\n- Logos y descripciones de programas\n\n---\n\n## Transmisiones en Vivo\n\n### Acceso (`/transmisiones`)\n\n#### **Canales de Transmisión**\n- **Canal 45.1**: Cámara de Diputados\n- **Canal 45.2**: Cámara de Senadores  \n- **Canal 45.3**: Canal Institucional\n\n#### **Reproductor de Video**\n- Streaming HLS en tiempo real\n- Controles de volumen y pantalla completa\n- Miniaturas de canales\n- Estado: EN VIVO o EN RECESO\n\n#### **Carrusel de Transmisiones**\n- Actualización automática cada 5 segundos\n- Estado en tiempo real de transmisiones\n- Navegación entre canales\n\n---\n\n## Portal de Transparencia\n\n### Secciones Principales\n\n#### **Transparencia Focalizada** (`/transparencia/focalizada`)\n- **Tu Congreso** (`/transparencia/focalizada/tu-congreso`)\n- **Representantes** (`/transparencia/focalizada/representantes`)  \n- **Ciudadanía** (`/transparencia/focalizada/ciudadania`)\n\n#### **Datos Abiertos** (`/transparencia/datos-abiertos`)\n- Portal de acceso a datos públicos\n\n#### **Compromisos** (`/transparencia/compromisos`)\n- **Estructura** (`/transparencia/compromisos/estructura`)\n- **Información** (`/transparencia/compromisos/informacion`)\n- **Normatividad** (`/transparencia/compromisos/normatividad`)\n- **Tu Canal** (`/transparencia/compromisos/tu-canal`)\n\n#### **Plataforma Nacional** (`/transparencia/plataforma-nacional`)\n- Información sobre la Plataforma Nacional de Transparencia\n\n### Búsqueda de Legisladores\n\n#### **Directorio** (`/radio/legisladores`)\n- Lista completa de diputados y senadores\n- Información básica: nombre, cargo, partido, estado\n\n#### **Búsqueda Avanzada** (`/radio/legisladores/busqueda`)\n- Filtros por:\n  - Nombre\n  - Estado\n  - Partido político\n  - Tipo (Diputado/Senador)\n\n#### **Perfil Individual** (`/radio/legisladores/[id]`)\n- Información detallada del legislador\n- Fotografía\n- Datos de contacto\n\n---\n\n## Panel de Administración\n\n### Acceso (`/admin`)\n\n#### **Inicio de Sesión** (`/login`)\n- Formulario de usuario y contraseña\n- Redirección automática al panel\n\n#### **Dashboard Principal** (`/admin`)\n- Resumen del sistema\n- Accesos rápidos a funciones principales\n\n### Gestión de Contenido\n\n#### **Administración de Noticias** (`/admin/news`)\n- Lista de todas las noticias\n- Crear/editar/eliminar noticias\n- Estados: borrador, publicado\n- Categorías: política, economía, sociedad\n- Editor de texto enriquecido\n- Subida de imágenes\n\n#### **Video Noticias** (`/admin/video-news`)\n- Gestión de videos de noticias\n- Subida de archivos de video\n- Miniaturas y metadatos\n\n#### **Transmisiones en Vivo** (`/admin/live-streams`)\n- Configuración de streams\n- Estados: en vivo, en receso, fuera de línea\n- URLs de streaming HLS\n- Miniaturas de canales\n\n#### **Programas de TV** (`/admin/programs`)\n- Gestión de programas televisivos\n- Información y logos\n- Reordenamiento de programas\n\n#### **Programas Destacados** (`/admin/featured-programs`)\n- Configuración de programas destacados en homepage\n\n### Administración de Radio\n\n#### **Panel de Radio** (`/admin/radio`)\n- Configuraciones generales de radio\n\n#### **Programas de Radio** (`/admin/radio-programs`)\n- Crear/editar programas de radio\n- Logos y descripciones\n- URLs y slugs\n\n#### **Episodios** (`/admin/radio-episodes`)\n- Gestión de episodios de radio\n- Subida de archivos de audio\n- Metadatos y descripciones\n\n#### **Navegación de Radio** (`/admin/radio-navigation`)\n- Configuración del menú de radio\n- Enlaces y estructura\n\n#### **Radio en Vivo** (`/admin/radio-live`)\n- Configuración de streaming en vivo\n- URLs de transmisión\n\n### Datos Legislativos\n\n#### **Legisladores** (`/admin/legislators`)\n- Base de datos de legisladores\n- Información personal y política\n- Fotografías y contactos\n\n#### **Órganos** (`/admin/organs`)\n- Órganos del congreso\n- Logos e información\n\n#### **Grupos Parlamentarios** (`/admin/parliamentary-groups`)\n- Gestión de partidos políticos\n\n### Configuración del Sistema\n\n#### **Canales de TV** (`/admin/channels`)\n- Configuración de canales televisivos\n- Logos y metadatos\n\n#### **Configuración de Homepage** (`/admin/homepage-config`)\n- Personalización de página principal\n- Imágenes hero y secciones\n\n#### **Base de Datos** (`/admin/database-config`)\n- Herramientas de base de datos\n- Inicialización de tablas\n- Pruebas de conexión\n\n#### **Configuración SMTP** (`/admin/smtp-config`)\n- Configuración de servidor de email\n- Pruebas de envío\n\n#### **Usuarios** (`/admin/users`)\n- Gestión de usuarios administrativos\n- Roles y permisos\n\n#### **Sitemap** (`/admin/sitemap`)\n- Gestión de sitemap para SEO\n- Regeneración automática\n\n### Subida de Archivos\n\n#### **Subida Masiva**\n- Importación CSV para noticias\n- Carga masiva de episodios\n- Subida de programación (Excel)\n\n#### **Gestión de Archivos**\n- Servidor de archivos en `/api/files`\n- Subida de imágenes, audio y video\n- Validación de formatos\n\n---\n\n## Programación\n\n### Programación de TV (`/programacion`)\n\n#### **Parrilla de Programación**\n- Horarios de transmisión por canal\n- Información de programas\n- Navegación por días\n\n#### **Programas Individuales** (`/programacion/programas/[id]`)\n- Información detallada de cada programa\n- Horarios específicos\n\n#### **Subida de Programación** (Admin)\n- Importación vía archivo Excel\n- Actualización masiva de horarios\n\n---\n\n## Solución de Problemas\n\n### Problemas Comunes\n\n#### **No se reproduce audio/video**\n1. Verificar conexión a internet\n2. Actualizar navegador web\n3. Verificar que JavaScript esté habilitado\n4. Probar en modo incógnito\n\n#### **Página no carga**\n1. Refrescar la página (F5)\n2. Limpiar caché del navegador\n3. Verificar conexión de red\n\n#### **Problemas de admin**\n1. Verificar credenciales de login\n2. Contactar administrador del sistema\n\n### Compatibilidad\n\n#### **Navegadores Soportados**\n- Chrome 90+\n- Firefox 88+\n- Safari 14+\n- Edge 90+\n\n#### **Dispositivos Móviles**\n- iOS Safari 14+\n- Android Chrome 90+\n- Diseño responsive optimizado\n\n---\n\n## Características Técnicas\n\n### Streaming\n- **Audio**: Streaming HLS para radio\n- **Video**: Streaming HLS para transmisiones en vivo\n- **Actualización**: Cada 5 segundos para estados de transmisión\n\n### Base de Datos\n- **Sistema**: PostgreSQL\n- **Tablas principales**: news, live_streams, radio_programs, legislators, organs\n\n### APIs Disponibles\n- `/api/news` - Gestión de noticias\n- `/api/live-streams` - Transmisiones en vivo\n- `/api/radio/programs` - Programas de radio\n- `/api/legislators` - Información de legisladores\n- `/api/organs` - Órganos del congreso\n\n---\n\n## Contacto y Soporte\n\n### Información de Contacto\n\n#### **Formulario de Contacto** (`/contacto`)\n- Formulario web disponible en la plataforma\n- Campos: nombre, email, mensaje\n\n#### **Soporte Técnico**\n- Contacto a través del formulario web\n- Reportar problemas técnicos\n\n### Reportar Problemas\n\n#### **Información a Incluir**\n1. Descripción del problema\n2. Navegador utilizado\n3. Pasos para reproducir el error\n4. Capturas de pantalla si es posible\n\n---\n\n## Términos de Uso\n\n### Uso Permitido\n- Consulta de información pública\n- Acceso a transmisiones legislativas\n- Uso educativo e informativo\n\n### Responsabilidades\n- Uso responsable de la plataforma\n- No interferir con el funcionamiento del sistema\n- Respetar los derechos de autor del contenido\n\n---\n\n**© 2025 Radio Congreso - Congreso de la Unión de México**\n\n*Este manual describe las funcionalidades reales disponibles en la plataforma Radio Congreso.*","size_bytes":12488},"app/layout.tsx":{"content":"import type React from \"react\"\nimport \"./globals.css\"\nimport \"../styles/rich-text.css\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport Script from \"next/script\"\nimport SocialBar from \"@/components/social-bar\"\nimport AccessibilityButton from \"@/components/accessibility-button\"\nimport Navbar from \"@/components/navbar\"\nimport { MobileMenuProvider } from \"@/components/mobile-menu-context\"\nimport ConditionalComponents from \"@/components/conditional-components\"\nimport { FloatingPlayerProvider } from \"@/components/floating-player-context\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { ThemeProvider } from \"@/components/theme-provider\"\nimport AutoPublishScheduler from \"@/components/auto-publish-scheduler\"\nimport { ErrorBoundary } from \"@/components/error-boundary\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata: Metadata = {\n  title: \"Canal del Congreso\",\n  description: \"Canal oficial del Congreso de México\",\n  icons: {\n    icon: [\n      {\n        url: '/favicon.png',\n        type: 'image/png',\n      }\n    ]\n  },\n    generator: 'v0.dev',\n  metadataBase: new URL(process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'),\n  alternates: {\n    canonical: '/',\n  },\n  other: {\n    'msvalidate.01': 'your-bing-webmaster-verification-code',\n    'google-site-verification': 'your-google-search-console-verification-code'\n  }\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"es\" suppressHydrationWarning>\n      <head>\n        <link rel=\"icon\" href=\"/favicon.png\" sizes=\"any\" />\n        {/* Analytics - Only in production and client-side */}\n        {process.env.NODE_ENV === 'production' && (\n          <script\n            dangerouslySetInnerHTML={{\n              __html: `\n                if (typeof window !== 'undefined') {\n                  // Disable console in production\n                  console.log = console.warn = console.error = function() {};\n                }\n              `,\n            }}\n          />\n        )}\n        <script async src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n      </head>\n      <body className={inter.className} suppressHydrationWarning>\n          <ThemeProvider \n            attribute=\"class\" \n            defaultTheme=\"light\" \n            enableSystem={false}\n            disableTransitionOnChange\n          >\n            <MobileMenuProvider>\n              <FloatingPlayerProvider>\n                <AutoPublishScheduler />\n                <ConditionalComponents />\n                <ErrorBoundary>\n                  {children}\n                </ErrorBoundary>\n                <Toaster />\n              </FloatingPlayerProvider>\n            </MobileMenuProvider>\n          </ThemeProvider>\n          \n          {/* Inklusion Accessibility Tracking Pixel */}\n          <Script\n            id=\"inklusion-pixel\"\n            strategy=\"afterInteractive\"\n            dangerouslySetInnerHTML={{\n              __html: `\n                (function() {\n                    var i7e_e = document.createElement(\"script\"),\n                        i7e_t = window.location.host,\n                        i7e_n = \"es-US\";\n                  \n                    i7e_e.type = \"text/javascript\", \n                    i7e_t = \"canaldelcongreso.inklusion.incluirt.com\",\n                    i7e_n = \"es-US\",\n                    i7e_e.src = (\"https:\" == document.location.protocol ? \"https://\" : \"http://\") + i7e_t + \"/inklusion/js/frameworks_initializer.js?lng=\" + i7e_n, \n                    document.getElementsByTagName(\"head\")[0].appendChild(i7e_e), \n                    i7e_e.src;\n                    i7e_tab = true;\n                    i7e_border = \"#000000\"; //color de borde\n                    i7e_bg = \"#483285\"; //color de fondo del texto de Inklusion \n                    setTimeout(function(){\n                        var i7e_style = document.createElement(\"style\");\n                        i7e_style.type = \"text/css\";\n                        i7e_style.id = \"inklu_style_script\";\n                        i7e_style.append(\"#_inklusion__tab_ { z-index: 99999 !important } \");\n                        document.body.appendChild(i7e_style);\n                    },1500);\n                })()\n              `,\n            }}\n          />\n        </body>\n    </html>\n  )\n}","size_bytes":4359},"components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"app/admin/radio-live/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Radio, Users, Wifi, WifiOff, Save, TestTube, RefreshCw } from \"lucide-react\"\n\ninterface LiveRadioConfig {\n  streamUrl: string\n  isLive: boolean\n  currentProgram: string\n  description: string\n  listeners: number\n  quality: 'low' | 'medium' | 'high'\n  fallbackUrl?: string\n  enableAutoReconnect: boolean\n  maxRetries: number\n}\n\nexport default function RadioLiveAdmin() {\n  const [config, setConfig] = useState<LiveRadioConfig>({\n    streamUrl: \"https://ccstreaming.packet.mx/LiveApp/streams/Radio_kd5oiNTTWO0gEOFc23dr762145.m3u8\",\n    isLive: false,\n    currentProgram: \"Transmisión en vivo\",\n    description: \"Escuche la señal en vivo de Radio Congreso\",\n    listeners: 0,\n    quality: 'high',\n    fallbackUrl: \"\",\n    enableAutoReconnect: true,\n    maxRetries: 3\n  })\n  \n  const [isLoading, setIsLoading] = useState(false)\n  const [isTesting, setIsTesting] = useState(false)\n  const [testResult, setTestResult] = useState<{ success: boolean; message: string } | null>(null)\n  const [streamStatus, setStreamStatus] = useState<{ connected: boolean; error?: string } | null>(null)\n\n  useEffect(() => {\n    loadConfig()\n    checkStreamStatus()\n    \n    // Check stream status every 30 seconds\n    const interval = setInterval(checkStreamStatus, 30000)\n    return () => clearInterval(interval)\n  }, [])\n\n  const loadConfig = async () => {\n    try {\n      const response = await fetch('/api/radio/live-config')\n      if (response.ok) {\n        const data = await response.json()\n        setConfig(data)\n      }\n    } catch (error) {\n      console.error('Error loading live radio config:', error)\n    }\n  }\n\n  const checkStreamStatus = async () => {\n    try {\n      const response = await fetch('/api/radio/stream-status')\n      if (response.ok) {\n        const status = await response.json()\n        setStreamStatus(status)\n        if (status.connected) {\n          setConfig(prev => ({ ...prev, listeners: status.listeners || 0 }))\n        }\n      }\n    } catch (error) {\n      console.error('Error checking stream status:', error)\n      setStreamStatus({ connected: false, error: 'Unable to check stream status' })\n    }\n  }\n\n  const testStream = async () => {\n    setIsTesting(true)\n    setTestResult(null)\n    \n    try {\n      const response = await fetch('/api/radio/test-stream', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ streamUrl: config.streamUrl })\n      })\n      \n      const result = await response.json()\n      setTestResult(result)\n    } catch (error) {\n      setTestResult({ \n        success: false, \n        message: 'Error testing stream: ' + (error instanceof Error ? error.message : 'Unknown error') \n      })\n    } finally {\n      setIsTesting(false)\n    }\n  }\n\n  const saveConfig = async () => {\n    setIsLoading(true)\n    \n    try {\n      const response = await fetch('/api/radio/live-config', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(config)\n      })\n      \n      if (response.ok) {\n        alert('Configuración guardada exitosamente')\n        await checkStreamStatus()\n      } else {\n        throw new Error('Failed to save configuration')\n      }\n    } catch (error) {\n      console.error('Error saving config:', error)\n      alert('Error al guardar la configuración')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const toggleLiveStatus = async () => {\n    const newStatus = !config.isLive\n    setConfig(prev => ({ ...prev, isLive: newStatus }))\n    \n    try {\n      await fetch('/api/radio/live-status', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isLive: newStatus })\n      })\n    } catch (error) {\n      console.error('Error updating live status:', error)\n      // Revert the change if API call failed\n      setConfig(prev => ({ ...prev, isLive: !newStatus }))\n    }\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Radio en Vivo</h1>\n          <p className=\"text-gray-600\">Configure la transmisión en vivo de Radio Congreso</p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={checkStreamStatus}\n            disabled={isLoading}\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Actualizar Estado\n          </Button>\n          \n          <Button\n            onClick={saveConfig}\n            disabled={isLoading}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            Guardar Configuración\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Stream Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {streamStatus?.connected ? (\n                <Wifi className=\"h-5 w-5 text-green-500\" />\n              ) : (\n                <WifiOff className=\"h-5 w-5 text-red-500\" />\n              )}\n              Estado de la Transmisión\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"live-status\">Transmisión en Vivo</Label>\n              <Switch\n                id=\"live-status\"\n                checked={config.isLive}\n                onCheckedChange={toggleLiveStatus}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Estado de Conexión:</span>\n                <span className={streamStatus?.connected ? \"text-green-600\" : \"text-red-600\"}>\n                  {streamStatus?.connected ? \"Conectado\" : \"Desconectado\"}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between text-sm\">\n                <span>Oyentes Actuales:</span>\n                <span className=\"flex items-center gap-1\">\n                  <Users className=\"h-4 w-4\" />\n                  {config.listeners}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between text-sm\">\n                <span>Calidad:</span>\n                <span className=\"capitalize\">{config.quality}</span>\n              </div>\n            </div>\n\n            {streamStatus?.error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{streamStatus.error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stream Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Radio className=\"h-5 w-5\" />\n              Configuración de Stream\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"stream-url\">URL de Transmisión (.m3u8)</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"stream-url\"\n                  value={config.streamUrl}\n                  onChange={(e) => setConfig(prev => ({ ...prev, streamUrl: e.target.value }))}\n                  placeholder=\"https://example.com/stream.m3u8\"\n                />\n                <Button\n                  variant=\"outline\"\n                  onClick={testStream}\n                  disabled={isTesting}\n                >\n                  <TestTube className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"fallback-url\">URL de Respaldo (opcional)</Label>\n              <Input\n                id=\"fallback-url\"\n                value={config.fallbackUrl || ''}\n                onChange={(e) => setConfig(prev => ({ ...prev, fallbackUrl: e.target.value }))}\n                placeholder=\"https://backup.example.com/stream.m3u8\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"current-program\">Programa Actual</Label>\n              <Input\n                id=\"current-program\"\n                value={config.currentProgram}\n                onChange={(e) => setConfig(prev => ({ ...prev, currentProgram: e.target.value }))}\n                placeholder=\"Nombre del programa en vivo\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Descripción</Label>\n              <Textarea\n                id=\"description\"\n                value={config.description}\n                onChange={(e) => setConfig(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Descripción de la transmisión\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"quality\">Calidad</Label>\n                <select\n                  id=\"quality\"\n                  value={config.quality}\n                  onChange={(e) => setConfig(prev => ({ \n                    ...prev, \n                    quality: e.target.value as 'low' | 'medium' | 'high' \n                  }))}\n                  className=\"w-full p-2 border rounded\"\n                >\n                  <option value=\"low\">Baja</option>\n                  <option value=\"medium\">Media</option>\n                  <option value=\"high\">Alta</option>\n                </select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"max-retries\">Máximos Reintentos</Label>\n                <Input\n                  id=\"max-retries\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={config.maxRetries}\n                  onChange={(e) => setConfig(prev => ({ \n                    ...prev, \n                    maxRetries: parseInt(e.target.value) || 3 \n                  }))}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"auto-reconnect\">Reconexión Automática</Label>\n              <Switch\n                id=\"auto-reconnect\"\n                checked={config.enableAutoReconnect}\n                onCheckedChange={(checked) => setConfig(prev => ({ \n                  ...prev, \n                  enableAutoReconnect: checked \n                }))}\n              />\n            </div>\n\n            {testResult && (\n              <Alert variant={testResult.success ? \"default\" : \"destructive\"}>\n                <AlertDescription>{testResult.message}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":11355},"components/program-navigation.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useMobile } from \"@/hooks/use-mobile\";\n\ninterface NavigationItem {\n  id: string;\n  title: string;\n  image: string;\n  link: string;\n}\n\nconst NAVIGATION_ITEMS: NavigationItem[] = [\n  { id: \"radio\", title: \"Radio\", image: \"/images/radio-congreso.png\", link: \"/radio\" },\n  { id: \"programacion\", title: \"Programación\", image: \"/images/nuestra-programacion.png\", link: \"/programacion\" },\n  { id: \"noticias\", title: \"Noticias\", image: \"/images/noticias-congreso.png\", link: \"/noticias\" },\n  { id: \"transparencia\", title: \"Transparencia\", image: \"/images/transparencia.png\", link: \"https://www.canaldelcongreso.gob.mx/Transparencia\" },\n  { id: \"contacto\", title: \"Contacto\", image: \"/images/contacto.png\", link: \"https://www.canaldelcongreso.gob.mx/Transparencia/contacto\" },\n];\n\nexport default function ProgramNavigation() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const isMobile = useMobile();\n\n  const handlePrev = () => {\n    setActiveIndex((prev) => (prev - 1 + NAVIGATION_ITEMS.length) % NAVIGATION_ITEMS.length);\n  };\n\n  const handleNext = () => {\n    setActiveIndex((prev) => (prev + 1) % NAVIGATION_ITEMS.length);\n  };\n\n  const getCircularIndex = (offset: number) => {\n    return (activeIndex + offset + NAVIGATION_ITEMS.length) % NAVIGATION_ITEMS.length;\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handleNext();\n    }, 4000);\n    return () => clearInterval(interval);\n  }, [activeIndex]);\n\n  return (\n    <section className=\"relative  lg:py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"relative flex items-center justify-center min-h-[30rem]\">\n          {!isMobile && (\n            <>\n              <button\n                onClick={handlePrev}\n                className=\"absolute left-0 z-10 bg-white rounded-full p-3 hover:bg-gray-100 shadow\"\n                aria-label=\"Anterior\"\n              >\n                <ChevronLeft className=\"w-8 h-8 text-gray-800\" />\n              </button>\n              <button\n                onClick={handleNext}\n                className=\"absolute right-0 z-10 bg-white rounded-full p-3 hover:bg-gray-100 shadow\"\n                aria-label=\"Siguiente\"\n              >\n                <ChevronRight className=\"w-8 h-8 text-gray-800\" />\n              </button>\n            </>\n          )}\n\n          <div\n            className=\"flex items-center justify-center gap-4 overflow-hidden min-h-[30rem] w-full\"\n            onTouchStart={(e) => {\n              e.currentTarget.dataset.touchStart = String(e.touches[0].clientX);\n              e.currentTarget.dataset.touchStartY = String(e.touches[0].clientY);\n            }}\n            onTouchMove={(e) => {\n              e.currentTarget.dataset.touchEnd = String(e.touches[0].clientX);\n              e.currentTarget.dataset.touchEndY = String(e.touches[0].clientY);\n            }}\n            onTouchEnd={(e) => {\n              const startX = Number(e.currentTarget.dataset.touchStart || 0);\n              const startY = Number(e.currentTarget.dataset.touchStartY || 0);\n              const endX = Number(e.currentTarget.dataset.touchEnd || startX);\n              const endY = Number(e.currentTarget.dataset.touchEndY || startY);\n              \n              const deltaX = startX - endX;\n              const deltaY = Math.abs(startY - endY);\n              \n              // Only trigger swipe if horizontal movement is greater than vertical\n              if (Math.abs(deltaX) > 50 && Math.abs(deltaX) > deltaY) {\n                if (deltaX > 0) {\n                  handleNext(); // Swipe left = next\n                } else {\n                  handlePrev(); // Swipe right = previous\n                }\n              }\n            }}\n          >\n            {(isMobile ? [-1, 0, 1] : [-2, -1, 0, 1, 2]).map((offset) => {\n              const index = getCircularIndex(offset);\n              const item = NAVIGATION_ITEMS[index];\n              const isCenter = offset === 0;\n\n              const cardClasses = cn(\n                \"relative flex-shrink-0 rounded-[50px] overflow-hidden transition-all duration-300 transform\",\n                isCenter ? \"scale-110 shadow-2xl\" : \"scale-90 opacity-60\"\n              );\n\n              return (\n                <Link\n                  key={item.id}\n                  href={item.link}\n                  className={cn(cardClasses, \"w-32 sm:w-36 md:w-44 lg:w-48\")}\n                  onClick={(e) => {\n                    if (!isCenter) {\n                      e.preventDefault();\n                      if (offset < 0) handlePrev();\n                      if (offset > 0) handleNext();\n                    }\n                  }}\n                >\n                  <div className=\"relative w-full aspect-[4/7] bg-gray-200\">\n                    <Image\n                      src={item.image}\n                      alt={item.title}\n                      fill\n                      className=\"object-cover\"\n                      sizes=\"(max-width: 768px) 30vw, 15vw\"\n                      priority={isCenter}\n                    />\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5394},"components/defensoria/annual-reports-section.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Download, FileText, File } from 'lucide-react'\n\ninterface ReportType {\n  type: string\n  description: string\n  pdfUrl?: string\n  wordUrl?: string\n  id: string\n}\n\ninterface YearGroup {\n  year: string\n  reports: ReportType[]\n}\n\ninterface DefensoriaContent {\n  id: string\n  title: string\n  content: string\n  file_url?: string\n  metadata?: {\n    year?: string\n    description?: string\n    fileType?: string\n    reportType?: string\n    pdfUrl?: string\n    wordUrl?: string\n  }\n}\n\nexport default function AnnualReportsSection() {\n  const [yearGroups, setYearGroups] = useState<YearGroup[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchReports = async () => {\n      try {\n        const response = await fetch('/api/defensoria-audiencia?section=annual_reports')\n        if (response.ok) {\n          const data = await response.json()\n          console.log('Annual reports raw data:', data)\n          if (data && data.length > 0) {\n            // Group reports by year\n            const groupedByYear: { [year: string]: ReportType[] } = {}\n            \n            data.forEach((item: DefensoriaContent) => {\n              const metadata = item.metadata || {}\n              const year = metadata.year || item.title || ''\n              const reportType = metadata.reportType || 'INFORME ANUAL'\n              \n              console.log('Processing item:', { id: item.id, year, reportType, metadata })\n              \n              if (!groupedByYear[year]) {\n                groupedByYear[year] = []\n              }\n              \n              groupedByYear[year].push({\n                type: reportType,\n                description: metadata.description || item.content || reportType,\n                pdfUrl: metadata.pdfUrl,\n                wordUrl: metadata.wordUrl,\n                id: item.id // Add unique ID for stable keys\n              })\n            })\n            \n            console.log('Grouped by year:', groupedByYear)\n            \n            // Convert to array and sort by year descending\n            const toNum = (y: string) => Number.parseInt(y, 10) || 0\n            const yearGroupsArray = Object.entries(groupedByYear)\n              .map(([year, reports]) => ({\n                year,\n                reports\n              }))\n              .sort((a, b) => toNum(b.year) - toNum(a.year))\n            \n            console.log('Final year groups array:', yearGroupsArray)\n            setYearGroups(yearGroupsArray)\n          } else {\n            // Fallback data grouped by year\n            setYearGroups([\n              {\n                year: \"2024\",\n                reports: [\n                  {\n                    type: \"INFORME ANUAL\",\n                    description: \"INFORME ANUAL\",\n                    pdfUrl: \"/files/informe-anual-2024.pdf\",\n                    wordUrl: \"/files/informe-anual-2024.docx\",\n                    id: \"fallback-2024-1\"\n                  },\n                  {\n                    type: \"PLAN DE TRABAJO\",\n                    description: \"PLAN DE TRABAJO\",\n                    pdfUrl: \"/files/plan-trabajo-2024.pdf\",\n                    wordUrl: \"/files/plan-trabajo-2024.docx\",\n                    id: \"fallback-2024-2\"\n                  }\n                ]\n              },\n              {\n                year: \"2023\", \n                reports: [\n                  {\n                    type: \"INFORME ANUAL\",\n                    description: \"INFORME ANUAL\",\n                    pdfUrl: \"/files/informe-anual-2023.pdf\",\n                    wordUrl: \"/files/informe-anual-2023.docx\",\n                    id: \"fallback-2023-1\"\n                  },\n                  {\n                    type: \"PLAN DE TRABAJO\",\n                    description: \"PLAN DE TRABAJO\",\n                    pdfUrl: \"/files/plan-trabajo-2023.pdf\",\n                    wordUrl: \"/files/plan-trabajo-2023.docx\",\n                    id: \"fallback-2023-2\"\n                  }\n                ]\n              },\n              {\n                year: \"2022\",\n                reports: [\n                  {\n                    type: \"INFORME ANUAL\",\n                    description: \"INFORME ANUAL\",\n                    pdfUrl: \"/files/informe-anual-2022.pdf\",\n                    wordUrl: \"/files/informe-anual-2022.docx\",\n                    id: \"fallback-2022-1\"\n                  },\n                  {\n                    type: \"PLAN DE TRABAJO\", \n                    description: \"PLAN DE TRABAJO\",\n                    pdfUrl: \"/files/plan-trabajo-2022.pdf\",\n                    wordUrl: \"/files/plan-trabajo-2022.docx\",\n                    id: \"fallback-2022-2\"\n                  }\n                ]\n              }\n            ])\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching annual reports:', error)\n        // Set fallback data on error\n        setYearGroups([\n          {\n            year: \"2024\",\n            reports: [\n              {\n                type: \"INFORME ANUAL\",\n                description: \"INFORME ANUAL\",\n                pdfUrl: \"/files/informe-anual-2024.pdf\",\n                wordUrl: \"/files/informe-anual-2024.docx\",\n                id: \"fallback-error-2024-1\"\n              },\n              {\n                type: \"PLAN DE TRABAJO\",\n                description: \"PLAN DE TRABAJO\",\n                pdfUrl: \"/files/plan-trabajo-2024.pdf\",\n                wordUrl: \"/files/plan-trabajo-2024.docx\",\n                id: \"fallback-error-2024-2\"\n              }\n            ]\n          }\n        ])\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchReports()\n  }, [])\n\n  const handleDownload = (fileUrl: string, year: string, reportType: string, fileType: string) => {\n    if (fileUrl) {\n      const link = document.createElement('a')\n      link.href = fileUrl\n      const fileName = `${reportType.toLowerCase().replace(/\\s+/g, '-')}-${year}.${fileType === 'pdf' ? 'pdf' : 'docx'}`\n      link.download = fileName\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <section \n        className=\"py-12 md:py-14 bg-white\"\n        style={{\n          backgroundImage: \"url('/images/defensoria-micrositio-fondo-new.png')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }}\n      >\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <h2 className=\"text-center font-black text-[#4f148c] tracking-tight uppercase leading-tight text-[26px] sm:text-[30px] md:text-[36px] mb-8 md:mb-10\">\n            INFORME DE DEFENSORÍA<br />DE AUDIENCIAS\n          </h2>\n          <div className=\"flex justify-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600\"></div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n\n  return (\n    <section \n      className=\"py-12 md:py-14 bg-white\"\n      style={{\n        backgroundImage: \"url('/images/defensoria-micrositio-fondo-new.png')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n      }}\n    >\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <h2 className=\"text-center font-black text-[#4f148c] tracking-tight uppercase leading-tight text-[26px] sm:text-[30px] md:text-[36px] mb-8 md:mb-10\">\n          INFORME DE DEFENSORÍA<br />DE AUDIENCIAS\n        </h2>\n\n        {/* Display all years in responsive grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto\">\n          {yearGroups.map((yearGroup) => (\n            <div key={yearGroup.year} className=\"bg-white rounded-lg overflow-hidden shadow-lg border border-gray-300\">\n              {/* Gray header with year */}\n              <div className=\"bg-gray-300 px-6 py-6 text-center border-b border-gray-400\">\n                <h3 className=\"text-6xl font-black\" style={{ color: \"#7B2CBF\" }}>\n                  {yearGroup.year}\n                </h3>\n              </div>\n\n              {/* Purple sections for each report type with inline icons */}\n              <div className=\"space-y-0\">\n                {/* Show all reports in order */}\n                {yearGroup.reports.map((report, reportIndex) => (\n                  <div key={`${yearGroup.year}-${report.id || reportIndex}`} className=\"px-4 py-3\" style={{ backgroundColor: \"#7B2CBF\" }}>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-white text-sm font-bold uppercase\">\n                        {report.type}\n                      </span>\n                      <div className=\"flex space-x-2\">\n                        {report.pdfUrl && (\n                          <button\n                            onClick={() => handleDownload(report.pdfUrl!, yearGroup.year, report.type, 'pdf')}\n                            className=\"w-5 h-5 bg-white bg-opacity-80 hover:bg-opacity-100 rounded-full flex items-center justify-center transition-all duration-200\"\n                            title=\"Descargar PDF\"\n                          >\n                            <Download className=\"w-3 h-3 text-purple-700\" />\n                          </button>\n                        )}\n                        {report.wordUrl && (\n                          <button\n                            onClick={() => handleDownload(report.wordUrl!, yearGroup.year, report.type, 'word')}\n                            className=\"w-5 h-5 bg-white bg-opacity-80 hover:bg-opacity-100 rounded-full flex items-center justify-center transition-all duration-200\"\n                            title=\"Descargar Word\"\n                          >\n                            <Download className=\"w-3 h-3 text-purple-700\" />\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {yearGroups.length === 0 && (\n          <div className=\"text-center py-12\">\n            <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">\n              No hay informes disponibles\n            </h3>\n            <p className=\"text-gray-500\">\n              Los informes aparecerán aquí cuando estén disponibles.\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  )\n}\n","size_bytes":10626},"app/admin/database-config/page.tsx":{"content":"import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { CheckCircle, XCircle, AlertCircle, Database } from \"lucide-react\"\nimport { DatabaseConfigClient } from \"./database-config-client\"\n\nexport default function DatabaseConfigPage() {\n  return (\n    <main className=\"flex-1 p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          <div className=\"flex items-center gap-3\">\n            <Database className=\"h-8 w-8 text-blue-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Database Configuration</h1>\n              <p className=\"text-gray-600\">Manage your database connection and initialization</p>\n            </div>\n          </div>\n\n          <DatabaseConfigClient />\n\n          {/* Database Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Database Information</CardTitle>\n              <CardDescription>\n                Current database configuration details\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Environment Variables</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div>Database URL: {process.env.DATABASE_URL ? '✓ Set' : '✗ Not set'}</div>\n                    <div>Direct URL: {process.env.DIRECT_URL ? '✓ Set' : '✗ Not set'}</div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Tables</h4>\n                  <div className=\"space-y-1 text-sm text-gray-600\">\n                    <div>• live_streams</div>\n                    <div>• programs</div>\n                    <div>• news</div>\n                    <div>• organs</div>\n                    <div>• parliamentary_groups</div>\n                    <div>• legislators</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n  )\n}","size_bytes":2234},"app/api/programacion/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\n// In-memory storage - will be replaced with database in production\nlet inMemoryData: { [key: string]: any[] } = {\n  '45.1': [\n    {\n      hora: '06:00',\n      programa: 'Noticias del Congreso',\n      descripcion: 'Resumen informativo matutino'\n    },\n    {\n      hora: '07:00',\n      programa: 'Mesa de Análisis',\n      descripcion: 'Debate sobre reformas aprobadas'\n    },\n    {\n      hora: '09:00',\n      programa: 'Sesión del Pleno',\n      descripcion: 'Transmisión en directo'\n    }\n  ],\n  '45.2': [\n    {\n      hora: '08:00',\n      programa: 'Documentales',\n      descripcion: 'Historia legislativa'\n    },\n    {\n      hora: '10:00',\n      programa: 'Entrevistas',\n      descripcion: 'Con legisladores destacados'\n    }\n  ],\n  '45.3': [\n    {\n      hora: '09:00',\n      programa: 'Comisiones en Sesión',\n      descripcion: 'Trabajo en comisiones'\n    },\n    {\n      hora: '12:00',\n      programa: 'Voz Ciudadana',\n      descripcion: 'Participación ciudadana'\n    }\n  ]\n}\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const channel = searchParams.get('channel')\n  const date = searchParams.get('date')\n  \n  if (channel) {\n    return NextResponse.json({\n      channel,\n      date: date || new Date().toISOString().split('T')[0],\n      programs: inMemoryData[channel] || []\n    })\n  }\n  \n  return NextResponse.json({\n    channels: Object.keys(inMemoryData),\n    date: date || new Date().toISOString().split('T')[0],\n    data: inMemoryData\n  })\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    if (body.action === 'update_from_excel') {\n      // Update programming data from Excel upload\n      inMemoryData = { ...inMemoryData, ...body.data }\n      console.log('Programming data updated with channels:', Object.keys(inMemoryData))\n      \n      return NextResponse.json({ \n        message: 'Programming data updated successfully',\n        channels: Object.keys(inMemoryData)\n      })\n    }\n    \n    if (body.action === 'clear_data') {\n      // Clear all programming data\n      inMemoryData = {}\n      console.log('Programming data cleared')\n      \n      return NextResponse.json({ \n        message: 'Programming data cleared successfully'\n      })\n    }\n    \n    return NextResponse.json({ error: 'Invalid action' }, { status: 400 })\n  } catch (error) {\n    console.error('Error updating programming:', error)\n    return NextResponse.json({ error: 'Failed to update programming' }, { status: 500 })\n  }\n}\n","size_bytes":2584},"components/programs-grid.tsx":{"content":"\"use client\";\n\nimport Image from \"next/image\";\n\ninterface Program {\n  id: number | string;\n  title: string;\n  description?: string;\n  imageUrl?: string;\n  url?: string;\n}\n\ninterface ProgramsGridProps {\n  programs: Program[];\n}\n\nexport default function ProgramsGrid({ programs }: ProgramsGridProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n      {programs.slice(0, 8).map((program) => {\n\n        const handleClick = () => {\n          if (program.url) {\n            window.open(program.url, '_blank', 'noopener,noreferrer');\n          }\n        };\n\n        return (\n          <div\n            key={program.id}\n            onClick={handleClick}\n            className={`rounded overflow-hidden transform transition-transform duration-300 hover:scale-105 group relative rounded-xl ${\n              program.url ? 'cursor-pointer' : 'cursor-default'\n            }`}\n          >\n            <div className=\"relative aspect-[4/3] overflow-hidden\">\n              <Image\n                src={program.imageUrl || \"/placeholder.svg\"}\n                alt={program.title}\n                fill\n                className=\"object-cover\"\n                unoptimized={true}\n              />\n              <div className=\"absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center p-4 rounded-xl my-2\">\n                <div className=\"text-center\">\n                  <p className=\"text-white text-sm md:text-base font-medium mb-2\">\n                    {program.description || \"Sin descripción disponible\"}\n                  </p>\n                  {program.url && (\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center\">\n                        <div className=\"w-0 h-0 border-l-[16px] border-t-[10px] border-b-[10px] border-l-white border-t-transparent border-b-transparent ml-1\"></div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":2203},"app/api/programs/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getProgramsFromDB, createProgramInDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const programs = await getProgramsFromDB()\n    return NextResponse.json(programs)\n  } catch (error) {\n    console.error('Error fetching programs:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch programs' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n    const program = await createProgramInDB(data)\n    return NextResponse.json(program)\n  } catch (error) {\n    console.error('Error creating program:', error)\n    return NextResponse.json(\n      { error: 'Failed to create program' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":805},"app/api/programacion/upload/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Dynamic import of xlsx to avoid module resolution issues\n    const XLSX = await import('xlsx')\n\n    const formData = await request.formData()\n    const file = formData.get('excel') as File\n\n    if (!file) {\n      return NextResponse.json({ error: 'No file provided' }, { status: 400 })\n    }\n\n    // Validate file type\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n      return NextResponse.json({ error: 'Invalid file type. Please upload an Excel file.' }, { status: 400 })\n    }\n\n    // Read the Excel file\n    const arrayBuffer = await file.arrayBuffer()\n    const workbook = XLSX.read(arrayBuffer, { type: 'array' })\n\n    // Process each sheet (channel)\n    const channels = ['45.1', '45.2', '45.3']\n    const programData: { [key: string]: any[] } = {}\n\n    workbook.SheetNames.forEach((sheetName, index) => {\n      console.log(`Processing sheet: ${sheetName}`)\n\n      const worksheet = workbook.Sheets[sheetName]\n\n      // Use sheet_to_json with header: 1 to get raw arrays\n      const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 })\n      console.log(`Raw data for ${sheetName}:`, rawData.slice(0, 3)) // Log first 3 rows\n\n      if (rawData.length === 0) {\n        programData[channels[index] || sheetName] = []\n        return\n      }\n\n      // Skip the header row and look for actual data\n      // The Excel appears to have the format: Time | Empty | Program | Duration | etc.\n      let dataStartRow = 1 // Start from row 1 (0-indexed)\n\n      const programs = []\n\n      // Helper function to convert decimal time to HH:MM format\n      const convertDecimalToTime = (decimal: number): string => {\n        const totalMinutes = Math.round(decimal * 24 * 60)\n        const hours = Math.floor(totalMinutes / 60)\n        const minutes = totalMinutes % 60\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`\n      }\n\n      // Process data rows starting from dataStartRow\n      for (let i = dataStartRow; i < rawData.length; i++) {\n        const row = rawData[i] as any[]\n\n        // Skip completely empty rows\n        if (!row || row.every(cell => !cell || String(cell).trim() === '')) {\n          continue\n        }\n\n        // Skip rows where the first column (time/hour) is empty\n        const timeValue = row[0]\n        if (!timeValue || String(timeValue).trim() === '') {\n          console.log(`Skipping row ${i + 1} - empty time column`)\n          continue\n        }\n\n        // Convert time value\n        let formattedTime = ''\n        if (typeof timeValue === 'number' && timeValue > 0 && timeValue < 1) {\n          // It's a decimal representing time (e.g., 0.25 = 6:00 AM)\n          formattedTime = convertDecimalToTime(timeValue)\n        } else {\n          formattedTime = String(timeValue).trim()\n        }\n\n        // Extract program name and description from the row\n        // Based on the structure: Time | Empty | Program | Duration | Origin | Cassette | Classification\n        const programName = row[2] ? String(row[2]).trim() : ''\n        const duration = row[3] ? String(row[3]).trim() : ''\n        const origin = row[4] ? String(row[4]).trim() : ''\n\n        // Only add programs that have actual content\n        if (programName && programName !== '' && !programName.includes('PROGRAMACIÓN')) {\n          const program = {\n            hora: formattedTime,\n            programa: programName,\n            descripcion: origin || 'Sin descripción',\n            duracion: duration\n          }\n\n          programs.push(program)\n          console.log(`Added program: ${formattedTime} - ${programName}`)\n        }\n      }\n\n      console.log(`Processed ${programs.length} programs for ${sheetName}`)\n      programData[channels[index] || sheetName] = programs\n    })\n\n    console.log('Final processed data:', Object.keys(programData).map(key => ({\n      channel: key,\n      programCount: programData[key].length,\n      sampleProgram: programData[key][0]\n    })))\n\n    return NextResponse.json({ \n      message: 'Excel processed successfully',\n      data: programData,\n      sheets: workbook.SheetNames,\n      summary: Object.keys(programData).map(key => ({\n        channel: key,\n        programCount: programData[key].length\n      }))\n    })\n\n  } catch (error) {\n    console.error('Error processing Excel:', error)\n    return NextResponse.json({ \n      error: 'Failed to process Excel file',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}","size_bytes":4607},"components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"components/accessibility-button.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Accessibility } from 'lucide-react'\n\nexport default function AccessibilityButton() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isClient, setIsClient] = useState(false)\n\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n\n  const increaseFontSize = () => {\n    const currentSize = parseFloat(getComputedStyle(document.documentElement).fontSize)\n    document.documentElement.style.fontSize = `${Math.min(currentSize + 2, 24)}px`\n  }\n\n  const decreaseFontSize = () => {\n    const currentSize = parseFloat(getComputedStyle(document.documentElement).fontSize)\n    document.documentElement.style.fontSize = `${Math.max(currentSize - 2, 12)}px`\n  }\n\n  const toggleHighContrast = () => {\n    document.documentElement.classList.toggle('high-contrast')\n  }\n\n  // Don't render anything until hydration is complete\n  if (!isClient) {\n    return null\n  }\n\n  return (\n    <div className=\"fixed left-0 top-1/2 -translate-y-1/2 z-50\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"bg-blue-600 text-white p-3 rounded-r-md shadow-lg hover:bg-blue-700 transition-colors\"\n        aria-label=\"Opciones de accesibilidad\"\n      >\n        <Accessibility size={20} />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute left-full ml-2 bg-white border border-gray-200 rounded-lg shadow-xl p-4 w-64\">\n          <h3 className=\"font-semibold text-gray-800 mb-3\">Opciones de Accesibilidad</h3>\n\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tamaño de texto\n              </label>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={decreaseFontSize}\n                  className=\"px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm\"\n                >\n                  A-\n                </button>\n                <button\n                  onClick={increaseFontSize}\n                  className=\"px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm\"\n                >\n                  A+\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <button\n                onClick={toggleHighContrast}\n                className=\"w-full px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded text-sm text-left\"\n              >\n                Alto contraste\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":2540},"components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23377},"components/transparency/submenu.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\n\nexport default function TransparencySubmenu() {\n  const pathname = usePathname()\n\n  const isActive = (path: string) => {\n    return pathname?.startsWith(path) \n      ? \"text-blue-600 font-semibold bg-blue-50 px-3 py-2 rounded-lg border-l-4 border-blue-600\" \n      : \"text-gray-700 hover:text-blue-600 hover:bg-gray-50 px-3 py-2 rounded-lg transition-all duration-200\"\n  }\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-50 to-blue-50 py-6 border-t border-b border-gray-200 shadow-sm\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10\">\n          {/* Column 1: Compromisos con la Transparencia */}\n          <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-2 h-8 bg-gradient-to-b from-blue-500 to-blue-600 rounded-full mr-3\"></div>\n              <h3 className=\"text-gray-800 font-bold text-lg\">COMPROMISOS CON LA TRANSPARENCIA</h3>\n            </div>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link\n                  href=\"/transparencia/compromisos/tu-canal\"\n                  className={isActive(\"/transparencia/compromisos/tu-canal\")}\n                >\n                  TU CANAL\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/transparencia/compromisos/normatividad\"\n                  className={isActive(\"/transparencia/compromisos/normatividad\")}\n                >\n                  NORMATIVIDAD\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/transparencia/compromisos/estructura\"\n                  className={isActive(\"/transparencia/compromisos/estructura\")}\n                >\n                  ESTRUCTURA Y PRESUPUESTO\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/transparencia/compromisos/informacion\"\n                  className={isActive(\"/transparencia/compromisos/informacion\")}\n                >\n                  INFORMACIÓN RELEVANTE Y DE UTILIDAD PÚBLICA\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Column 2: Transparencia Focalizada */}\n          <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-2 h-8 bg-gradient-to-b from-purple-500 to-purple-600 rounded-full mr-3\"></div>\n              <h3 className=\"text-gray-800 font-bold text-lg\">TRANSPARENCIA FOCALIZADA</h3>\n            </div>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link\n                  href=\"/transparencia/focalizada/tu-congreso\"\n                  className={isActive(\"/transparencia/focalizada/tu-congreso\")}\n                >\n                  TU CONGRESO\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/transparencia/focalizada/representantes\"\n                  className={isActive(\"/transparencia/focalizada/representantes\")}\n                >\n                  TUS REPRESENTANTES\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/transparencia/focalizada/ciudadania\"\n                  className={isActive(\"/transparencia/focalizada/ciudadania\")}\n                >\n                  LA CIUDADANÍA Y EL CONGRESO\n                </Link>\n              </li>\n            </ul>\n\n            <div className=\"mt-6 pt-6 border-t border-gray-100\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-2 h-8 bg-gradient-to-b from-orange-500 to-orange-600 rounded-full mr-3\"></div>\n                <h3 className=\"text-gray-800 font-bold text-lg\">DATOS ABIERTOS</h3>\n              </div>\n              <ul className=\"space-y-3\">\n                <li>\n                  <Link href=\"/transparencia/datos-abiertos\" className={isActive(\"/transparencia/datos-abiertos\")}>\n                    DATOS ABIERTOS\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Column 3: Plataforma Nacional */}\n          <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-2 h-8 bg-gradient-to-b from-green-500 to-green-600 rounded-full mr-3\"></div>\n              <h3 className=\"text-gray-800 font-bold text-lg\">PLATAFORMA NACIONAL DE TRANSPARENCIA</h3>\n            </div>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600 leading-relaxed\">\n                Accede al Sistema Nacional de Transparencia para realizar solicitudes de información pública.\n              </p>\n              <a\n                href=\"https://www.plataformadetransparencia.org.mx/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center justify-center w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 transform hover:scale-105\"\n              >\n                <span>ACCEDER A LA PLATAFORMA</span>\n                <svg className=\"ml-2 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                </svg>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":5869},"app/noticias/categorias/[category]/page.tsx":{"content":"\"use client\"\n\nimport NewsSubmenu from \"@/components/news-submenu\"\nimport NewsGrid from \"@/components/news-grid\"\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\n\n// Define valid categories to match our menu items\nconst validCategories = [\n  \"foros-y-seminarios\",\n  \"reformas-aprobadas\",\n  \"temas-de-actualidad\",\n  \"trabajo-en-comisiones\",\n  \"reformas-en-dof\",\n  \"trabajos-en-pleno\",\n]\n\n// Map slugs to display names\nconst categoryNames: Record<string, string> = {\n  \"foros-y-seminarios\": \"Foros y seminarios\",\n  \"reformas-aprobadas\": \"Reformas aprobadas\",\n  \"temas-de-actualidad\": \"Temas de actualidad\",\n  \"trabajo-en-comisiones\": \"Trabajo en comisiones\",\n  \"reformas-en-dof\": \"Reformas en DOF\",\n  \"trabajos-en-pleno\": \"Trabajo en pleno\",\n}\n\ninterface NewsItem {\n  id: string\n  title: string\n  summary: string\n  content: string\n  imageUrl: string\n  category?: string\n  publishedAt: Date\n  createdAt: Date\n  status?: string\n}\n\nexport default function CategoryPage() {\n  const params = useParams()\n  const router = useRouter()\n  const category = params.category as string\n  \n  const [newsItems, setNewsItems] = useState<NewsItem[]>([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPages, setTotalPages] = useState(1)\n  const [total, setTotal] = useState(0)\n  const [loading, setLoading] = useState(true)\n\n  // Validate the category\n  useEffect(() => {\n    if (!validCategories.includes(category)) {\n      router.replace('/404')\n      return\n    }\n  }, [category, router])\n\n  const fetchNews = async (page: number) => {\n    // Don't fetch if category is invalid\n    if (!validCategories.includes(category)) {\n      return\n    }\n    \n    try {\n      setLoading(true)\n      \n      const response = await fetch(`/api/news?page=${page}&limit=20&category=${encodeURIComponent(categoryNames[category])}`, {\n        cache: 'no-store'\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        const newsData = data.news || data // Handle both formats\n        \n        setNewsItems(newsData)\n        setTotal(data.total || newsData.length)\n        setTotalPages(data.totalPages || 1)\n        setCurrentPage(page)\n      } else {\n        console.error('Failed to fetch news:', response.status)\n        setNewsItems([])\n      }\n    } catch (error) {\n      console.error('Failed to load news:', error)\n      setNewsItems([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchNews(1)\n  }, [category])\n\n  const handlePageChange = (page: number) => {\n    fetchNews(page)\n  }\n\n  return (\n    <main className=\"min-h-screen bg-white\">\n      {/* Main header and navigation would be here */}\n\n      {/* News Submenu */}\n      <NewsSubmenu />\n\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">{categoryNames[category]}</h1>\n\n        {/* News Grid */}\n        {loading ? (\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n            <span className=\"ml-2 text-gray-600\">Cargando noticias...</span>\n          </div>\n        ) : (\n          <NewsGrid \n            newsItems={newsItems} \n            hideSearch={true}\n            currentPage={currentPage}\n            totalPages={totalPages}\n            total={total}\n            onPageChange={handlePageChange}\n          />\n        )}\n      </div>\n    </main>\n  )\n}\n","size_bytes":3486},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./*.{ts,tsx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        purple: {\n          800: \"#4a1d96\",\n          900: \"#3b0764\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n","size_bytes":2229},"app/admin/documents/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Plus, Upload, Download, Trash2, FileText, Eye } from \"lucide-react\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\ninterface Document {\n  id: string\n  title: string\n  description: string\n  fileName: string\n  fileUrl: string\n  fileSize: number\n  uploadDate: string\n  category: string\n}\n\nexport default function DocumentsAdmin() {\n  const [documents, setDocuments] = useState<Document[]>([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    category: 'general'\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [isUploading, setIsUploading] = useState(false)\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    loadDocuments()\n  }, [])\n\n  const loadDocuments = async () => {\n    try {\n      const response = await fetch('/api/documents')\n      if (response.ok) {\n        const data = await response.json()\n        setDocuments(data)\n      }\n    } catch (error) {\n      console.error('Error loading documents:', error)\n    }\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      // Validate file type\n      const allowedTypes = ['.pdf', '.doc', '.docx', '.txt', '.rtf']\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase()\n      \n      if (!allowedTypes.includes(fileExtension)) {\n        setMessage('Solo se permiten archivos PDF, DOC, DOCX, TXT y RTF')\n        return\n      }\n\n      // Validate file size (max 50MB)\n      if (file.size > 50 * 1024 * 1024) {\n        setMessage('El archivo no puede ser mayor a 50MB')\n        return\n      }\n\n      setSelectedFile(file)\n      setMessage('')\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!selectedFile) {\n      setMessage('Por favor selecciona un archivo')\n      return\n    }\n\n    setIsUploading(true)\n    try {\n      // Upload file first\n      const uploadFormData = new FormData()\n      uploadFormData.append('file', selectedFile)\n      uploadFormData.append('type', 'documents')\n\n      const uploadResponse = await fetch('/api/upload', {\n        method: 'POST',\n        body: uploadFormData\n      })\n\n      if (!uploadResponse.ok) {\n        throw new Error('Error uploading file')\n      }\n\n      const uploadResult = await uploadResponse.json()\n\n      // Save document metadata\n      const documentData = {\n        title: formData.title,\n        description: formData.description,\n        fileName: selectedFile.name,\n        fileUrl: uploadResult.url,\n        fileSize: selectedFile.size,\n        category: formData.category\n      }\n\n      const saveResponse = await fetch('/api/documents', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(documentData)\n      })\n\n      if (saveResponse.ok) {\n        setMessage('Documento subido exitosamente')\n        setIsDialogOpen(false)\n        setFormData({ title: '', description: '', category: 'general' })\n        setSelectedFile(null)\n        loadDocuments()\n      } else {\n        throw new Error('Error saving document')\n      }\n    } catch (error) {\n      setMessage('Error al subir el documento: ' + (error instanceof Error ? error.message : 'Unknown error'))\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const handleDelete = async (id: string, fileUrl: string) => {\n    if (!confirm('¿Estás seguro de que quieres eliminar este documento?')) return\n\n    try {\n      const response = await fetch(`/api/documents/${id}`, {\n        method: 'DELETE'\n      })\n\n      if (response.ok) {\n        setMessage('Documento eliminado exitosamente')\n        loadDocuments()\n      }\n    } catch (error) {\n      setMessage('Error al eliminar el documento')\n    }\n  }\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    if (bytes === 0) return '0 Bytes'\n    const i = Math.floor(Math.log(bytes) / Math.log(1024))\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestión de Documentos</h1>\n          <p className=\"text-gray-600\">Administra documentos PDF, Word y otros archivos</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Subir Documento\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Subir Nuevo Documento</DialogTitle>\n              <DialogDescription>\n                Sube documentos PDF, Word, TXT o RTF (máximo 50MB)\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit}>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"description\">Descripción</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"category\">Categoría</Label>\n                  <select\n                    id=\"category\"\n                    value={formData.category}\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                    className=\"w-full p-2 border rounded\"\n                  >\n                    <option value=\"general\">General</option>\n                    <option value=\"legal\">Legal</option>\n                    <option value=\"reports\">Reportes</option>\n                    <option value=\"manuals\">Manuales</option>\n                  </select>\n                </div>\n                <div>\n                  <Label htmlFor=\"file\">Archivo</Label>\n                  <Input\n                    id=\"file\"\n                    type=\"file\"\n                    onChange={handleFileChange}\n                    accept=\".pdf,.doc,.docx,.txt,.rtf\"\n                    required\n                  />\n                  {selectedFile && (\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Archivo: {selectedFile.name} ({formatFileSize(selectedFile.size)})\n                    </p>\n                  )}\n                </div>\n              </div>\n              {message && (\n                <Alert className=\"mt-4\">\n                  <AlertDescription>{message}</AlertDescription>\n                </Alert>\n              )}\n              <DialogFooter className=\"mt-6\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isUploading}>\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  {isUploading ? 'Subiendo...' : 'Subir'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Documentos</CardTitle>\n          <CardDescription>\n            Lista de todos los documentos subidos\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Título</TableHead>\n                <TableHead>Archivo</TableHead>\n                <TableHead>Categoría</TableHead>\n                <TableHead>Tamaño</TableHead>\n                <TableHead>Fecha</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {documents.map((doc) => (\n                <TableRow key={doc.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{doc.title}</div>\n                      {doc.description && (\n                        <div className=\"text-sm text-gray-600\">{doc.description}</div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <FileText className=\"h-4 w-4 mr-2 text-blue-600\" />\n                      {doc.fileName}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      {doc.category}\n                    </span>\n                  </TableCell>\n                  <TableCell>{formatFileSize(doc.fileSize)}</TableCell>\n                  <TableCell>\n                    {new Date(doc.uploadDate).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(doc.fileUrl, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          const link = document.createElement('a')\n                          link.href = doc.fileUrl\n                          link.download = doc.fileName\n                          link.click()\n                        }}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(doc.id, doc.fileUrl)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":11455},"app/transparencia/compromisos/tu-canal/page.tsx":{"content":"import Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\n\nexport default function TuCanalPage() {\n  return (\n    <>\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">Tu Canal</h1>\n        <div className=\"prose max-w-none\">\n          <p>\n            Canal del Congreso es el medio de comunicación del Poder Legislativo de los Estados Unidos Mexicanos, que\n            tiene como misión reseñar y difundir la actividad legislativa y parlamentaria de las Cámaras del Congreso de\n            la Unión y de la Comisión Permanente.\n          </p>\n          {/* More content would go here */}\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":799},"app/api/admin/migrate-organs/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST() {\n  try {\n    const pool = createDatabaseConnectionFromEnv()\n    if (!pool) {\n      return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n    }\n\n    // Add URL column to organs table if it doesn't exist\n    await pool.query(`\n      ALTER TABLE organs ADD COLUMN IF NOT EXISTS url TEXT;\n    `)\n\n    // Add updated_at column if it doesn't exist  \n    await pool.query(`\n      ALTER TABLE organs ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;\n    `)\n\n    // Create update trigger function if it doesn't exist\n    await pool.query(`\n      CREATE OR REPLACE FUNCTION update_updated_at_column()\n      RETURNS TRIGGER AS $$\n      BEGIN\n        NEW.updated_at = CURRENT_TIMESTAMP;\n        RETURN NEW;\n      END;\n      $$ LANGUAGE plpgsql;\n    `)\n\n    // Add trigger for updated_at if it doesn't exist\n    await pool.query(`\n      DO $$ \n      BEGIN\n          IF NOT EXISTS (\n              SELECT 1 FROM pg_trigger WHERE tgname = 'update_organs_updated_at'\n          ) THEN\n              CREATE TRIGGER update_organs_updated_at \n              BEFORE UPDATE ON organs \n              FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n          END IF;\n      END $$;\n    `)\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Organs table migration completed successfully' \n    })\n\n  } catch (error) {\n    console.error('Migration error:', error)\n    return NextResponse.json({ \n      error: 'Failed to migrate organs table', \n      details: error instanceof Error ? error.message : String(error)\n    }, { status: 500 })\n  }\n}\n","size_bytes":1747},"app/api/radio/episodes/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getRadioEpisodes } from '@/lib/api'\nimport { getDB } from '@/lib/database-env'\n\n// Using database only - no mock data\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const episodes = await getRadioEpisodes()\n    const episode = episodes.find(ep => ep.id === id)\n\n    if (!episode) {\n      return NextResponse.json({ error: 'Episode not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(episode)\n  } catch (error) {\n    console.error('Error fetching radio episode:', error)\n    return NextResponse.json({ error: 'Failed to fetch radio episode' }, { status: 500 })\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n    const pool = getDB()\n\n    const result = await pool.query(`\n      UPDATE radio_episodes \n      SET title = $1, description = $2, audio_url = $3, duration = $4, \n          publish_date = $5, image_url = $6, program_id = $7, published = $8, updated_at = NOW()\n      WHERE id = $9\n      RETURNING *\n    `, [\n      data.title,\n      data.description, \n      data.audioUrl,\n      data.duration,\n      data.publishDate,\n      data.imageUrl,\n      data.programId,\n      data.published !== false,\n      id\n    ])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json({ error: 'Episode not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating episode:', error)\n    return NextResponse.json({ error: 'Failed to update episode' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n\n    if (!id) {\n      return NextResponse.json({ error: 'Episode ID is required' }, { status: 400 })\n    }\n\n    const { deleteRadioEpisode } = await import('@/lib/api')\n    const deletedEpisode = await deleteRadioEpisode(id)\n\n    if (!deletedEpisode) {\n      return NextResponse.json({ error: 'Episode not found' }, { status: 404 })\n    }\n\n    console.log(`Successfully deleted episode: ${deletedEpisode.title} (ID: ${id})`)\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Episode deleted successfully',\n      deletedEpisode: { id: deletedEpisode.id, title: deletedEpisode.title }\n    })\n  } catch (error) {\n    console.error('Error deleting radio episode:', error)\n    return NextResponse.json({ \n      error: 'Failed to delete radio episode',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}","size_bytes":2792},"app/api/radio/config/route.ts":{"content":"import { NextResponse, NextRequest } from 'next/server'\n\nconst radioConfig: {\n  streamUrl: string;\n  heroImage: string;\n  channels: Array<{\n    id: string;\n    name: string;\n    color: string;\n    img: string;\n    active: boolean;\n  }>;\n  navigation: Array<{\n    name: string;\n    href: string;\n  }>;\n  categoryImages: Record<string, string>;\n  carousel: Array<{\n    id: string;\n    title: string;\n    image: string;\n    link: string;\n  }>;\n} = {\n  streamUrl: \"https://ccstreaming.packet.mx/LiveApp/streams/Radio_kd5oiNTTWO0gEOFc23dr762145.m3u8\",\n  heroImage: \"/images/radio-hero-banner.png\",\n  channels: [\n    {\n      id: \"radio-congreso\",\n      name: \"Radio Congreso\",\n      color: \"#7e22ce\",\n      img: \"/images/radio-congreso-logo.png\",\n      active: true\n    },\n    {\n      id: \"canal-45-1\",\n      name: \"CANAL 45.1\",\n      color: \"#4a4a4a\",\n      img: \"/images/channel-c-logo.png\",\n      active: false\n    },\n    {\n      id: \"canal-45-2\",\n      name: \"CANAL 45.2\",\n      color: \"#b91c1c\",\n      img: \"/images/channel-g-logo.png\",\n      active: false\n    },\n    {\n      id: \"canal-45-3\",\n      name: \"CANAL 45.3\",\n      color: \"#15803d\",\n      img: \"/images/channel-d-logo.png\",\n      active: false\n    }\n  ],\n  navigation: [\n    { name: \"Toma Tribuna\", href: \"/radio/toma-tribuna\" },\n    { name: \"Entrevistas\", href: \"/radio/entrevistas\" },\n    { name: \"Sitio Abierto\", href: \"/radio/sitio-abierto\" },\n    { name: \"Noticias del Congreso\", href: \"/radio/noticias-congreso\" }\n  ],\n  categoryImages: {},\n  carousel: []\n}\n\nexport async function GET() {\n  try {\n    console.log('Config API: Fetching radio config')\n\n    // Fetch navigation from database\n    let navigationItems = radioConfig.navigation\n    try {\n      const navResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/radio/navigation`)\n      if (navResponse.ok) {\n        const dbNavigation = await navResponse.json()\n        navigationItems = dbNavigation.map((item: any) => ({\n          name: item.name,\n          href: item.href\n        }))\n        console.log('Config API: Using database navigation:', navigationItems)\n      }\n    } catch (navError) {\n      console.warn('Config API: Could not fetch navigation from database, using default:', navError)\n    }\n\n    const configWithDynamicNav = {\n      ...radioConfig,\n      navigation: navigationItems\n    }\n\n    console.log('Config API: Returning response:', configWithDynamicNav)\n    return NextResponse.json(configWithDynamicNav)\n  } catch (error) {\n    console.error('Config API: Error:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch config' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const updates = await request.json()\n\n    console.log('Config API: Updating configuration with:', updates)\n\n    // Update the config object with new values\n    if (updates.streamUrl) {\n      radioConfig.streamUrl = updates.streamUrl\n    }\n\n    if (updates.heroImage) {\n      radioConfig.heroImage = updates.heroImage\n    }\n\n    if (updates.categoryImages) {\n      radioConfig.categoryImages = {\n        ...radioConfig.categoryImages,\n        ...updates.categoryImages\n      }\n    }\n\n    if (updates.channels) {\n      radioConfig.channels = updates.channels\n    }\n\n    if (updates.navigation) {\n      radioConfig.navigation = updates.navigation\n    }\n\n    // Rebuild carousel with updated images\n    if (updates.categoryImages) {\n      if (!radioConfig.carousel) {\n        radioConfig.carousel = []\n      }\n      radioConfig.carousel = Object.keys(radioConfig.categoryImages).map(categoryName => ({\n        id: categoryName.toLowerCase().replace(/\\s+/g, '-'),\n        title: categoryName.toUpperCase(),\n        image: radioConfig.categoryImages[categoryName as keyof typeof radioConfig.categoryImages],\n        link: `/radio/${categoryName.toLowerCase().replace(/\\s+/g, '-')}`\n      }))\n    }\n\n    console.log('Config API: Updated configuration:', radioConfig)\n\n    return NextResponse.json(radioConfig)\n  } catch (error) {\n    console.error('Config API: Error updating config:', error)\n    return NextResponse.json(\n      { error: 'Failed to update config' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":4219},"app/api/smtp/config/route.ts":{"content":"\nimport { NextRequest, NextResponse } from \"next/server\"\nimport fs from \"fs/promises\"\nimport path from \"path\"\n\nconst CONFIG_FILE = path.join(process.cwd(), \"smtp-config.json\")\n\ninterface SmtpConfig {\n  host: string\n  port: string\n  secure: boolean\n  user: string\n  pass: string\n  from: string\n  to: string\n}\n\nexport async function GET() {\n  try {\n    const configExists = await fs.access(CONFIG_FILE).then(() => true).catch(() => false)\n    \n    if (!configExists) {\n      // Return default config\n      return NextResponse.json({\n        host: \"\",\n        port: \"587\",\n        secure: false,\n        user: \"\",\n        pass: \"\",\n        from: \"notificaciones@canaldelcongreso.gob.mx\",\n        to: \"contacto@canaldelcongreso.gob.mx\",\n      })\n    }\n\n    const configData = await fs.readFile(CONFIG_FILE, \"utf-8\")\n    const config = JSON.parse(configData)\n    \n    // Don't return the password for security\n    return NextResponse.json({\n      ...config,\n      pass: config.pass ? \"••••••••\" : \"\",\n    })\n  } catch (error) {\n    console.error(\"Error loading SMTP config:\", error)\n    return NextResponse.json(\n      { success: false, message: \"Error al cargar la configuración SMTP\" },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const config: SmtpConfig = await request.json()\n\n    // Basic validation\n    if (!config.host || !config.port || !config.user || !config.from || !config.to) {\n      return NextResponse.json(\n        { success: false, message: \"Todos los campos son requeridos (host, puerto, usuario, email remitente y email destino)\" },\n        { status: 400 }\n      )\n    }\n\n    // Validate email formats\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(config.from)) {\n      return NextResponse.json(\n        { success: false, message: \"El email remitente no tiene un formato válido\" },\n        { status: 400 }\n      )\n    }\n    if (!emailRegex.test(config.to)) {\n      return NextResponse.json(\n        { success: false, message: \"El email destino no tiene un formato válido\" },\n        { status: 400 }\n      )\n    }\n\n    // Validate port\n    const port = parseInt(config.port)\n    if (isNaN(port) || port < 1 || port > 65535) {\n      return NextResponse.json(\n        { success: false, message: \"El puerto debe ser un número entre 1 y 65535\" },\n        { status: 400 }\n      )\n    }\n\n    // If password is masked, load the existing password\n    if (config.pass === \"••••••••\") {\n      try {\n        const existingConfigData = await fs.readFile(CONFIG_FILE, \"utf-8\")\n        const existingConfig = JSON.parse(existingConfigData)\n        if (!existingConfig.pass) {\n          return NextResponse.json(\n            { success: false, message: \"No hay una contraseña existente. Por favor, introduce una contraseña.\" },\n            { status: 400 }\n          )\n        }\n        config.pass = existingConfig.pass\n      } catch (error) {\n        return NextResponse.json(\n          { success: false, message: \"No se pudo recuperar la contraseña existente. Por favor, introduce una contraseña.\" },\n          { status: 400 }\n        )\n      }\n    } else if (!config.pass) {\n      return NextResponse.json(\n        { success: false, message: \"La contraseña es requerida\" },\n        { status: 400 }\n      )\n    }\n\n    // Save configuration\n    await fs.writeFile(CONFIG_FILE, JSON.stringify(config, null, 2))\n\n    return NextResponse.json({\n      success: true,\n      message: \"Configuración SMTP guardada correctamente\",\n    })\n  } catch (error) {\n    console.error(\"Error saving SMTP config:\", error)\n    return NextResponse.json(\n      { success: false, message: \"Error interno del servidor al guardar la configuración SMTP\" },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":3793},"app/api/defensoria-audiencia/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getDB } from '@/lib/database-env'\nimport { jwtVerify } from 'jose'\n\nconst JWT_SECRET = new TextEncoder().encode(\n  process.env.JWT_SECRET || 'default-secret-key-for-development-only'\n)\n\n// Helper function to verify authentication\nasync function verifyAuth(request: NextRequest): Promise<{ success: boolean; error?: string }> {\n  const token = request.cookies.get('auth-token')?.value\n\n  if (!token) {\n    return { success: false, error: 'Authentication token not found' }\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET)\n\n    // Additional security check: ensure the token has required fields\n    if (!payload.username || !payload.role) {\n      return { success: false, error: 'Invalid token payload' }\n    }\n\n    return { success: true }\n  } catch (error) {\n    return { success: false, error: 'Invalid or expired token' }\n  }\n}\n\n// Helper function to verify admin role\nasync function verifyAdminAuth(request: NextRequest): Promise<{ success: boolean; error?: string }> {\n  const token = request.cookies.get('auth-token')?.value\n\n  if (!token) {\n    return { success: false, error: 'Authentication token not found' }\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET)\n\n    // Additional security check: ensure the token has required fields and admin role\n    if (!payload.username || !payload.role) {\n      return { success: false, error: 'Invalid token payload' }\n    }\n\n    if (payload.role !== 'admin') {\n      return { success: false, error: 'Admin role required' }\n    }\n\n    return { success: true }\n  } catch (error) {\n    return { success: false, error: 'Invalid or expired token' }\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const db = getDB()\n\n    // Ensure defensoria_content table exists\n    await db.query(`\n      CREATE TABLE IF NOT EXISTS defensoria_content (\n        id SERIAL PRIMARY KEY,\n        section VARCHAR(100) NOT NULL,\n        title VARCHAR(255),\n        content TEXT,\n        image_url TEXT,\n        file_url TEXT,\n        metadata JSONB,\n        display_order INTEGER DEFAULT 0,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    const { searchParams } = new URL(request.url)\n    const section = searchParams.get('section')\n    const includeInactive = searchParams.get('admin') === 'true' // Admin can see all\n\n    // Check if admin access is requested\n    let isAdminRequest = false\n    if (includeInactive) {\n      // Admin access requested - verify authentication and authorization\n      const authResult = await verifyAdminAuth(request)\n      if (!authResult.success) {\n        return NextResponse.json(\n          { error: authResult.error || 'Unauthorized' },\n          { status: authResult.error === 'Admin role required' ? 403 : 401 }\n        )\n      }\n      isAdminRequest = true // Admin authenticated successfully\n    }\n\n    let query = `\n      SELECT id, section, title, content, image_url, file_url, metadata, display_order, is_active, created_at, updated_at\n      FROM defensoria_content\n    `\n    const params: any[] = []\n    let whereClause = ''\n\n    // If not admin request, filter only active content\n    if (!isAdminRequest) {\n      whereClause = 'WHERE is_active = true'\n    }\n\n    if (section) {\n      if (whereClause) {\n        whereClause += ` AND section = $${params.length + 1}`\n      } else {\n        whereClause = `WHERE section = $${params.length + 1}`\n      }\n      params.push(section)\n    }\n\n    query += whereClause\n    query += ` ORDER BY display_order ASC, created_at DESC`\n\n    console.log('Querying defensoria content from database...', { section })\n    const result = await db.query(query, params)\n\n    console.log('Defensoria content fetched from DB:', result.rows.length, 'items')\n\n    return NextResponse.json(result.rows)\n  } catch (error) {\n    console.error('Error fetching defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch defensoria content' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  // Verify admin authentication for write operations\n  const authResult = await verifyAdminAuth(request)\n  if (!authResult.success) {\n    return NextResponse.json(\n      { error: authResult.error || 'Unauthorized' },\n      { status: authResult.error === 'Admin role required' ? 403 : 401 }\n    )\n  }\n\n  try {\n    const db = getDB()\n    const formData = await request.formData()\n    const section = formData.get('section') as string\n    const title = formData.get('title') as string | undefined\n    const content = formData.get('content') as string | undefined\n    const image_url = formData.get('image_url') as string | undefined\n    const file_url = formData.get('file_url') as string | undefined\n    const metadata = formData.get('metadata') ? JSON.parse(formData.get('metadata') as string) : {}\n    const display_order = formData.get('display_order') ? parseInt(formData.get('display_order') as string, 10) : 0\n    const is_active = formData.get('is_active') ? formData.get('is_active') === 'true' : true\n\n    if (!section) {\n      return NextResponse.json(\n        { error: 'Section is required' },\n        { status: 400 }\n      )\n    }\n\n    console.log('Creating defensoria content:', { section, title, image_url, file_url })\n\n    const result = await db.query(`\n      INSERT INTO defensoria_content (section, title, content, image_url, file_url, metadata, display_order, is_active, updated_at)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP)\n      RETURNING *\n    `, [section, title, content, image_url, file_url, JSON.stringify(metadata), display_order, is_active])\n\n    console.log('Defensoria content created:', result.rows[0])\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error creating defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Failed to create defensoria content' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  // Verify admin authentication for write operations\n  const authResult = await verifyAdminAuth(request)\n  if (!authResult.success) {\n    return NextResponse.json(\n      { error: authResult.error || 'Unauthorized' },\n      { status: authResult.error === 'Admin role required' ? 403 : 401 }\n    )\n  }\n\n  try {\n    const db = getDB()\n    const formData = await request.formData()\n    const id = formData.get('id') as string\n    const section = formData.get('section') as string | undefined\n    const title = formData.get('title') as string | undefined\n    const content = formData.get('content') as string | undefined\n    const image_url = formData.get('image_url') as string | undefined\n    const file_url = formData.get('file_url') as string | undefined\n    const metadata = formData.get('metadata') ? JSON.parse(formData.get('metadata') as string) : undefined\n    const display_order = formData.get('display_order') ? parseInt(formData.get('display_order') as string, 10) : undefined\n    const is_active = formData.get('is_active') ? formData.get('is_active') === 'true' : undefined\n\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'ID is required' },\n        { status: 400 }\n      )\n    }\n\n    console.log('Updating defensoria content:', { id, section, title, image_url, file_url })\n\n    const result = await db.query(`\n      UPDATE defensoria_content \n      SET section = COALESCE($2, section),\n          title = COALESCE($3, title),\n          content = COALESCE($4, content),\n          image_url = COALESCE($5, image_url),\n          file_url = COALESCE($6, file_url),\n          metadata = COALESCE($7, metadata),\n          display_order = COALESCE($8, display_order),\n          is_active = COALESCE($9, is_active),\n          updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n      RETURNING *\n    `, [id, section, title, content, image_url, file_url, metadata ? JSON.stringify(metadata) : undefined, display_order, is_active])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Defensoria content not found' },\n        { status: 404 }\n      )\n    }\n\n    console.log('Defensoria content updated:', result.rows[0])\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Failed to update defensoria content' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  // Verify admin authentication for write operations\n  const authResult = await verifyAdminAuth(request)\n  if (!authResult.success) {\n    return NextResponse.json(\n      { error: authResult.error || 'Unauthorized' },\n      { status: authResult.error === 'Admin role required' ? 403 : 401 }\n    )\n  }\n\n  try {\n    const db = getDB()\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'ID is required' },\n        { status: 400 }\n      )\n    }\n\n    console.log('Deleting defensoria content:', { id })\n\n    const result = await db.query(`\n      DELETE FROM defensoria_content \n      WHERE id = $1\n      RETURNING *\n    `, [id])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Defensoria content not found' },\n        { status: 404 }\n      )\n    }\n\n    console.log('Defensoria content deleted:', result.rows[0])\n\n    return NextResponse.json({ message: 'Defensoria content deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete defensoria content' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":9867},"app/page.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\nimport { getLiveStreams, getNews, Organ } from \"@/lib/api\";\nimport { fetchPrograms } from \"@/lib/api-client\";\nimport { Program } from \"@/lib/api\";\nimport AutoScrollCarousel from \"@/components/auto-scroll-carousel\";\nimport ProgramNavigation from \"@/components/program-navigation\";\nimport EncuentraParticipacion from \"@/components/encuentra-participacion\";\nimport Navbar from \"@/components/navbar\";\nimport Footer from \"@/components/footer\";\nimport ProgramsGrid from \"@/components/programs-grid\";\nimport OrganImage from \"@/components/organ-image\";\nimport SafeImage from \"@/components/safe-image\";\n\ninterface NewsItem {\n  id: string;\n  title: string;\n  summary: string;\n  content: string;\n  imageUrl: string;\n  category?: string;\n  publishedAt: Date;\n  createdAt: Date;\n  status?: string; // Added status field for filtering\n}\n\n// Type for API response items\ninterface NewsItemAPI {\n  id: string;\n  title: string;\n  summary: string;\n  content: string;\n  imageUrl: string;\n  category?: string;\n  publishedAt: string;\n  createdAt: string;\n  status?: string;\n}\n\n// Force dynamic rendering and disable caching\nexport const dynamic = \"force-dynamic\";\nexport const revalidate = 0;\n\nexport default async function Home() {\n  // Automatically publish any scheduled news that should now be live\n  try {\n    await fetch(\n      `${process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\"}/api/news/publish-scheduled`,\n      {\n        method: \"POST\",\n        cache: \"no-store\",\n      },\n    );\n  } catch (error) {\n    console.error(\"Error auto-publishing scheduled news:\", error);\n  }\n\n  // Fetch live streams from API route to avoid client-side database imports\n  let liveStreams = [];\n  try {\n    const liveStreamsResponse = await fetch(\n      `${process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"}/api/live-streams?_=${Date.now()}`,\n      {\n        cache: \"no-store\", // Ensure fresh data from CMS\n        headers: {\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          Pragma: \"no-cache\",\n          Expires: \"0\",\n        },\n      },\n    );\n    if (liveStreamsResponse.ok) {\n      liveStreams = await liveStreamsResponse.json();\n    }\n  } catch (error) {\n    console.error(\"Failed to load live streams:\", error);\n    // Fallback to mock data if API fails\n    const { getLiveStreams } = await import(\"@/lib/api\");\n    liveStreams = await getLiveStreams();\n  }\n\n  // Fetch featured news first, then fill with regular news if needed\n  let news = [];\n  \n  // Step 1: Try to get featured news\n  try {\n    const featuredResponse = await fetch(\n      `${process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"}/api/news/featured`,\n      {\n        cache: \"no-store\", // Ensure fresh data from CMS\n        headers: {\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          Pragma: \"no-cache\",\n          Expires: \"0\",\n        },\n      },\n    );\n    \n    if (featuredResponse.ok) {\n      const featuredResult = await featuredResponse.json();\n      const featuredNews = featuredResult.news || [];\n      console.log(\"Homepage: Fetched featured news:\", featuredNews.length, \"items\");\n      news = featuredNews;\n    }\n  } catch (error) {\n    console.error(\"Failed to load featured news:\", error);\n  }\n\n  // Step 2: If we don't have enough featured news, fill with regular news\n  if (news.length < 5) {\n    try {\n      const newsResponse = await fetch(\n        `${process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"}/api/news`,\n        {\n          cache: \"no-store\", // Ensure fresh data from CMS\n          headers: {\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n            Pragma: \"no-cache\",\n            Expires: \"0\",\n          },\n        },\n      );\n      \n      if (newsResponse.ok) {\n        const newsResult = await newsResponse.json();\n        const allNews = newsResult.news || newsResult; // Handle both paginated and old format\n        console.log(\"Homepage: Fetched regular news as fallback:\", allNews.length, \"items\");\n        \n        // Filter to only show published news with publishedAt <= current date\n        const now = new Date();\n        const publishedNews = allNews.filter((item: NewsItemAPI) => {\n          const publishedDate = new Date(item.publishedAt || item.createdAt);\n          return (!item.status || item.status === 'published') && publishedDate <= now;\n        }).sort((a: NewsItemAPI, b: NewsItemAPI) => {\n          // Sort by publishedAt date, most recent first\n          const aDate = new Date(a.publishedAt || a.createdAt);\n          const bDate = new Date(b.publishedAt || b.createdAt);\n          return bDate.getTime() - aDate.getTime();\n        });\n\n        // Get featured news IDs to avoid duplicates\n        const featuredIds = new Set(news.map((item: any) => item.id));\n        \n        // Fill remaining slots with regular news, avoiding duplicates\n        const regularNews = publishedNews.filter((item: any) => !featuredIds.has(item.id));\n        const neededCount = 5 - news.length;\n        const additionalNews = regularNews.slice(0, neededCount);\n        \n        news = [...news, ...additionalNews];\n        console.log(\"Homepage: Final news count:\", news.length, \"items (featured + regular)\");\n      } else {\n        console.error(\n          \"Homepage: Regular news API response not OK:\",\n          newsResponse.status,\n          newsResponse.statusText,\n        );\n      }\n    } catch (error) {\n      console.error(\"Failed to load regular news as fallback:\", error);\n    }\n  }\n  \n  console.log(\"Homepage: Using\", news.length, \"news items for display\");\n\n  // Parliamentary groups removed from CMS\n\n  // Fetch organs from database API\n  let organs: Organ[] = [];\n  try {\n    const organsResponse = await fetch(\n      `${process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"}/api/organs`,\n      {\n        cache: \"no-store\",\n        headers: {\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          Pragma: \"no-cache\",\n          Expires: \"0\",\n        },\n      },\n    );\n    if (organsResponse.ok) {\n      organs = await organsResponse.json();\n    }\n  } catch (error) {\n    console.error(\"Failed to load organs:\", error);\n    organs = [];\n  }\n\n  // Fetch homepage configuration\n  let homepageConfig: any = {};\n  try {\n    const configResponse = await fetch(\n      `${process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"}/api/homepage-config`,\n      {\n        cache: \"no-store\",\n        headers: {\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          Pragma: \"no-cache\",\n          Expires: \"0\",\n        },\n      },\n    );\n    if (configResponse.ok) {\n      const configArray = await configResponse.json();\n      console.log(\"Homepage: Fetched config data:\", configArray);\n      // Convert array to object for easier access\n      homepageConfig = configArray.reduce((acc: any, item: any) => {\n        acc[item.section] = item;\n        return acc;\n      }, {});\n      console.log(\"Homepage: Processed config:\", homepageConfig);\n    } else {\n      console.error(\n        \"Homepage: Config API response not OK:\",\n        configResponse.status,\n        configResponse.statusText,\n      );\n    }\n  } catch (error) {\n    console.error(\"Failed to load homepage config:\", error);\n  }\n\n  let programs: Program[] = [];\n  try {\n    programs = await fetchPrograms();\n  } catch (error) {\n    console.error(\"Failed to load programs:\", error);\n    // Try to fetch programs directly from API as fallback\n    try {\n      const programsResponse = await fetch(\n        `${process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"}/api/programs`,\n        {\n          cache: \"no-store\",\n          headers: {\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n            Pragma: \"no-cache\",\n            Expires: \"0\",\n          },\n        },\n      );\n      if (programsResponse.ok) {\n        programs = await programsResponse.json();\n        console.log(\n          \"Homepage: Using fallback programs:\",\n          programs.length,\n          \"items\",\n        );\n      }\n    } catch (fallbackError) {\n      console.error(\"Homepage: Fallback programs also failed:\", fallbackError);\n      programs = [];\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <main className=\"flex-grow bg-[url('/images/light-hexagon-pattern.png')] bg-cover\">\n        {/* Live Now Section */}\n        <section\n          className=\"text-white py-6\"\n          style={{\n            backgroundColor: \"#3b0764\",\n            backgroundImage: homepageConfig.liveSection?.backgroundImageUrl\n              ? `url(${homepageConfig.liveSection.backgroundImageUrl})`\n              : \"url(/images/purple-pattern-bg.png)\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <div className=\"container mx-auto px-4\">\n            <AutoScrollCarousel\n              items={liveStreams}\n              showLiveIndicator={\n                homepageConfig.liveSection?.configData?.showLiveIndicator !==\n                false\n              }\n              liveIndicatorText={\n                homepageConfig.liveSection?.configData?.liveIndicatorText ||\n                \"EN VIVO AHORA\"\n              }\n            />\n          </div>\n        </section>\n\n        {/* Program Navigation */}\n        <ProgramNavigation />\n\n        {/* Our Programs Section */}\n        <section className=\"py-8 \">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-4xl font-bold mb-8 text-center text-[#e91e63]\">\n              NUESTROS PROGRAMAS\n            </h2>\n\n            <ProgramsGrid programs={programs} />\n\n            <div className=\"flex justify-center mt-6\">\n              <button className=\"text-[#e91e63] font-medium hover:text-[#f06292] transition-colors flex flex-col items-center\">\n                Ver más\n                <svg\n                  className=\"w-8 h-8 mt-1 text-[#e91e63]\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"currentColor\"\n                >\n                  <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"></path>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </section>\n\n        {/* News Section */}\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-5xl font-bold mb-10 text-center text-[#3b0764]\">\n              NOTICIAS\n            </h2>\n\n            {news && news.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-[40%_60%] gap-6\">\n                {/* Main News */}\n                <div>\n                  <Link href={`/noticias/${news[0].id}`} className=\"block h-full\">\n                    <div className=\"relative h-[400px] md:h-[497px] w-full rounded-lg overflow-hidden\">\n                      <SafeImage\n                        src={news[0].imageUrl || \"/placeholder.svg\"}\n                        alt={news[0].title}\n                        fill\n                        className=\"object-cover\"\n                        unoptimized={true}\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\"></div>\n                      <div className=\"absolute bottom-0 left-0 right-0 p-6\">\n                        <h3 className=\"font-bold text-white text-2xl\">\n                          {news[0].title}\n                        </h3>\n                      </div>\n                    </div>\n                  </Link>\n                </div>\n\n                {/* Small News */}\n                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 md:grid-rows-2\">\n                  {news.slice(1, 5).map((item: NewsItem) => (\n                    <Link key={item.id} href={`/noticias/${item.id}`} className=\"block h-full\">\n                      <div className=\"relative h-[240px] rounded-lg overflow-hidden\">\n                        <SafeImage\n                          src={item.imageUrl || \"/placeholder.svg\"}\n                          alt={item.title}\n                          fill\n                          className=\"object-cover\"\n                          unoptimized={true}\n                        />\n                        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\"></div>\n                        <div className=\"absolute bottom-0 left-0 right-0 p-3\">\n                          <h3 className=\"font-bold text-white text-sm line-clamp-2\">\n                            {item.title}\n                          </h3>\n                        </div>\n                      </div>\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">\n                  No hay noticias disponibles\n                </h3>\n                <p className=\"text-gray-600\">\n                  Las noticias aparecerán aquí cuando sean publicadas desde el\n                  panel administrativo.\n                </p>\n              </div>\n            )}\n\n            {/* Ver más link */}\n            {news && news.length > 0 && (\n              <div className=\"flex justify-center mt-10\">\n                <Link\n                  href=\"/noticias/todas\"\n                  className=\"text-[#e91e63] font-medium hover:text-[#f06292] transition-colors flex flex-col items-center\"\n                >\n                  Ver más\n                  <svg\n                    className=\"w-8 h-8 mt-1 text-[#e91e63]\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"currentColor\"\n                  >\n                    <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"></path>\n                  </svg>\n                </Link>\n              </div>\n            )}\n          </div>\n        </section>\n\n\n        {/* Find Participation Section */}\n        <EncuentraParticipacion parliamentaryGroups={[]} />\n\n        {/* Congress Channel Organs Section */}\n        <section className=\"py-9\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-4xl font-bold mb-9 text-center text-[#3b0764]\">\n              ÓRGANOS DEL CANAL DEL CONGRESO\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-7\">\n              {organs.map((organ) => (\n                <div key={organ.id} className=\"rounded-lg overflow-hidden\">\n                  {organ.url ? (\n                    <a\n                      href={organ.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"block relative h-69 cursor-pointer\"\n                    >\n                      <Image\n                        src={organ.imageUrl || \"/placeholder.svg\"}\n                        alt={organ.title}\n                        width={320}\n                        height={240}\n                        className=\"object-cover w-full h-full\"\n                      />\n                    </a>\n                  ) : (\n                    <div className=\"relative h-69\">\n                      <Image\n                        src={organ.imageUrl || \"/placeholder.svg\"}\n                        alt={organ.title}\n                        width={320}\n                        height={240}\n                        className=\"object-cover w-full h-full\"\n                      />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Download App Section */}\n        <section className=\"w-full\">\n          <div className=\"relative w-full h-[10.35rem] md:h-[27.6rem] overflow-hidden\">\n            {/* Mobile Image - Only show on mobile screens when mobileImageUrl exists */}\n            {homepageConfig.downloadApp?.mobileImageUrl && (\n              <Image\n                src={homepageConfig.downloadApp.mobileImageUrl}\n                alt={\n                  homepageConfig.downloadApp?.title || \"Descarga nuestra app\"\n                }\n                fill\n                className=\"object-cover object-center block md:hidden\"\n                priority={false}\n                unoptimized={true}\n              />\n            )}\n\n            {/* Desktop Image - Show on desktop screens, or on all screens if no mobile image exists */}\n            <Image\n              src={\n                homepageConfig.downloadApp?.heroImageUrl ||\n                \"/images/descarga-app-nueva.png\"\n              }\n              alt={homepageConfig.downloadApp?.title || \"Descarga nuestra app\"}\n              fill\n              className={`object-cover object-center ${homepageConfig.downloadApp?.mobileImageUrl ? \"hidden md:block\" : \"block\"}`}\n              priority={false}\n              unoptimized={true}\n            />\n\n            {(homepageConfig.downloadApp?.title ||\n              homepageConfig.downloadApp?.description) && (\n              <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center px-4\">\n                <div className=\"text-center text-white max-w-sm md:max-w-2xl\">\n                  {homepageConfig.downloadApp?.title && (\n                    <h2 className=\"text-xl md:text-4xl font-bold mb-1 md:mb-2\">\n                      {homepageConfig.downloadApp.title}\n                    </h2>\n                  )}\n                  {homepageConfig.downloadApp?.description && (\n                    <p className=\"text-xs md:text-lg\">\n                      {homepageConfig.downloadApp.description}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17880},"lib/database.ts":{"content":"\nimport { Pool } from 'pg'\n\nexport interface DatabaseConfig {\n  host: string\n  port: number\n  database: string\n  username: string\n  password: string\n  ssl?: boolean\n}\n\nlet pool: Pool | null = null\n\n// Initialize database connection automatically if environment variables are available\nfunction initializeConnection() {\n  if (!pool && process.env.DATABASE_URL) {\n    try {\n      pool = new Pool({\n        connectionString: process.env.DATABASE_URL,\n        ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false },\n        max: 20,\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 10000,\n\n      })\n      console.log('Database connection initialized from DATABASE_URL')\n    } catch (error) {\n      console.error('Failed to initialize database connection:', error)\n    }\n  } else if (!pool && process.env.PGHOST) {\n    try {\n      pool = new Pool({\n        host: process.env.PGHOST,\n        port: parseInt(process.env.PGPORT || '5432'),\n        database: process.env.PGDATABASE,\n        user: process.env.PGUSER,\n        password: process.env.PGPASSWORD,\n        ssl: process.env.PGHOST.includes('localhost') ? false : { rejectUnauthorized: false },\n        max: 20,\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 10000,\n\n      })\n      console.log('Database connection initialized from PG environment variables')\n    } catch (error) {\n      console.error('Failed to initialize database connection:', error)\n    }\n  }\n}\n\n// Auto-initialize on module load\ninitializeConnection()\n\nexport function createDatabaseConnection(config: DatabaseConfig): Pool {\n  if (pool) {\n    pool.end()\n  }\n  \n  pool = new Pool({\n    host: config.host,\n    port: config.port,\n    database: config.database,\n    user: config.username,\n    password: config.password,\n    ssl: config.ssl ? { rejectUnauthorized: false } : false,\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 10000,\n  })\n  \n  return pool\n}\n\nexport function getDatabaseConnection(): Pool | null {\n  if (!pool) {\n    initializeConnection()\n  }\n  return pool\n}\n\nexport { pool }\n\n// Export query function for compatibility with existing route handlers\nexport async function query(text: string, params?: any[]): Promise<any> {\n  const connection = getDatabaseConnection()\n  if (!connection) {\n    throw new Error('Database connection not available')\n  }\n  return connection.query(text, params)\n}\n\nexport async function testDatabaseConnection(config: DatabaseConfig): Promise<boolean> {\n  try {\n    const testPool = new Pool({\n      host: config.host,\n      port: config.port,\n      database: config.database,\n      user: config.username,\n      password: config.password,\n      ssl: config.ssl ? { rejectUnauthorized: false } : false,\n    })\n    \n    const client = await testPool.connect()\n    await client.query('SELECT 1')\n    client.release()\n    await testPool.end()\n    \n    return true\n  } catch (error) {\n    console.error('Database connection test failed:', error)\n    return false\n  }\n}\n\n// Database schema creation functions\nexport async function createTables(pool: Pool): Promise<void> {\n  const client = await pool.connect()\n  \n  try {\n    await client.query('BEGIN')\n    \n    // Live streams table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS live_streams (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        thumbnail_url TEXT,\n        stream_url TEXT,\n        is_live BOOLEAN DEFAULT false,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Programs table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS programs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // News table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS news (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        summary TEXT,\n        content TEXT,\n        image_url TEXT,\n        published_at TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Organs table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS organs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Parliamentary groups table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS parliamentary_groups (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        abbreviation VARCHAR(10),\n        image_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Legislators table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS legislators (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        parliamentary_group_id INTEGER REFERENCES parliamentary_groups(id),\n        legislature VARCHAR(50),\n        state VARCHAR(100),\n        type VARCHAR(100),\n        gender CHAR(1) CHECK (gender IN ('M', 'F')),\n        status VARCHAR(20) DEFAULT 'Activo',\n        image_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Radio programs table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS radio_programs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        audio_url TEXT,\n        duration VARCHAR(20),\n        category VARCHAR(50),\n        published_at TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Radio podcasts table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS radio_podcasts (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        subtitle TEXT,\n        description TEXT,\n        duration INTEGER,\n        status VARCHAR(20) DEFAULT 'active',\n        type VARCHAR(50),\n        publish_date DATE,\n        publish_time TIME,\n        audio_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Users table for authentication\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(100) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        role VARCHAR(50) DEFAULT 'admin',\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    // Transparency sections table for CMS-editable content\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS transparency_sections (\n        id SERIAL PRIMARY KEY,\n        section_key VARCHAR(100) UNIQUE NOT NULL,\n        section_title VARCHAR(255) NOT NULL,\n        icon_type VARCHAR(50),\n        cards_data JSONB NOT NULL DEFAULT '[]'::jsonb,\n        display_order INTEGER DEFAULT 0,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    await client.query('COMMIT')\n  } catch (error) {\n    await client.query('ROLLBACK')\n    throw error\n  } finally {\n    client.release()\n  }\n}\n","size_bytes":7314},"app/transparencia/compromisos/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport Link from \"next/link\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\n\nexport default function CompromisosPage() {\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"min-h-screen py-12\">\n        <div className=\"container mx-auto px-4\">\n          <h1 className=\"text-3xl font-bold mb-8\">Compromisos con la Transparencia</h1>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            <Link\n              href=\"/transparencia/compromisos/tu-canal\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">Tu Canal</h2>\n              <p className=\"text-gray-600\">Información sobre el Canal del Congreso</p>\n            </Link>\n\n            <Link\n              href=\"/transparencia/compromisos/normatividad\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">Normatividad</h2>\n              <p className=\"text-gray-600\">Marco normativo aplicable</p>\n            </Link>\n\n            <Link\n              href=\"/transparencia/compromisos/estructura\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">Estructura y Presupuesto</h2>\n              <p className=\"text-gray-600\">Organización y recursos financieros</p>\n            </Link>\n\n            <Link\n              href=\"/transparencia/compromisos/informacion\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">Información Relevante</h2>\n              <p className=\"text-gray-600\">Información de utilidad pública</p>\n            </Link>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <h2 className=\"text-2xl font-bold mb-4\">Nuestro Compromiso con la Transparencia</h2>\n            <p className=\"text-gray-700 mb-4\">\n              El Canal del Congreso está comprometido con la transparencia y el acceso a la información pública. En esta\n              sección encontrarás toda la información relacionada con nuestras obligaciones de transparencia, estructura\n              organizacional, normatividad y recursos públicos.\n            </p>\n            <p className=\"text-gray-700\">\n              Ponemos a tu disposición información clara y accesible sobre nuestro funcionamiento, con el objetivo de\n              fomentar la rendición de cuentas y la participación ciudadana.\n            </p>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":2891},"app/api/auth/verify/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-key-change-in-production'\n\nexport async function GET() {\n  try {\n    const cookieStore = await cookies()\n    const token = cookieStore.get('auth-token')\n\n    if (!token) {\n      return NextResponse.json({ authenticated: false }, { status: 401 })\n    }\n\n    const decoded = jwt.verify(token.value, JWT_SECRET) as any\n\n    return NextResponse.json({ \n      authenticated: true, \n      user: { username: decoded.username, role: decoded.role }\n    })\n  } catch (error) {\n    return NextResponse.json({ authenticated: false }, { status: 401 })\n  }\n}","size_bytes":735},"components/video-grid.tsx":{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\n\ninterface VideoItem {\n  id: number\n  title: string\n  imageUrl: string\n  videoUrl: string\n}\n\ninterface VideoGridProps {\n  videos: VideoItem[]\n}\n\nexport default function VideoGrid({ videos }: VideoGridProps) {\n  // Center video is the one in the middle (index 2 if there are 5 videos)\n  const centerVideoIndex = Math.floor(videos.length / 2)\n  const centerVideo = videos[centerVideoIndex]\n\n  // Videos before and after the center video\n  const leftVideos = videos.slice(0, centerVideoIndex)\n  const rightVideos = videos.slice(centerVideoIndex + 1)\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 max-w-6xl mx-auto\">\n      {/* Left column videos */}\n      <div className=\"md:col-span-2 grid grid-rows-2 gap-4\">\n        {leftVideos.map((video) => (\n          <Link key={video.id} href={video.videoUrl} className=\"block\">\n            <div className=\"relative overflow-hidden rounded-lg h-[200px] group\">\n              <Image\n                src={video.imageUrl || \"/placeholder.svg\"}\n                alt={video.title}\n                fill\n                className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n              />\n              <div className=\"absolute inset-0 bg-black/30 flex items-center justify-center\">\n                <div className=\"rounded-full bg-white/30 p-4 backdrop-blur-sm\">\n                  <svg\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    className=\"w-10 h-10 text-white\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <polygon points=\"5 3 19 12 5 21 5 3\" fill=\"currentColor\" />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white\">\n                <h3 className=\"text-base font-medium line-clamp-2\">{video.title}</h3>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n\n      {/* Center video (larger) */}\n      {centerVideo && (\n        <div className=\"md:col-span-1\">\n          <Link href={centerVideo.videoUrl} className=\"block\">\n            <div className=\"relative overflow-hidden rounded-lg h-[410px] group\">\n              <Image\n                src={centerVideo.imageUrl || \"/placeholder.svg\"}\n                alt={centerVideo.title}\n                fill\n                className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n              />\n              <div className=\"absolute inset-0 bg-black/30 flex items-center justify-center\">\n                <div className=\"rounded-full bg-white/30 p-4 backdrop-blur-sm\">\n                  <svg\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    className=\"w-12 h-12 text-white\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <polygon points=\"5 3 19 12 5 21 5 3\" fill=\"currentColor\" />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white\">\n                <h3 className=\"text-lg font-medium line-clamp-3\">{centerVideo.title}</h3>\n              </div>\n            </div>\n          </Link>\n        </div>\n      )}\n\n      {/* Right column videos */}\n      <div className=\"md:col-span-2 grid grid-rows-2 gap-4\">\n        {rightVideos.map((video) => (\n          <Link key={video.id} href={video.videoUrl} className=\"block\">\n            <div className=\"relative overflow-hidden rounded-lg h-[200px] group\">\n              <Image\n                src={video.imageUrl || \"/placeholder.svg\"}\n                alt={video.title}\n                fill\n                className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n              />\n              <div className=\"absolute inset-0 bg-black/30 flex items-center justify-center\">\n                <div className=\"rounded-full bg-white/30 p-4 backdrop-blur-sm\">\n                  <svg\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    className=\"w-10 h-10 text-white\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <polygon points=\"5 3 19 12 5 21 5 3\" fill=\"currentColor\" />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white\">\n                <h3 className=\"text-base font-medium line-clamp-2\">{video.title}</h3>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </div>\n  )\n}\n","size_bytes":4749},"app/api/admin/init-programs/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST() {\n  try {\n    const pool = createDatabaseConnectionFromEnv()\n    \n    // Create programs table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS programs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    await pool.end()\n\n    return NextResponse.json({ \n      message: 'Programs table created successfully' \n    })\n  } catch (error) {\n    console.error('Error initializing programs table:', error)\n    return NextResponse.json(\n      { error: 'Failed to initialize programs table' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":868},"components/tinymce-editor.tsx":{"content":"\"use client\"\n\nimport React, { useRef } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\ninterface TinyMCEEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  height?: number;\n  readOnly?: boolean;\n}\n\nexport default function TinyMCEEditor({\n  value,\n  onChange,\n  placeholder = \"Escribe tu contenido aquí...\",\n  height = 400,\n  readOnly = false\n}: TinyMCEEditorProps) {\n  const editorRef = useRef<any>(null);\n\n  // Handle image upload integration with existing API\n  const handleImageUpload = (blobInfo: any, progress: (percent: number) => void): Promise<string> => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const formData = new FormData();\n        formData.append('file', blobInfo.blob(), blobInfo.filename());\n        formData.append('type', 'news');\n\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          resolve(result.imageUrl);\n        } else {\n          reject('Error uploading image');\n        }\n      } catch (error) {\n        reject('Error uploading image: ' + error);\n      }\n    });\n  };\n\n  const handleEditorChange = (content: string) => {\n    onChange(content);\n  };\n\n  return (\n    <div className=\"w-full\">\n      <Editor\n        apiKey={process.env.NEXT_PUBLIC_TINYMCE_API_KEY || \"no-api-key\"}\n        onInit={(evt, editor) => editorRef.current = editor}\n        value={value}\n        onEditorChange={handleEditorChange}\n        disabled={readOnly}\n        init={{\n          height: height,\n          menubar: false,\n          language: 'es',\n          content_style: `\n            body { \n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; \n              font-size: 14px; \n              line-height: 1.6;\n              margin: 1rem;\n            }\n            .two-column-layout {\n              column-count: 2;\n              column-gap: 2rem;\n              column-rule: 1px solid #e5e7eb;\n            }\n            .image-container {\n              position: relative;\n              display: block;\n              margin: 10px 0;\n              max-width: 100%;\n            }\n          `,\n          plugins: [\n            'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\n            'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\n            'insertdatetime', 'media', 'table', 'help', 'wordcount', 'paste',\n            'nonbreaking', 'pagebreak', 'save', 'directionality', 'quickbars'\n          ],\n          toolbar: [\n            'undo redo | blocks fontsize | bold italic underline strikethrough |',\n            'alignleft aligncenter alignright alignjustify | outdent indent |',\n            'numlist bullist | forecolor backcolor | link image media |',\n            'table | customColumns | code preview fullscreen | help'\n          ].join(' '),\n          block_formats: 'Párrafo=p; Encabezado 1=h1; Encabezado 2=h2; Encabezado 3=h3; Encabezado 4=h4; Preformateado=pre',\n          fontsize_formats: '8pt 10pt 12pt 14pt 16pt 18pt 24pt 36pt',\n          paste_as_text: false,\n          paste_data_images: true,\n          automatic_uploads: true,\n          file_picker_types: 'image',\n          images_upload_handler: handleImageUpload,\n          images_upload_url: '/api/upload',\n          images_upload_base_path: '',\n          image_advtab: true,\n          image_description: false,\n          image_dimensions: false,\n          image_class_list: [\n            { title: 'Imagen responsive', value: 'img-responsive' },\n            { title: 'Imagen centrada', value: 'mx-auto block' },\n            { title: 'Imagen flotante izquierda', value: 'float-left mr-4 mb-2' },\n            { title: 'Imagen flotante derecha', value: 'float-right ml-4 mb-2' }\n          ],\n          table_default_attributes: {\n            'class': 'table table-striped table-bordered'\n          },\n          link_default_target: '_blank',\n          placeholder: placeholder,\n          branding: false,\n          promotion: false,\n          setup: (editor: any) => {\n            // Add custom button for two-column layout\n            editor.ui.registry.addButton('columns', {\n              text: '📰 Columnas',\n              tooltip: 'Activar/Desactivar dos columnas',\n              onAction: function() {\n                const content = editor.getContent();\n                if (content.includes('two-column-layout')) {\n                  const newContent = content.replace(/class=\"[^\"]*two-column-layout[^\"]*\"/g, '');\n                  editor.setContent(newContent);\n                } else {\n                  editor.setContent(`<div class=\"two-column-layout\">${content}</div>`);\n                }\n              }\n            });\n\n            // Add custom toolbar with columns button\n            editor.on('init', function() {\n              editor.ui.registry.addButton('customColumns', {\n                text: '📰',\n                tooltip: 'Activar/Desactivar dos columnas',\n                onAction: function() {\n                  const content = editor.getContent();\n                  if (content.includes('two-column-layout')) {\n                    const newContent = content.replace(/<div class=\"two-column-layout\">([\\s\\S]*?)<\\/div>/g, '$1');\n                    editor.setContent(newContent);\n                  } else {\n                    editor.setContent(`<div class=\"two-column-layout\">${content}</div>`);\n                  }\n                }\n              });\n            });\n          },\n          toolbar_mode: 'sliding',\n          contextmenu: 'link image table',\n          quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote',\n          quickbars_insert_toolbar: 'quickimage quicktable',\n          content_css: false,\n          skin: 'oxide',\n          valid_elements: 'p,h1,h2,h3,h4,h5,h6,strong,em,u,s,a[href|target|title],img[src|alt|title|width|height|class],ul,ol,li,br,blockquote,table,thead,tbody,tr,th[scope],td[colspan|rowspan],span[class],div[class],pre,code',\n          extended_valid_elements: 'div[class|style],span[class|style]',\n          forced_root_block: 'p',\n          remove_trailing_brs: true,\n          convert_urls: false,\n          relative_urls: false,\n          entity_encoding: 'html'\n        }}\n      />\n    </div>\n  );\n}","size_bytes":6397},"app/api/pages/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\n// This would normally come from your database\nlet pageContent = [\n  {\n    id: '1',\n    page: 'transparencia',\n    section: 'main',\n    title: 'Transparencia - Página Principal',\n    content: `Hero section content...`,\n    metadata: { hero: true },\n    updated_at: new Date().toISOString(),\n  },\n  // More pages...\n]\n\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const id = params.id\n    \n    const page = pageContent.find(p => p.id === id)\n    \n    if (!page) {\n      return NextResponse.json({ error: 'Página no encontrada' }, { status: 404 })\n    }\n    \n    return NextResponse.json(page)\n  } catch (error) {\n    console.error('Error fetching page:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const id = params.id\n    const data = await request.json()\n    \n    const pageIndex = pageContent.findIndex(p => p.id === id)\n    \n    if (pageIndex === -1) {\n      return NextResponse.json({ error: 'Página no encontrada' }, { status: 404 })\n    }\n    \n    pageContent[pageIndex] = {\n      ...pageContent[pageIndex],\n      title: data.title,\n      content: data.content,\n      metadata: data.metadata,\n      updated_at: new Date().toISOString(),\n    }\n    \n    return NextResponse.json(pageContent[pageIndex])\n  } catch (error) {\n    console.error('Error updating page:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const id = params.id\n    \n    const pageIndex = pageContent.findIndex(p => p.id === id)\n    \n    if (pageIndex === -1) {\n      return NextResponse.json({ error: 'Página no encontrada' }, { status: 404 })\n    }\n    \n    pageContent.splice(pageIndex, 1)\n    \n    return NextResponse.json({ message: 'Página eliminada correctamente' })\n  } catch (error) {\n    console.error('Error deleting page:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n","size_bytes":2406},"app/admin/homepage-config/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { Upload, Save, Image as ImageIcon } from \"lucide-react\"\n\ninterface HomepageConfig {\n  id: string\n  section: string\n  title?: string\n  description?: string\n  backgroundImageUrl?: string\n  heroImageUrl?: string\n  logoUrl?: string\n  additionalImages?: any\n  configData?: any\n  isActive: boolean\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport default function HomepageConfigAdmin() {\n  const [configs, setConfigs] = useState<HomepageConfig[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [liveSectionConfig, setLiveSectionConfig] = useState({\n    title: '',\n    description: '',\n    backgroundImageUrl: '',\n    showLiveIndicator: false,\n    liveIndicatorText: 'EN VIVO AHORA'\n  })\n\n  const [downloadAppConfig, setDownloadAppConfig] = useState({\n    title: '',\n    description: '',\n    heroImageUrl: '',\n    mobileImageUrl: ''\n  })\n\n  useEffect(() => {\n    loadConfigs()\n  }, [])\n\n  const loadConfigs = async () => {\n    try {\n      const response = await fetch('/api/homepage-config')\n      if (response.ok) {\n        const data = await response.json()\n        setConfigs(data)\n\n        // Load live section config\n        const liveSection = data.find((c: any) => c.section === 'liveSection')\n        if (liveSection) {\n          setLiveSectionConfig({\n            title: String(liveSection.title || ''),\n            description: String(liveSection.description || ''),\n            backgroundImageUrl: String(liveSection.backgroundImageUrl || ''),\n            showLiveIndicator: liveSection.configData?.showLiveIndicator || false,\n            liveIndicatorText: String(liveSection.configData?.liveIndicatorText || 'EN VIVO AHORA')\n          })\n        }\n\n        // Load download app config\n        const downloadApp = data.find((c: any) => c.section === 'downloadApp')\n        if (downloadApp) {\n          const mobileImageUrl = downloadApp.mobileImageUrl || '';\n          console.log('Loading download app config, mobileImageUrl:', mobileImageUrl);\n          console.log('Full downloadApp object:', downloadApp);\n          setDownloadAppConfig({\n            title: String(downloadApp.title || ''),\n            description: String(downloadApp.description || ''),\n            heroImageUrl: String(downloadApp.heroImageUrl || ''),\n            mobileImageUrl: String(mobileImageUrl)\n          })\n        }\n      }\n    } catch (error) {\n      console.error('Error loading homepage config:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al cargar la configuración\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleFileUpload = async (file: File, section: string, type: string) => {\n    try {\n      const formData = new FormData()\n      formData.append('file', file)\n      formData.append('folder', 'homepage')\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (!response.ok) throw new Error('Failed to upload file')\n\n      const result = await response.json()\n\n      if (section === 'liveSection' && type === 'background') {\n        setLiveSectionConfig(prev => ({\n          ...prev,\n          backgroundImageUrl: result.url\n        }))\n      } else if (section === 'downloadApp' && type === 'hero') {\n        setDownloadAppConfig(prev => ({\n          ...prev,\n          heroImageUrl: result.url\n        }))\n      } else if (section === 'downloadApp' && type === 'mobile') {\n        setDownloadAppConfig(prev => ({\n          ...prev,\n          mobileImageUrl: result.url\n        }))\n      }\n\n      toast({\n        title: \"Éxito\",\n        description: \"Imagen subida correctamente\"\n      })\n    } catch (error) {\n      console.error('Error uploading file:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al subir la imagen\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const saveLiveSectionConfig = async () => {\n    try {\n      const existingConfig = configs.find((c: any) => c.section === 'liveSection')\n      console.log('Saving live section config:', liveSectionConfig)\n      console.log('Existing config:', existingConfig)\n\n      // Ensure we're sending proper data\n      const configData = {\n        section: 'liveSection',\n        title: liveSectionConfig.title || null,\n        description: liveSectionConfig.description || null,\n        backgroundImageUrl: liveSectionConfig.backgroundImageUrl || null,\n        configData: {\n          showLiveIndicator: liveSectionConfig.showLiveIndicator,\n          liveIndicatorText: liveSectionConfig.liveIndicatorText || 'EN VIVO AHORA'\n        }\n      }\n\n      console.log('Sending config data:', configData)\n\n      if (existingConfig) {\n        // Update existing\n        const response = await fetch('/api/homepage-config', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(configData)\n        })\n\n        if (!response.ok) {\n          const errorText = await response.text()\n          console.error('Update response error:', errorText)\n          throw new Error(`Failed to update config: ${response.status} ${errorText}`)\n        }\n      } else {\n        // Create new\n        const requestBody = {\n          ...configData,\n          isActive: true\n        }\n        console.log('Creating new config with body:', requestBody)\n\n        const response = await fetch('/api/homepage-config', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        })\n\n        if (!response.ok) {\n          const errorText = await response.text()\n          console.error('Create response error:', errorText)\n          throw new Error(`Failed to create config: ${response.status} ${errorText}`)\n        }\n      }\n\n      await loadConfigs()\n      toast({\n        title: \"✅ Configuración Guardada\",\n        description: \"La configuración de la sección 'En Vivo Ahora' se ha guardado exitosamente\",\n        duration: 4000,\n      })\n    } catch (error) {\n      console.error('Error saving live section config:', error)\n      toast({\n        title: \"Error\",\n        description: `Error al guardar la configuración: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const saveDownloadAppConfig = async () => {\n    try {\n      const existingConfig = configs.find((c: any) => c.section === 'downloadApp')\n      console.log('Saving download app config:', downloadAppConfig)\n      console.log('Existing config:', existingConfig)\n\n      // Ensure we're sending proper data\n      const configData = {\n        section: 'downloadApp',\n        title: downloadAppConfig.title || null,\n        description: downloadAppConfig.description || null,\n        heroImageUrl: downloadAppConfig.heroImageUrl || null,\n        mobileImageUrl: downloadAppConfig.mobileImageUrl || null\n      }\n\n      console.log('Sending config data:', configData)\n\n      if (existingConfig) {\n        // Update existing\n        const response = await fetch('/api/homepage-config', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(configData)\n        })\n\n        if (!response.ok) {\n          const errorText = await response.text()\n          console.error('Update response error:', errorText)\n          throw new Error(`Failed to update config: ${response.status} ${errorText}`)\n        }\n      } else {\n        // Create new\n        const requestBody = {\n          ...configData,\n          isActive: true\n        }\n        console.log('Creating new config with body:', requestBody)\n\n        const response = await fetch('/api/homepage-config', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        })\n\n        if (!response.ok) {\n          const errorText = await response.text()\n          console.error('Create response error:', errorText)\n          throw new Error(`Failed to create config: ${response.status} ${errorText}`)\n        }\n      }\n\n      await loadConfigs()\n      toast({\n        title: \"✅ Configuración Guardada\", \n        description: \"La configuración de la sección 'Descarga App' se ha guardado exitosamente\",\n        duration: 4000,\n      })\n    } catch (error) {\n      console.error('Error saving download app config:', error)\n      toast({\n        title: \"Error\",\n        description: `Error al guardar la configuración: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  if (isLoading) {\n    return <div className=\"p-6\">Cargando configuración...</div>\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">Configuración de Página de Inicio</h1>\n        <p className=\"text-gray-600\">Gestiona las imágenes y configuraciones de la página principal</p>\n      </div>\n\n      {/* Live Streams Section Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ImageIcon className=\"h-5 w-5\" />\n            Sección \"En Vivo Ahora\"\n          </CardTitle>\n          <CardDescription>\n            Configura el fondo y contenido de la sección de transmisiones en vivo\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"live-title\">Título de la Sección</Label>\n              <Input\n                id=\"live-title\"\n                value={liveSectionConfig.title || ''}\n                onChange={(e) => setLiveSectionConfig(prev => ({\n                  ...prev,\n                  title: String(e.target.value || '')\n                }))}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"live-background\">URL de Imagen de Fondo</Label>\n              <Input\n                id=\"live-background\"\n                value={liveSectionConfig.backgroundImageUrl || ''}\n                onChange={(e) => setLiveSectionConfig(prev => ({\n                  ...prev,\n                  backgroundImageUrl: String(e.target.value || '')\n                }))}\n                placeholder=\"/images/fondo-menu-inicio.png\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"show-live-indicator\"\n                checked={liveSectionConfig.showLiveIndicator}\n                onCheckedChange={(checked) => {\n                  console.log('Toggle changed to:', checked)\n                  setLiveSectionConfig(prev => ({\n                    ...prev,\n                    showLiveIndicator: checked\n                  }))\n                }}\n              />\n              <Label htmlFor=\"show-live-indicator\">Mostrar Indicador \"En Vivo\"</Label>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"live-indicator-text\">Texto del Indicador</Label>\n              <Input\n                id=\"live-indicator-text\"\n                value={liveSectionConfig.liveIndicatorText || ''}\n                onChange={(e) => setLiveSectionConfig(prev => ({\n                  ...prev,\n                  liveIndicatorText: String(e.target.value || '')\n                }))}\n                placeholder=\"EN VIVO AHORA\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"live-description\">Descripción</Label>\n            <Textarea\n              id=\"live-description\"\n              value={liveSectionConfig.description || ''}\n              onChange={(e) => setLiveSectionConfig(prev => ({\n                ...prev,\n                description: String(e.target.value || '')\n              }))}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Subir Nueva Imagen de Fondo</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => {\n                  const file = e.target.files?.[0]\n                  if (file) {\n                    handleFileUpload(file, 'liveSection', 'background')\n                  }\n                }}\n              />\n              <Upload className=\"h-4 w-4\" />\n            </div>\n          </div>\n\n          {liveSectionConfig.backgroundImageUrl && (\n            <div className=\"space-y-2\">\n              <Label>Vista Previa de Imagen de Fondo</Label>\n              <div className=\"relative w-full h-32 bg-gray-100 rounded-lg overflow-hidden\">\n                <img\n                  src={liveSectionConfig.backgroundImageUrl}\n                  alt=\"Vista previa\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            </div>\n          )}\n\n          <Button \n            onClick={saveLiveSectionConfig}\n            className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border-0\"\n            size=\"lg\"\n          >\n            <Save className=\"h-5 w-5 mr-2\" />\n            Guardar Configuración\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Download App Section Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ImageIcon className=\"h-5 w-5\" />\n            Sección \"Descarga App\"\n          </CardTitle>\n          <CardDescription>\n            Configura la imagen y contenido de la sección de descarga de aplicación\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"download-title\">Título de la Sección</Label>\n              <Input\n                id=\"download-title\"\n                value={downloadAppConfig.title || ''}\n                onChange={(e) => setDownloadAppConfig(prev => ({\n                  ...prev,\n                  title: String(e.target.value || '')\n                }))}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"download-hero\">URL de Imagen Principal</Label>\n              <Input\n                id=\"download-hero\"\n                value={downloadAppConfig.heroImageUrl || ''}\n                onChange={(e) => setDownloadAppConfig(prev => ({\n                  ...prev,\n                  heroImageUrl: String(e.target.value || '')\n                }))}\n                placeholder=\"/images/descarga-app-default.png\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"download-mobile\">URL de Imagen Mobile</Label>\n              <Input\n                id=\"download-mobile\"\n                value={downloadAppConfig.mobileImageUrl || ''}\n                onChange={(e) => setDownloadAppConfig(prev => ({\n                  ...prev,\n                  mobileImageUrl: String(e.target.value || '')\n                }))}\n                placeholder=\"/images/descarga-app-mobile-default.png\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"download-description\">Descripción</Label>\n            <Textarea\n              id=\"download-description\"\n              value={downloadAppConfig.description || ''}\n              onChange={(e) => setDownloadAppConfig(prev => ({\n                ...prev,\n                description: String(e.target.value || '')\n              }))}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Subir Nueva Imagen Principal</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => {\n                  const file = e.target.files?.[0]\n                  if (file) {\n                    handleFileUpload(file, 'downloadApp', 'hero')\n                  }\n                }}\n              />\n              <Upload className=\"h-4 w-4\" />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Subir Nueva Imagen Mobile</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => {\n                  const file = e.target.files?.[0]\n                  if (file) {\n                    handleFileUpload(file, 'downloadApp', 'mobile')\n                  }\n                }}\n              />\n              <Upload className=\"h-4 w-4\" />\n            </div>\n          </div>\n\n          {downloadAppConfig.heroImageUrl && (\n            <div className=\"space-y-2\">\n              <Label>Vista Previa de Imagen Principal</Label>\n              <div className=\"relative w-full h-32 bg-gray-100 rounded-lg overflow-hidden\">\n                <img\n                  src={downloadAppConfig.heroImageUrl}\n                  alt=\"Vista previa\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            </div>\n          )}\n\n          {downloadAppConfig.mobileImageUrl && (\n            <div className=\"space-y-2\">\n              <Label>Vista Previa de Imagen Mobile</Label>\n              <div className=\"relative w-full h-32 bg-gray-100 rounded-lg overflow-hidden\">\n                <img\n                  src={downloadAppConfig.mobileImageUrl}\n                  alt=\"Vista previa mobile\"\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    console.error('Error loading mobile image preview:', downloadAppConfig.mobileImageUrl);\n                    (e.target as HTMLImageElement).style.display = 'none';\n                  }}\n                />\n              </div>\n              <p className=\"text-xs text-gray-500\">Imagen Mobile: {downloadAppConfig.mobileImageUrl}</p>\n            </div>\n          )}\n\n          <Button \n            onClick={saveDownloadAppConfig}\n            className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border-0\"\n            size=\"lg\"\n          >\n            <Save className=\"h-5 w-5 mr-2\" />\n            Guardar Configuración\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Acciones Rápidas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={async () => {\n                try {\n                  const response = await fetch('/api/admin/init-db', {\n                    method: 'POST'\n                  })\n                  if (response.ok) {\n                    toast({\n                      title: \"Éxito\",\n                      description: \"Tabla de configuración inicializada\"\n                    })\n                    await loadConfigs()\n                  }\n                } catch (error) {\n                  toast({\n                    title: \"Error\", \n                    description: \"Error al inicializar la tabla\",\n                    variant: \"destructive\"\n                  })\n                }\n              }}\n            >\n              Inicializar Tabla de Configuración\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":20676},"styles/rich-text.css":{"content":"\n/* Rich text content styles */\n.prose img, .rich-text-content img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 4px;\n  margin: 1rem 0;\n}\n\n/* Ensure proper text direction */\n.rich-text-content,\n.prose,\n[contenteditable] {\n  direction: ltr;\n  text-align: left;\n  unicode-bidi: embed;\n}\n\n/* Image editing styles */\n.image-container {\n  position: relative;\n  display: inline-block;\n  margin: 10px 0;\n  max-width: 100%;\n}\n\n.image-container.image-selected {\n  outline: 2px solid #3b82f6;\n  outline-offset: 2px;\n}\n\n.image-controls {\n  user-select: none;\n  pointer-events: auto;\n}\n\n.resize-handle {\n  position: absolute;\n  bottom: -5px;\n  right: -5px;\n  width: 10px;\n  height: 10px;\n  background: #3b82f6;\n  cursor: se-resize;\n  border-radius: 2px;\n  z-index: 1000;\n}\n\n.resize-handle:hover {\n  background: #2563eb;\n}\n\n.alignment-controls {\n  position: fixed;\n  top: 10px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: rgba(255, 255, 255, 0.98);\n  border: 3px solid #3b82f6;\n  border-radius: 12px;\n  padding: 14px 16px;\n  display: flex !important;\n  gap: 10px;\n  box-shadow: 0 12px 40px rgba(0,0,0,0.35), 0 4px 12px rgba(30, 64, 175, 0.3);\n  z-index: 999999;\n  white-space: nowrap;\n  visibility: visible !important;\n  opacity: 1 !important;\n  backdrop-filter: blur(12px);\n}\n\n.alignment-controls button {\n  padding: 6px 10px;\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 13px;\n  font-weight: 600;\n  transition: all 0.2s ease;\n}\n\n.alignment-controls button:hover {\n  background: #2563eb;\n  transform: scale(1.05);\n}\n\n/* Image alignment and sizing classes */\n.rich-text-content .float-left {\n  float: left;\n}\n\n.rich-text-content .float-right {\n  float: right;\n}\n\n.rich-text-content .mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.rich-text-content .block {\n  display: block;\n}\n\n.rich-text-content .w-32 {\n  width: 8rem;\n}\n\n.rich-text-content .w-64 {\n  width: 16rem;\n}\n\n.rich-text-content .w-96 {\n  width: 24rem;\n}\n\n.rich-text-content .w-full {\n  width: 100%;\n}\n\n.rich-text-content .h-auto {\n  height: auto;\n}\n\n.rich-text-content .mr-4 {\n  margin-right: 1rem;\n}\n\n.rich-text-content .ml-4 {\n  margin-left: 1rem;\n}\n\n.rich-text-content .mb-2 {\n  margin-bottom: 0.5rem;\n}\n\n.rich-text-content .rounded-lg {\n  border-radius: 0.5rem;\n}\n\n.rich-text-content .shadow-sm {\n  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n}\n\n.prose p, .rich-text-content p {\n  margin-bottom: 1rem;\n  line-height: 1.6;\n}\n\n.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6,\n.rich-text-content h1, .rich-text-content h2, .rich-text-content h3, \n.rich-text-content h4, .rich-text-content h5, .rich-text-content h6 {\n  font-weight: 600;\n  margin-top: 1.5rem;\n  margin-bottom: 1rem;\n}\n\n.prose ul, .prose ol, .rich-text-content ul, .rich-text-content ol {\n  margin: 1rem 0;\n  padding-left: 2rem;\n}\n\n.prose blockquote, .rich-text-content blockquote {\n  border-left: 4px solid #e5e7eb;\n  padding-left: 1rem;\n  margin: 1rem 0;\n  font-style: italic;\n}\n\n.prose a, .rich-text-content a {\n  color: #7c3aed;\n  text-decoration: underline;\n}\n\n.prose a:hover, .rich-text-content a:hover {\n  color: #5b21b6;\n}\n\n/* Ensure proper spacing for rich text content */\n.rich-text-content {\n  white-space: pre-wrap;\n}\n\n.rich-text-content br {\n  margin-bottom: 0.5rem;\n}\n\n/* Handle paragraph breaks in markdown content */\n.rich-text-content > * + * {\n  margin-top: 1rem;\n}\n\n/* Ensure line clamping works with HTML content */\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Two-column layout */\n.two-column-layout {\n  column-count: 2;\n  column-gap: 30px;\n  column-rule: 1px solid #e5e7eb;\n  text-align: justify;\n  hyphens: auto;\n}\n\n.two-column-layout p {\n  break-inside: avoid-column;\n  margin-bottom: 1rem;\n}\n\n.two-column-layout img {\n  break-inside: avoid;\n  page-break-inside: avoid;\n}\n\n.two-column-layout .image-container {\n  break-inside: avoid;\n  page-break-inside: avoid;\n  margin: 15px 0;\n}\n\n/* Better text wrapping around images */\n.prose img, .rich-text-content img, .two-column-layout img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 4px;\n  margin: 1rem 0;\n}\n\n.rich-text-content .float-left {\n  float: left;\n  margin-right: 20px;\n  margin-bottom: 15px;\n  clear: left;\n}\n\n.rich-text-content .float-right {\n  float: right;\n  margin-left: 20px;\n  margin-bottom: 15px;\n  clear: right;\n}\n\n.rich-text-content p {\n  text-align: justify;\n  line-height: 1.6;\n  margin-bottom: 1rem;\n}\n\n/* Improved column break handling */\n.two-column-layout h1,\n.two-column-layout h2,\n.two-column-layout h3,\n.two-column-layout h4,\n.two-column-layout h5,\n.two-column-layout h6 {\n  break-after: avoid;\n  break-inside: avoid;\n  margin-top: 1.5rem;\n  margin-bottom: 0.75rem;\n}\n\n/* Column span for full-width elements */\n.rich-text-content .column-span-full {\n  column-span: all;\n  margin: 20px 0;\n}\n\n/* Mobile responsive columns */\n@media (max-width: 768px) {\n  .two-column-layout {\n    column-count: 1;\n    column-rule: none;\n  }\n}\n\n/* Hide all editor controls on public pages */\n.public-view .image-controls,\n.public-view .image-container .image-controls,\n.public-view .resize-handle,\n.public-view .alignment-controls {\n  display: none !important;\n  visibility: hidden !important;\n  pointer-events: none !important;\n}\n\n/* Remove image selection styling on public pages */\n.public-view .image-selected {\n  outline: none !important;\n}\n\n/* Remove hover effects on images in public view */\n.public-view .image-container img {\n  cursor: default !important;\n}\n\n/* Ensure images don't trigger selection on public pages */\n.public-view img {\n  pointer-events: none;\n  user-select: none;\n}\n","size_bytes":5683},"components/extreme-program-navigation.tsx":{"content":"\"use client\";\n\nimport { useState, useCallback, useMemo } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n// Tipos definidos con claridad\ninterface NavigationItem {\n  id: string;\n  title: string;\n  subtitle?: string;\n  image: string;\n  link: string;\n}\n\n// Datos extraídos fuera del componente para mejor mantenibilidad\nconst NAVIGATION_ITEMS: NavigationItem[] = [\n  {\n    id: \"radio\",\n    title: \"RADIO\",\n    subtitle: \"CONGRESO\",\n    image: \"/images/radio-congreso.png\",\n    link: \"/radio\",\n  },\n  {\n    id: \"programacion\",\n    title: \"NUESTRA\",\n    subtitle: \"PROGRAMACIÓN\",\n    image: \"/images/nuestra-programacion.png\",\n    link: \"/programacion\",\n  },\n  {\n    id: \"noticias\",\n    title: \"NOTICIAS\",\n    subtitle: \"CONGRESO\",\n    image: \"/images/noticias-congreso.png\",\n    link: \"/noticias\",\n  },\n  {\n    id: \"transparencia\",\n    title: \"TRANSPARENCIA\",\n    image: \"/images/transparencia.png\",\n    link: \"/transparencia\",\n  },\n  {\n    id: \"contacto\",\n    title: \"CONTACTO\",\n    image: \"/images/contacto.png\",\n    link: \"/contacto\",\n  },\n];\n\nexport default function ExtremeProgramNavigation() {\n  const [activeIndex, setActiveIndex] = useState(2); // Inicialmente el elemento del centro está activo\n\n  // Funciones memoizadas para evitar recreaciones innecesarias\n  const handlePrev = useCallback(() => {\n    setActiveIndex((prev) =>\n      prev === 0 ? NAVIGATION_ITEMS.length - 1 : prev - 1,\n    );\n  }, []);\n\n  const handleNext = useCallback(() => {\n    setActiveIndex((prev) =>\n      prev === NAVIGATION_ITEMS.length - 1 ? 0 : prev + 1,\n    );\n  }, []);\n\n  const handleDotClick = useCallback((index: number) => {\n    setActiveIndex(index);\n  }, []);\n\n  // Componente de elemento de navegación extraído para mejor legibilidad\n  const NavigationCard = useMemo(() => {\n    return function NavigationCard({\n      item,\n      index,\n      isActive,\n      distance,\n    }: {\n      item: NavigationItem;\n      index: number;\n      isActive: boolean;\n      distance: number;\n    }) {\n      // Clases calculadas basadas en el estado - DIMENSIONES EXTREMAS (12x ancho original, 4x alto original)\n      const cardClasses = cn(\n        \"relative flex-shrink-0 rounded-[3rem] overflow-hidden transition-all duration-500 transform\",\n        // Tamaños extremadamente ampliados - WIDER CARDS\n        isActive\n          ? \"w-556.8 h-192 sm:w-627.6 sm:h-224 md:w-697.2 md:h-256 z-20 scale-100 shadow-xl\" // Incrementado 20% más en ancho\n          : distance === 1\n            ? \"w-418.8 h-160 sm:w-488.4 sm:h-192 md:w-556.8 md:h-224 z-10 scale-90 opacity-80\" // Incrementado 20% más en ancho\n            : \"hidden sm:block w-348 h-128 sm:w-382.8 sm:h-160 md:w-418.8 md:h-192 scale-75 opacity-60\", // Incrementado 20% más en ancho\n        \"hover:opacity-100 focus:outline-none focus:ring-4 focus:ring-white focus:ring-opacity-50\",\n      );\n\n      // Tamaño de texto extremadamente ampliado\n      const textClasses =\n        \"text-6xl sm:text-7xl md:text-8xl font-bold text-white absolute bottom-12 left-12 right-12 text-center drop-shadow-xl\";\n\n      return (\n        <Link\n          href={item.link}\n          className={cardClasses}\n          onClick={(e) => {\n            if (!isActive) {\n              e.preventDefault();\n              setActiveIndex(index);\n            }\n          }}\n          aria-label={`${item.title}${item.subtitle ? ` ${item.subtitle}` : \"\"}`}\n        >\n          {/* Imagen de fondo con overlay */}\n          <div className=\"absolute inset-0\">\n            <Image\n              src={item.image || \"/placeholder.svg\"}\n              alt=\"\"\n              fill\n              className=\"object-cover scale-98\"\n              sizes=\"(max-width: 640px) 960vw, (max-width: 768px) 480vw, 400vw\"\n              priority={isActive}\n            />\n          </div>\n\n          {/* Overlay para mejorar legibilidad */}\n          <div className=\"absolute inset-0 bg-black/30\"></div>\n\n          {/* Texto extremadamente ampliado con más padding */}\n          <div className=\"absolute bottom-0 left-0 right-0 p-16 text-center\">\n            <div className=\"text-white font-bold drop-shadow-xl\">\n              <div className=\"text-5xl sm:text-6xl md:text-7xl text-stroke-sm\">{item.title}</div>\n              {item.subtitle && (\n                <div className=\"text-5xl sm:text-6xl md:text-7xl mt-6 text-stroke-sm\">{item.subtitle}</div>\n              )}\n            </div>\n          </div>\n\n          {/* Efecto de brillo para el elemento activo */}\n          {isActive && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer\"></div>\n          )}\n        </Link>\n      );\n    };\n  }, [setActiveIndex]);\n\n  return (\n    <section\n      className=\"relative py-24 md:py-32 bg-[#fdf2f8] overflow-x-hidden\"\n      aria-label=\"Navegación de programas extremadamente ampliada\"\n    >\n      <div className=\"container-fluid px-8 mx-auto\">\n        <div className=\"relative mx-auto w-full px-12\">\n          {\" \"}\n          {/* Contenedor de ancho completo */}\n          {/* Botones de navegación extremadamente ampliados */}\n          <button\n            onClick={handlePrev}\n            className=\"absolute -left-40 top-1/2 -translate-y-1/2 z-10 bg-white rounded-full p-12 hover:bg-gray-100 transition-all transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-[#3b0764]\"\n            aria-label=\"Elemento anterior\"\n          >\n            <ChevronLeft className=\"w-48 h-48 text-[#3b0764]\" />{\" \"}\n            {/* Iconos extremadamente grandes */}\n          </button>\n          <button\n            onClick={handleNext}\n            className=\"absolute -right-40 top-1/2 -translate-y-1/2 z-10 bg-white rounded-full p-12 hover:bg-gray-100 transition-all transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-[#3b0764]\"\n            aria-label=\"Elemento siguiente\"\n          >\n            <ChevronRight className=\"w-48 h-48 text-[#3b0764]\" />{\" \"}\n            {/* Iconos extremadamente grandes */}\n          </button>\n          {/* Contenedor de elementos con espaciado extremadamente ampliado */}\n          <div className=\"flex justify-center items-center space-x-32 sm:space-x-48 md:space-x-64 py-32 overflow-hidden\">\n            {NAVIGATION_ITEMS.map((item, index) => {\n              // Calcular la distancia desde el elemento activo de manera más eficiente\n              const distance = Math.min(\n                Math.abs(index - activeIndex),\n                Math.abs(index - activeIndex - NAVIGATION_ITEMS.length),\n                Math.abs(index - activeIndex + NAVIGATION_ITEMS.length),\n              );\n\n              return (\n                <NavigationCard\n                  key={item.id}\n                  item={item}\n                  index={index}\n                  isActive={index === activeIndex}\n                  distance={distance}\n                />\n              );\n            })}\n          </div>\n          {/* Indicadores extremadamente ampliados */}\n          <div\n            className=\"flex justify-center mt-16 sm:mt-24 md:mt-32 space-x-12 sm:space-x-24\"\n            role=\"tablist\"\n          >\n            {NAVIGATION_ITEMS.map((item, index) => (\n              <button\n                key={index}\n                onClick={() => handleDotClick(index)}\n                className={cn(\n                  \"h-12 sm:h-16 rounded-full transition-all\",\n                  index === activeIndex\n                    ? \"bg-[#3b0764] w-48 sm:w-72\"\n                    : \"bg-gray-300 w-18 sm:w-24\",\n                )}\n                aria-selected={index === activeIndex}\n                aria-label={`Ir a ${item.title}`}\n                role=\"tab\"\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7871},"components/ui/input-otp.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2168},"components/defensoria/contact-modal.tsx":{"content":"\"use client\"\n\nimport { useState } from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { X } from \"lucide-react\"\n\ninterface ContactModalProps {\n  type: 'Queja' | 'Sugerencia' | 'Felicitaciones'\n  children: React.ReactNode\n}\n\nexport default function ContactModal({ type, children }: ContactModalProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    surname: '',\n    email: '',\n    phone: '',\n    subject: '',\n    subject2: '',\n    message: '',\n    attachment: ''\n  })\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (!formData.firstName || !formData.surname || !formData.email || !formData.message) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor complete todos los campos obligatorios (Primer nombre, Apellido, Correo electrónico y Mensaje).\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      const response = await fetch('/api/defensoria-audiencia/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...formData,\n          name: `${formData.firstName} ${formData.lastName ? formData.lastName + ' ' : ''}${formData.surname}`.trim(),\n          type: type\n        })\n      })\n\n      const result = await response.json()\n\n      if (response.ok) {\n        toast({\n          title: \"¡Enviado exitosamente!\",\n          description: result.message,\n        })\n        \n        // Reset form and close modal\n        setFormData({\n          firstName: '',\n          lastName: '',\n          surname: '',\n          email: '',\n          phone: '',\n          subject: '',\n          subject2: '',\n          message: '',\n          attachment: ''\n        })\n        setIsOpen(false)\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.error || `Error al enviar la ${type.toLowerCase()}`,\n          variant: \"destructive\"\n        })\n      }\n    } catch (error) {\n      console.error('Error submitting contact form:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error de conexión. Por favor, intente nuevamente.\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getTypeColor = () => {\n    // Use consistent purple theme for all types to maintain professional appearance\n    return 'text-purple-700 border-purple-200 bg-purple-50'\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"text-center mb-6\">\n            <DialogTitle className=\"text-2xl font-bold text-purple-800 mb-2\">\n              {type} - Defensoría de Audiencia\n            </DialogTitle>\n            <DialogDescription className=\"text-gray-600\">\n              Complete el formulario para enviar su {type.toLowerCase()} a la Defensoría de Audiencia\n            </DialogDescription>\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Contact Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-purple-800 border-b border-purple-200 pb-2\">\n              Nombre y Apellido <span className=\"text-sm font-normal text-gray-500\">(Obligatorio)</span>\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-purple-700\">\n                  Primer nombre\n                </Label>\n                <Input\n                  id=\"firstName\"\n                  type=\"text\"\n                  value={formData.firstName || ''}\n                  onChange={(e) => handleInputChange('firstName', e.target.value)}\n                  placeholder=\"\"\n                  className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-purple-700\">\n                  Segundo nombre\n                </Label>\n                <Input\n                  id=\"lastName\"\n                  type=\"text\"\n                  value={formData.lastName || ''}\n                  onChange={(e) => handleInputChange('lastName', e.target.value)}\n                  placeholder=\"\"\n                  className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"surname\" className=\"text-sm font-medium text-purple-700\">\n                  Apellido\n                </Label>\n                <Input\n                  id=\"surname\"\n                  type=\"text\"\n                  value={formData.surname || ''}\n                  onChange={(e) => handleInputChange('surname', e.target.value)}\n                  placeholder=\"\"\n                  className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\" className=\"text-sm font-medium text-purple-700\">\n                  Correo electrónico <span className=\"text-sm font-normal text-gray-500\">(Obligatorio)</span>\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  placeholder=\"example@example.com\"\n                  className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\" className=\"text-sm font-medium text-purple-700\">\n                  Celular\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  placeholder=\"\"\n                  className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Message Information */}\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"requestType\" className=\"text-sm font-medium text-purple-700\">\n                  Tipo de solicitud\n                </Label>\n                <div className=\"mt-1 p-3 bg-purple-50 rounded-md border border-purple-200\">\n                  <span className=\"font-medium text-purple-800\">{type}</span>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"subject\" className=\"text-sm font-medium text-purple-700\">\n                  Solicitud de información\n                </Label>\n                <Input\n                  id=\"subject\"\n                  type=\"text\"\n                  value={formData.subject}\n                  onChange={(e) => handleInputChange('subject', e.target.value)}\n                  placeholder=\"\"\n                  className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"subject2\" className=\"text-sm font-medium text-purple-700\">\n                Tema o asunto <span className=\"text-sm font-normal text-gray-500\">(Campo corto)</span>\n              </Label>\n              <Input\n                id=\"subject2\"\n                type=\"text\"\n                value={formData.subject2 || ''}\n                onChange={(e) => handleInputChange('subject2', e.target.value)}\n                placeholder=\"\"\n                className=\"mt-1 border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"message\" className=\"text-sm font-medium text-purple-700\">\n                Mensaje / Descripción <span className=\"text-sm font-normal text-gray-500\">(Campo largo)</span>\n              </Label>\n              <Textarea\n                id=\"message\"\n                value={formData.message}\n                onChange={(e) => handleInputChange('message', e.target.value)}\n                placeholder=\"\"\n                className=\"mt-1 min-h-[120px] border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"attachment\" className=\"text-sm font-medium text-purple-700\">\n                Archivo adjunto <span className=\"text-sm font-normal text-gray-500\">(opcional, para evidencia)</span>\n              </Label>\n              <div className=\"mt-1 flex items-center gap-2\">\n                <Input\n                  id=\"attachment\"\n                  type=\"file\"\n                  className=\"hidden\"\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                  onChange={(e) => {\n                    // Handle file upload logic here\n                    const file = e.target.files?.[0]\n                    if (file) {\n                      handleInputChange('attachment', file.name)\n                    }\n                  }}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => document.getElementById('attachment')?.click()}\n                  className=\"px-4 py-2 border-purple-300 text-purple-700 hover:bg-purple-50\"\n                >\n                  EXAMINAR\n                </Button>\n                <span className=\"text-sm text-gray-500\">\n                  {formData.attachment || '(No se ha seleccionado ningún archivo)'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          \n\n          <DialogFooter className=\"flex justify-end space-x-3 pt-6 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsOpen(false)}\n              disabled={isLoading}\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"bg-purple-700 hover:bg-purple-800 text-white font-bold px-8 py-2 text-lg\"\n              style={{ backgroundColor: '#4f148c' }}\n            >\n              {isLoading ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  <span>ENVIANDO...</span>\n                </div>\n              ) : (\n                'ENVIAR'\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":11941},"components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"lib/api-client.ts":{"content":"import type { LiveStream, Program, NewsItem } from './api'\n\n// Re-export types for use in other components\nexport type { NewsItem, Program }\n\n// Client-side API functions that call server-side routes\nexport async function fetchPrograms(): Promise<Program[]> {\n  const baseUrl = typeof window !== 'undefined' ? '' : 'http://localhost:5000'\n  const response = await fetch(`${baseUrl}/api/programs`)\n  if (!response.ok) {\n    throw new Error('Failed to fetch programs')\n  }\n  return response.json()\n}\n\nexport async function createProgram(data: Omit<Program, \"id\" | \"createdAt\">): Promise<Program> {\n  const response = await fetch('/api/programs', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to create program')\n  }\n\n  return response.json()\n}\n\nexport async function updateProgram(\n  id: string,\n  data: Partial<Omit<Program, \"id\" | \"createdAt\">>\n): Promise<Program> {\n  const response = await fetch(`/api/programs/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to update program')\n  }\n\n  return response.json()\n}\n\nexport async function deleteProgram(id: string): Promise<void> {\n  const response = await fetch(`/api/programs/${id}`, {\n    method: 'DELETE',\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to delete program')\n  }\n}\n\nexport async function reorderProgram(programId: string, direction: 'up' | 'down'): Promise<void> {\n  const response = await fetch('/api/programs/reorder', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ programId, direction }),\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to reorder program')\n  }\n}\n\n// News API functions\nexport async function getNews(): Promise<NewsItem[]> {\n  const response = await fetch('/api/news')\n  if (!response.ok) {\n    throw new Error('Failed to fetch news')\n  }\n  return response.json()\n}\n\nexport async function createNewsItem(data: Omit<NewsItem, \"id\" | \"createdAt\">): Promise<NewsItem> {\n  const response = await fetch('/api/news', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to create news item')\n  }\n\n  return response.json()\n}\n\nexport async function updateNewsItem(\n  id: string,\n  data: Partial<Omit<NewsItem, \"id\" | \"createdAt\">>\n): Promise<NewsItem> {\n  const response = await fetch(`/api/news/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to update news item')\n  }\n\n  return response.json()\n}\n\nexport async function deleteNewsItem(id: string): Promise<boolean> {\n  const response = await fetch(`/api/news/${id}`, {\n    method: 'DELETE',\n  })\n\n  if (!response.ok) {\n    const error = await response.text()\n    throw new Error(`Failed to delete news item: ${error}`)\n  }\n\n  return true\n}\n\n// Add more API functions here as needed","size_bytes":3207},"app/api/admin/create-missing-tables/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST() {\n  try {\n    const pool = createDatabaseConnectionFromEnv()\n\n    // Create radio_programs table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_programs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        audio_url TEXT,\n        duration VARCHAR(20),\n        category VARCHAR(50),\n        host VARCHAR(255),\n        published_at TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'archived'))\n      )\n    `)\n\n    // Create radio_episodes table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_episodes (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        audio_url TEXT NOT NULL,\n        duration VARCHAR(50),\n        publish_date DATE,\n        image_url TEXT,\n        program_id INTEGER REFERENCES radio_programs(id) ON DELETE CASCADE,\n        published BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create parliamentary_groups table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS parliamentary_groups (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        abbreviation VARCHAR(10),\n        image_url TEXT,\n        color_hex VARCHAR(7),\n        description TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create legislators table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS legislators (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        parliamentary_group_id INTEGER REFERENCES parliamentary_groups(id) ON DELETE SET NULL,\n        legislature VARCHAR(50),\n        state VARCHAR(100),\n        type VARCHAR(100),\n        gender CHAR(1) CHECK (gender IN ('M', 'F')),\n        status VARCHAR(20) DEFAULT 'Activo' CHECK (status IN ('Activo', 'Inactivo', 'Licencia')),\n        image_url TEXT,\n        email VARCHAR(255),\n        biography TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create categories table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS categories (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL UNIQUE,\n        slug VARCHAR(255) NOT NULL UNIQUE,\n        description TEXT,\n        parent_id INTEGER REFERENCES categories(id) ON DELETE CASCADE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create tags table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS tags (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL UNIQUE,\n        slug VARCHAR(255) NOT NULL UNIQUE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create news_tags junction table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS news_tags (\n        news_id INTEGER REFERENCES news(id) ON DELETE CASCADE,\n        tag_id INTEGER REFERENCES tags(id) ON DELETE CASCADE,\n        PRIMARY KEY (news_id, tag_id)\n      )\n    `)\n\n    // Create contact_messages table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS contact_messages (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255) NOT NULL,\n        subject VARCHAR(255),\n        message TEXT NOT NULL,\n        status VARCHAR(20) DEFAULT 'new' CHECK (status IN ('new', 'read', 'replied', 'archived')),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create homepage_config table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS homepage_config (\n        id SERIAL PRIMARY KEY,\n        section VARCHAR(255) NOT NULL UNIQUE,\n        title VARCHAR(255),\n        description TEXT,\n        background_image_url TEXT,\n        hero_image_url TEXT,\n        logo_url TEXT,\n        additional_images JSONB,\n        config_data JSONB,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create timezone_config table if it doesn't exist\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS timezone_config (\n        id SERIAL PRIMARY KEY,\n        timezone VARCHAR(100) NOT NULL,\n        display_name VARCHAR(255) NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Insert default timezone configuration if none exists\n    const timezoneResult = await pool.query('SELECT COUNT(*) FROM timezone_config WHERE is_active = true')\n    if (timezoneResult.rows[0].count === '0') {\n      await pool.query(`\n        INSERT INTO timezone_config (timezone, display_name, is_active)\n        VALUES ('America/Mexico_City', 'Ciudad de México (CST/CDT)', true)\n      `)\n      console.log('Default timezone configuration created')\n    }\n\n    // Insert default categories\n    await pool.query(`\n      INSERT INTO categories (name, slug, description) VALUES\n      ('Foros y seminarios', 'foros-y-seminarios', 'Eventos y actividades académicas'),\n      ('Reformas aprobadas', 'reformas-aprobadas', 'Reformas legislativas aprobadas'),\n      ('Temas de actualidad', 'temas-de-actualidad', 'Noticias y temas de interés actual'),\n      ('Trabajo en comisiones', 'trabajo-en-comisiones', 'Actividades de las comisiones legislativas'),\n      ('Reformas en DOF', 'reformas-en-dof', 'Reformas publicadas en el Diario Oficial'),\n      ('Trabajos en pleno', 'trabajos-en-pleno', 'Sesiones y trabajos del pleno')\n      ON CONFLICT (slug) DO NOTHING\n    `)\n\n    // Insert default tags\n    await pool.query(`\n      INSERT INTO tags (name, slug) VALUES\n      ('Congreso', 'congreso'),\n      ('Senado', 'senado'),\n      ('Diputados', 'diputados'),\n      ('Reformas', 'reformas'),\n      ('Transparencia', 'transparencia'),\n      ('Participación ciudadana', 'participacion-ciudadana')\n      ON CONFLICT (slug) DO NOTHING\n    `)\n\n    // Create documents table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS documents (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        file_name VARCHAR(255) NOT NULL,\n        file_url TEXT NOT NULL,\n        file_size BIGINT,\n        category VARCHAR(100) DEFAULT 'general',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Verify tables were created\n    const tablesResult = await pool.query(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      ORDER BY table_name\n    `)\n\n    const createdTables = tablesResult.rows.map(row => row.table_name)\n\n    await pool.end()\n\n    return NextResponse.json({ \n      message: 'All missing database tables created successfully',\n      tables: createdTables\n    })\n  } catch (error) {\n    console.error('Error creating missing tables:', error)\n    return NextResponse.json(\n      { error: 'Failed to create missing tables', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":7670},"lib/api.ts":{"content":"// Types for our content\nexport interface LiveStream {\n  id: string\n  title: string\n  thumbnailUrl: string\n  streamUrl: string\n  channel: string\n  isLive: boolean\n  status: string\n  createdAt: Date\n}\n\n// Removed duplicate Program type - using interface at bottom of file\n\n\n\nexport type Organ = {\n  id: string\n  title: string\n  description: string\n  imageUrl: string\n  url?: string\n  createdAt: Date\n}\n\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n// All data is now sourced from the database\n\n// All data is now sourced from the database\n\n// All organs data is now sourced from the database\n\n// Añadir estos tipos al archivo api.ts existente\n\nexport interface ParliamentaryGroup {\n  id: string\n  name: string\n  abbreviation: string\n  imageUrl: string\n  colorHex?: string\n  description?: string\n  legislatorCount?: number\n  createdAt: Date\n}\n\nexport type Legislator = {\n  id: string\n  name: string\n  parliamentaryGroupId: string\n  legislature: string\n  state: string\n  type: string\n  gender: \"M\" | \"F\"\n  status: \"Activo\" | \"Inactivo\"\n  imageUrl: string\n  email?: string\n  biography?: string\n  createdAt: Date\n}\n\n\n\nexport interface VideoNews {\n  id: string\n  title: string\n  description?: string\n  videoUrl: string\n  thumbnailUrl?: string\n  category?: string\n  duration?: string\n  publishedAt: Date\n  status: 'draft' | 'published' | 'scheduled' | 'archived'\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Parliamentary groups functionality\nexport async function getParliamentaryGroups(): Promise<ParliamentaryGroup[]> {\n  try {\n    const { getParliamentaryGroupsFromDB } = await import('./api-database')\n    return await getParliamentaryGroupsFromDB()\n  } catch (error) {\n    console.error('Database error in getParliamentaryGroups:', error)\n    return []\n  }\n}\n\n// All legislators data is now sourced from the database\n\n\n\n// Añadir estos tipos y funciones al archivo api.ts existente\n\nexport type RadioProgram = {\n  id: string\n  title: string\n  description: string\n  imageUrl: string\n  audioUrl: string\n  duration: string\n  publishedAt: Date\n  category: \"programa\" | \"entrevista\" | \"conferencia\" | \"podcast\"\n  createdAt: Date\n}\n\n// All radio programs data is now sourced from the database\n\n// API functions\nexport async function getLiveStreams(): Promise<LiveStream[]> {\n  // On client side, call the API endpoint\n  if (typeof window !== 'undefined') {\n    try {\n      const response = await fetch('/api/live-streams', {\n        cache: 'no-store',\n        headers: {\n          'Cache-Control': 'no-cache'\n        }\n      })\n      if (!response.ok) {\n        console.warn(`API response not ok: ${response.status} ${response.statusText}`)\n        return []\n      }\n      const data = await response.json()\n      return Array.isArray(data) ? data : []\n    } catch (error) {\n      console.error('Error fetching streams from API:', error)\n      return []\n    }\n  }\n\n  // On server side, try to connect to database\n  try {\n    const { getLiveStreamsFromDB } = await import('./api-database')\n    const dbStreams = await getLiveStreamsFromDB()\n    return Array.isArray(dbStreams) ? dbStreams : []\n  } catch (error) {\n    console.error('Database error in getLiveStreams:', error)\n    return []\n  }\n}\n\nexport async function getPrograms(): Promise<Program[]> {\n  // Only try to connect to database on server side\n  if (typeof window === 'undefined') {\n    try {\n      // Try to fetch from database first\n      const { getProgramsFromDB } = await import('./api-database')\n      const dbPrograms = await getProgramsFromDB()\n      return dbPrograms || []\n    } catch (error) {\n      console.error('Database error:', error)\n      return []\n    }\n  } else {\n    // On client side, return empty array since data should come from API\n    return []\n  }\n}\n\n// API functions para programas de radio - removed duplicate, using database version below\n\nexport async function getRadioProgramsByCategory(category: string): Promise<RadioProgram[]> {\n  try {\n    const programs = await getRadioPrograms()\n    return programs.filter((program) => program.category === category)\n  } catch (error) {\n    console.error('Database error in getRadioProgramsByCategory:', error)\n    return []\n  }\n}\n\nexport async function getRadioProgramById(id: string): Promise<RadioProgram | null> {\n  try {\n    const programs = await getRadioPrograms()\n    return programs.find((program) => program.id === id) || null\n  } catch (error) {\n    console.error('Database error in getRadioProgramById:', error)\n    return null\n  }\n}\n\n// API functions para grupos parlamentarios\nexport async function createParliamentaryGroup(data: Omit<ParliamentaryGroup, \"id\" | \"createdAt\">): Promise<ParliamentaryGroup> {\n  try {\n    const { createParliamentaryGroupInDB } = await import('./api-database')\n    return await createParliamentaryGroupInDB(data)\n  } catch (error) {\n    console.error('Database error in createParliamentaryGroup:', error)\n    throw error\n  }\n}\n\n// Parliamentary groups functionality removed\n\nexport async function getParliamentaryGroupById(id: string): Promise<ParliamentaryGroup | null> {\n  try {\n    const groups = await getParliamentaryGroups()\n    return groups.find((group) => group.id === id) || null\n  } catch (error) {\n    console.error('Database error in getParliamentaryGroupById:', error)\n    return null\n  }\n}\n\n// API functions para legisladores\nexport async function getLegislators(): Promise<Legislator[]> {\n  try {\n    const { getLegislatorsFromDB } = await import('./api-database')\n    return await getLegislatorsFromDB()\n  } catch (error) {\n    console.error('Database error in getLegislators:', error)\n    return []\n  }\n}\n\nexport async function getLegislatorById(id: string): Promise<Legislator | null> {\n  try {\n    const legislators = await getLegislators()\n    return legislators.find((legislator) => legislator.id === id) || null\n  } catch (error) {\n    console.error('Database error in getLegislatorById:', error)\n    return null\n  }\n}\n\n// CRUD operations for live streams using API endpoints\nexport async function createLiveStream(data: Omit<LiveStream, \"id\" | \"createdAt\">): Promise<LiveStream> {\n  const response = await fetch('/api/live-streams', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to create live stream')\n  }\n\n  return await response.json()\n}\n\nexport async function updateLiveStream(id: string, data: Partial<Omit<LiveStream, \"id\" | \"createdAt\">>): Promise<LiveStream> {\n  const response = await fetch(`/api/live-streams?id=${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n\n  if (!response.ok) {\n    const errorText = await response.text()\n    throw new Error(`Failed to update live stream: ${response.status} ${errorText}`)\n  }\n\n  return await response.json()\n}\n\nexport async function deleteLiveStream(id: string): Promise<void> {\n  const response = await fetch(`/api/live-streams?id=${id}`, {\n    method: 'DELETE',\n  })\n\n  if (!response.ok) {\n    throw new Error('Failed to delete live stream')\n  }\n}\n\nexport async function getNews(page: number = 1, limit: number = 20) {\n  try {\n    const { getNewsFromDB } = await import('./api-database')\n    return await getNewsFromDB(page, limit)\n  } catch (error) {\n    console.error('Database error in getNews:', error)\n    return { news: [], total: 0, totalPages: 0 }\n  }\n}\n\nexport async function getNewsByCategory(category: string, page: number = 1, limit: number = 20) {\n  try {\n    const { getNewsFromDB } = await import('./api-database')\n    const result = await getNewsFromDB()\n    // Filter by category from all news, then apply pagination\n    const categoryNews = result.news.filter((item) => item.category === category)\n    const total = categoryNews.length\n    const totalPages = Math.ceil(total / limit)\n    const offset = (page - 1) * limit\n    const paginatedNews = categoryNews.slice(offset, offset + limit)\n    \n    return { news: paginatedNews, total, totalPages }\n  } catch (error) {\n    console.error('Database error in getNewsByCategory:', error)\n    return { news: [], total: 0, totalPages: 0 }\n  }\n}\n\nexport async function getNewsById(id: string) {\n  try {\n    const { getNewsFromDB } = await import('./api-database')\n    const result = await getNewsFromDB(1, 1000) // Get a large number to search through all\n    return result.news.find((item) => item.id === id) || null\n  } catch (error) {\n    console.error('Database error in getNewsById:', error)\n    return null\n  }\n}\n\nexport async function getOrgans(): Promise<Organ[]> {\n  try {\n    const { getOrgans } = await import('./api-database')\n    return await getOrgans()\n  } catch (error) {\n    console.error('Database error in getOrgans:', error)\n    return []\n  }\n}\nexport interface Program {\n  id: string\n  title: string\n  description: string\n  imageUrl: string\n  url?: string\n  imageFileName?: string\n  orderIndex?: number\n  createdAt: Date\n}\n\nexport interface NewsItem {\n  id: string\n  title: string\n  summary: string\n  content: string\n  imageUrl: string\n  imageUrl2?: string\n  imageUrl3?: string\n  imageUrl4?: string\n  imageUrl5?: string\n  status?: string\n  category?: string\n  publishedAt: Date\n  createdAt: Date\n  isFeatured?: boolean\n  featuredRank?: number | null\n}\n// Radio Programs Management\nexport async function getRadioPrograms() {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      console.warn('Database pool not available, returning empty array')\n      return []\n    }\n\n    const result = await pool.query(`\n      SELECT \n        id,\n        title,\n        description,\n        image_url as \"imageUrl\",\n        latest_episode_title,\n        latest_episode_date,\n        latest_episode_duration,\n        latest_episode_description,\n        program_link as \"programLink\",\n        episodes_link as \"episodesLink\",\n        category,\n        display_order,\n        featured,\n        created_at as \"createdAt\"\n      FROM radio_programs \n      WHERE published = true\n      ORDER BY display_order ASC, created_at DESC\n    `)\n\n    return result.rows.map(row => ({\n      ...row,\n      programLink: row.programLink || row.program_link || '#',\n      episodesLink: row.episodesLink || row.episodes_link || '#',\n      link: row.programLink || row.program_link || '#',\n      latestEpisode: {\n        title: row.latest_episode_title || '',\n        date: row.latest_episode_date || '',\n        duration: row.latest_episode_duration || '',\n        description: row.latest_episode_description || ''\n      }\n    })).filter(program => program.id && program.title && program.programLink && program.episodesLink)\n  } catch (error) {\n    console.error('Error fetching radio programs:', error)\n    // Return empty array instead of throwing in production\n    return []\n  }\n}\n\nexport async function createRadioProgram(data: any) {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      throw new Error('Database connection not available. Please check your database configuration.')\n    }\n\n    // Validate required fields\n    if (!data.title?.trim()) {\n      throw new Error('Program title is required')\n    }\n    if (!data.description?.trim()) {\n      throw new Error('Program description is required')\n    }\n\n    const result = await pool.query(`\n      INSERT INTO radio_programs (\n        title, description, image_url, latest_episode_title, \n        latest_episode_date, latest_episode_duration, latest_episode_description,\n        program_link, episodes_link, category, published, display_order\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n      RETURNING *\n    `, [\n      data.title.trim(),\n      data.description.trim(),\n      data.imageUrl || null,\n      data.latestEpisode?.title?.trim() || '',\n      data.latestEpisode?.date?.trim() || '',\n      data.latestEpisode?.duration?.trim() || '',\n      data.latestEpisode?.description?.trim() || '',\n      data.programLink?.trim() || '',\n      data.episodesLink?.trim() || '',\n      data.category?.trim() || 'General',\n      data.published !== false,\n      data.displayOrder || 0\n    ])\n\n    if (!result.rows[0]) {\n      throw new Error('Failed to create radio program - no data returned')\n    }\n\n    return result.rows[0]\n  } catch (error) {\n    console.error('Error creating radio program:', error)\n\n    // Provide more specific error messages\n    if (error instanceof Error) {\n      if (error.message.includes('duplicate key')) {\n        throw new Error('A program with this name already exists')\n      }\n      if (error.message.includes('connection')) {\n        throw new Error('Database connection failed. Please try again.')\n      }\n      throw error\n    }\n\n    throw new Error('Unknown error occurred while creating radio program')\n  }\n}\n\nexport async function updateRadioProgram(id: string, data: any) {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      throw new Error('Database connection not available')\n    }\n\n    // Build dynamic query based on provided fields\n    const fields: string[] = []\n    const values: any[] = []\n    let valueIndex = 1\n\n    if (data.title !== undefined) {\n      fields.push(`title = $${valueIndex}`)\n      values.push(data.title.trim())\n      valueIndex++\n    }\n\n    if (data.description !== undefined) {\n      fields.push(`description = $${valueIndex}`)\n      values.push(data.description.trim())\n      valueIndex++\n    }\n\n    if (data.imageUrl !== undefined) {\n      fields.push(`image_url = $${valueIndex}`)\n      values.push(data.imageUrl)\n      valueIndex++\n    }\n\n    if (data.latestEpisode) {\n      if (data.latestEpisode.title !== undefined) {\n        fields.push(`latest_episode_title = $${valueIndex}`)\n        values.push(data.latestEpisode.title.trim())\n        valueIndex++\n      }\n      if (data.latestEpisode.date !== undefined) {\n        fields.push(`latest_episode_date = $${valueIndex}`)\n        values.push(data.latestEpisode.date.trim())\n        valueIndex++\n      }\n      if (data.latestEpisode.duration !== undefined) {\n        fields.push(`latest_episode_duration = $${valueIndex}`)\n        values.push(data.latestEpisode.duration.trim())\n        valueIndex++\n      }\n      if (data.latestEpisode.description !== undefined) {\n        fields.push(`latest_episode_description = $${valueIndex}`)\n        values.push(data.latestEpisode.description.trim())\n        valueIndex++\n      }\n    }\n\n    if (data.programLink !== undefined) {\n      fields.push(`program_link = $${valueIndex}`)\n      values.push(data.programLink.trim())\n      valueIndex++\n    }\n\n    if (data.episodesLink !== undefined) {\n      fields.push(`episodes_link = $${valueIndex}`)\n      values.push(data.episodesLink.trim())\n      valueIndex++\n    }\n\n    if (data.category !== undefined) {\n      fields.push(`category = $${valueIndex}`)\n      values.push(data.category.trim())\n      valueIndex++\n    }\n\n    if (data.displayOrder !== undefined) {\n      fields.push(`display_order = $${valueIndex}`)\n      values.push(data.displayOrder)\n      valueIndex++\n    }\n\n    if (data.published !== undefined) {\n      fields.push(`published = $${valueIndex}`)\n      values.push(data.published)\n      valueIndex++\n    }\n\n    if (data.featured !== undefined) {\n      fields.push(`featured = $${valueIndex}`)\n      values.push(data.featured)\n      valueIndex++\n    }\n\n    // Always update the updated_at timestamp\n    fields.push(`updated_at = NOW()`)\n\n    if (fields.length === 1) { // Only updated_at field\n      throw new Error('No fields to update')\n    }\n\n    values.push(id) // Add ID for WHERE clause\n    const query = `\n      UPDATE radio_programs \n      SET ${fields.join(', ')} \n      WHERE id = $${valueIndex}\n      RETURNING *\n    `\n\n    console.log('Updating radio program with query:', query)\n    console.log('Values:', values)\n\n    const result = await pool.query(query, values)\n\n    if (!result.rows[0]) {\n      return null // Program not found\n    }\n\n    return result.rows[0]\n  } catch (error) {\n    console.error('Error updating radio program:', error)\n    throw error\n  }\n}\n\nexport async function deleteRadioProgram(id: string) {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      throw new Error('Database connection not available')\n    }\n\n    await pool.query('DELETE FROM radio_programs WHERE id = $1', [id])\n    return { success: true }\n  } catch (error) {\n    console.error('Error deleting radio program:', error)\n    throw error\n  }\n}\n\n// Radio Categories Management  \nexport async function getRadioCategories() {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      console.warn('Database pool not available, returning empty array')\n      return []\n    }\n\n    const result = await pool.query(`\n      SELECT \n        id,\n        name,\n        slug,\n        description,\n        image_url as \"imageUrl\",\n        display_order as \"displayOrder\",\n        created_at as \"createdAt\"\n      FROM radio_categories \n      WHERE active = true\n      ORDER BY display_order ASC, name ASC\n    `)\n\n    return result.rows\n  } catch (error) {\n    console.error('Error fetching radio categories:', error)\n    throw error\n  }\n}\n\nexport async function createRadioCategory(data: any) {\n  try {\n    const { pool } = await import('./database')\n\n    if (!pool) {\n      throw new Error('Database connection not available')\n    }\n\n    const result = await pool.query(`\n      INSERT INTO radio_categories (name, slug, description, image_url, display_order, active)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `, [\n      data.name,\n      data.slug || data.name.toLowerCase().replace(/\\s+/g, '-'),\n      data.description || '',\n      data.imageUrl || '',\n      data.displayOrder || 0,\n      data.active !== false\n    ])\n\n    return result.rows[0]\n  } catch (error) {\n    console.error('Error creating radio category:', error)\n    throw error\n  }\n}\n\n// Radio Episodes Management\nexport async function getRadioEpisodes(programId?: string) {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      console.warn('Database pool not available, returning empty array')\n      return []\n    }\n\n    let query = `\n      SELECT \n        re.id,\n        re.title,\n        re.description,\n        re.audio_url as \"audioUrl\",\n        re.duration,\n        re.publish_date as \"publishDate\", \n        re.publish_date as \"published_date\",\n        re.image_url as \"imageUrl\",\n        re.program_id as \"programId\",\n        re.created_at as \"createdAt\",\n        rp.title as \"programTitle\",\n        rp.image_url as \"programImageUrl\",\n        CASE WHEN re.published IS NULL THEN true ELSE re.published END as published\n      FROM radio_episodes re\n      LEFT JOIN radio_programs rp ON re.program_id = rp.id\n    `\n\n    const params: any[] = []\n    let whereClause = ''\n    \n    // For public API calls, only show published episodes\n    // For admin calls, show all episodes\n    const isAdminCall = process.env.NODE_ENV === 'development' || programId === 'admin'\n    \n    if (!isAdminCall && programId !== 'admin') {\n      whereClause = 'WHERE (re.published IS NULL OR re.published = true)'\n    }\n\n    if (programId && programId !== 'all' && programId !== 'undefined' && programId !== undefined && programId !== 'admin') {\n      // Convert programId to integer since program_id column is integer type\n      const condition = ' re.program_id = $' + (params.length + 1)\n      if (whereClause) {\n        whereClause += ' AND' + condition\n      } else {\n        whereClause = 'WHERE' + condition\n      }\n      params.push(parseInt(programId, 10))\n    }\n\n    query += ` ${whereClause} ORDER BY re.publish_date DESC, re.created_at DESC`\n\n    console.log('Episodes query:', query)\n    console.log('Episodes params:', params)\n\n    const result = await pool.query(query, params)\n    console.log('Episodes query result count:', result.rows.length)\n\n    if (result.rows.length > 0) {\n      console.log('First episode:', result.rows[0])\n    }\n\n    return result.rows\n  } catch (error) {\n    console.error('Error fetching radio episodes:', error)\n    // Return empty array instead of throwing to prevent page crashes\n    return []\n  }\n}\n\nexport async function createRadioEpisode(data: any) {\n  try {\n    const { createDatabaseConnectionFromEnv } = await import('./database-env')\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      throw new Error('Database connection not available')\n    }\n\n    const result = await pool.query(`\n      INSERT INTO radio_episodes (\n        title, description, audio_url, duration, \n        publish_date, image_url, program_id, published\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING *\n    `, [\n      data.title,\n      data.description,\n      data.audioUrl,\n      data.duration,\n      data.publishDate,\n      data.imageUrl,\n      data.programId,\n      data.published !== false\n    ])\n\n    return result.rows[0]\n  } catch (error) {\n    console.error('Error creating radio episode:', error)\n    throw error\n  }\n}\n\nexport async function deleteRadioEpisode(id: string) {\n  try {\n    const { pool } = await import('./database')\n\n    if (!pool) {\n      throw new Error('Database connection not available')\n    }\n\n    const result = await pool.query(\n      'DELETE FROM radio_episodes WHERE id = $1 RETURNING id',\n      [id]\n    )\n\n    return result.rows.length > 0 ? result.rows[0] : null\n  } catch (error) {\n    console.error('Error deleting radio episode:', error)\n    throw error\n  }\n}\n\n// Additional utility functions for complex operations\nexport async function searchLegislators(query: string) {\n  try {\n    const { pool } = await import('./database')\n\n    if (!pool) {\n      console.warn('Database pool not available, returning empty array')\n      return []\n    }\n\n    const result = await pool.query(\n      `SELECT * FROM legislators \n       WHERE LOWER(name) LIKE LOWER($1) \n       OR LOWER(political_party) LIKE LOWER($1)\n       ORDER BY name`,\n      [`%${query}%`]\n    )\n    return result.rows\n  } catch (error) {\n    console.error('Error searching legislators:', error)\n    throw error\n  }\n}","size_bytes":22998},"components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1481},"app/transparencia/focalizada/ciudadania/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\nimport { MobileMenuProvider } from \"@/components/mobile-menu-context\"\n\nexport default function CiudadaniaCongresoPage() {\n  return (\n    <MobileMenuProvider>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">La Ciudadanía y el Congreso</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12\">\n          <div className=\"lg:col-span-2 prose max-w-none\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Participación Ciudadana</h2>\n            <p>\n              La participación ciudadana es fundamental para el fortalecimiento de la democracia. El Congreso de la\n              Unión cuenta con diversos mecanismos para que la ciudadanía pueda involucrarse en el proceso legislativo y\n              en la toma de decisiones.\n            </p>\n\n            <h3 className=\"text-xl font-semibold mt-6 mb-3\">Mecanismos de Participación</h3>\n            <ul>\n              <li>\n                <strong>Iniciativa Ciudadana:</strong> Mecanismo que permite a los ciudadanos presentar propuestas de\n                ley ante el Congreso.\n              </li>\n              <li>\n                <strong>Consultas Públicas:</strong> Proceso mediante el cual se recogen opiniones y propuestas de la\n                ciudadanía sobre temas específicos.\n              </li>\n              <li>\n                <strong>Parlamento Abierto:</strong> Prácticas que promueven la transparencia, rendición de cuentas y\n                participación ciudadana en la labor legislativa.\n              </li>\n              <li>\n                <strong>Audiencias Públicas:</strong> Espacios de diálogo donde ciudadanos pueden expresar sus opiniones\n                sobre iniciativas legislativas.\n              </li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold mt-6 mb-3\">Cómo Participar</h3>\n            <p>Si deseas participar en el proceso legislativo, puedes hacerlo a través de las siguientes vías:</p>\n            <ol>\n              <li>Contacta a tus representantes (diputados y senadores).</li>\n              <li>Participa en las consultas públicas y audiencias convocadas por el Congreso.</li>\n              <li>\n                Presenta una iniciativa ciudadana (requiere el respaldo de al menos el 0.13% de la lista nominal de\n                electores).\n              </li>\n              <li>Asiste a las sesiones públicas del Congreso.</li>\n              <li>Sigue las actividades legislativas a través del Canal del Congreso.</li>\n            </ol>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"bg-gray-100 p-5 rounded-lg\">\n              <h3 className=\"text-xl font-semibold mb-3\">Próximos Eventos</h3>\n              <ul className=\"space-y-4\">\n                <li className=\"border-b border-gray-200 pb-3\">\n                  <p className=\"font-medium\">Audiencia Pública: Reforma Educativa</p>\n                  <p className=\"text-gray-600\">Fecha: 15 de mayo, 2024</p>\n                  <p className=\"text-gray-600\">Lugar: Cámara de Diputados</p>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline text-sm\">\n                    Más información\n                  </a>\n                </li>\n                <li className=\"border-b border-gray-200 pb-3\">\n                  <p className=\"font-medium\">Consulta Ciudadana: Ley de Agua</p>\n                  <p className=\"text-gray-600\">Fecha: 22 de mayo, 2024</p>\n                  <p className=\"text-gray-600\">Modalidad: Virtual</p>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline text-sm\">\n                    Más información\n                  </a>\n                </li>\n                <li>\n                  <p className=\"font-medium\">Foro: Parlamento Abierto</p>\n                  <p className=\"text-gray-600\">Fecha: 5 de junio, 2024</p>\n                  <p className=\"text-gray-600\">Lugar: Senado de la República</p>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline text-sm\">\n                    Más información\n                  </a>\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"bg-blue-50 p-5 rounded-lg border border-blue-100\">\n              <h3 className=\"text-xl font-semibold mb-3\">Recursos para la Ciudadanía</h3>\n              <ul className=\"space-y-3\">\n                <li>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline flex items-center\">\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z\"></path>\n                      <path d=\"M3 8a2 2 0 012-2h2a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z\"></path>\n                    </svg>\n                    Guía para presentar una Iniciativa Ciudadana\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline flex items-center\">\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z\"></path>\n                      <path d=\"M3 8a2 2 0 012-2h2a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z\"></path>\n                    </svg>\n                    Proceso Legislativo Explicado\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline flex items-center\">\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z\"></path>\n                      <path d=\"M3 8a2 2 0 012-2h2a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z\"></path>\n                    </svg>\n                    Glosario Legislativo\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline flex items-center\">\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z\"></path>\n                      <path d=\"M3 8a2 2 0 012-2h2a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z\"></path>\n                    </svg>\n                    Calendario Legislativo\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </MobileMenuProvider>\n  )\n}\n","size_bytes":6987},"app/api/organs/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { deleteOrganFromDB, updateOrganInDB } from '@/lib/api-database'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n    const updatedOrgan = await updateOrganInDB(id, data)\n\n    if (!updatedOrgan) {\n      return NextResponse.json({ error: 'Organ not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(updatedOrgan)\n  } catch (error) {\n    console.error('Error updating organ:', error)\n    return NextResponse.json({ error: 'Failed to update organ' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const success = await deleteOrganFromDB(id)\n\n    if (!success) {\n      return NextResponse.json({ error: 'Organ not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({ message: 'Organ deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting organ:', error)\n    return NextResponse.json({ error: 'Failed to delete organ' }, { status: 500 })\n  }\n}","size_bytes":1215},"app/api/live-streams/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { NextRequest } from 'next/server'\nimport { getLiveStreamsFromDB, createLiveStreamInDB, updateLiveStreamInDB, deleteLiveStreamFromDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const liveStreams = await getLiveStreamsFromDB()\n    console.log('API: Live streams fetched from DB:', liveStreams.length, 'items')\n\n    return new Response(JSON.stringify(Array.isArray(liveStreams) ? liveStreams : []), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'Last-Modified': new Date().toUTCString(),\n        'Vary': 'Accept-Encoding',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching live streams:', error)\n    // Return empty array if database fails, let client handle fallback\n    return NextResponse.json([], { status: 200 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { title, thumbnailUrl, streamUrl, channel, isLive, status } = body\n\n    if (!title || !streamUrl) {\n      return NextResponse.json(\n        { error: 'Título y URL de transmisión son requeridos' },\n        { status: 400 }\n      )\n    }\n\n    const newStream = await createLiveStreamInDB({\n      title,\n      thumbnailUrl: thumbnailUrl || '',\n      streamUrl,\n      channel: channel || '',\n      isLive: isLive || false,\n      status: status || 'offline'\n    })\n\n    return NextResponse.json(newStream, { status: 201 })\n  } catch (error) {\n    console.error('Error creating live stream:', error)\n    return NextResponse.json(\n      { error: 'Error al crear la transmisión' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n    \n    if (!id) {\n      return NextResponse.json(\n        { error: 'ID de transmisión requerido' },\n        { status: 400 }\n      )\n    }\n\n    const body = await request.json()\n    console.log('PUT request body:', body)\n    console.log('Stream ID:', id)\n    \n    const { title, thumbnailUrl, streamUrl, channel, isLive, status } = body\n\n    // For status-only updates, we don't need title and streamUrl\n    const isStatusOnlyUpdate = !title && !streamUrl && status\n    \n    if (!isStatusOnlyUpdate && (!title || !streamUrl)) {\n      return NextResponse.json(\n        { error: 'Título y URL de transmisión son requeridos para actualizaciones completas' },\n        { status: 400 }\n      )\n    }\n\n    const updateData: any = {}\n    \n    if (title) updateData.title = title\n    if (thumbnailUrl !== undefined) updateData.thumbnailUrl = thumbnailUrl\n    if (streamUrl) updateData.streamUrl = streamUrl\n    if (channel !== undefined) updateData.channel = channel\n    if (isLive !== undefined) updateData.isLive = Boolean(isLive)\n    if (status) updateData.status = status\n\n    console.log('Updating stream with data:', updateData)\n\n    const updatedStream = await updateLiveStreamInDB(id, updateData)\n\n    if (!updatedStream) {\n      return NextResponse.json(\n        { error: 'Transmisión no encontrada' },\n        { status: 404 }\n      )\n    }\n\n    console.log('Stream updated successfully:', updatedStream)\n    return NextResponse.json(updatedStream)\n  } catch (error) {\n    console.error('Error updating live stream:', error)\n    const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n    return NextResponse.json(\n      { error: `Error al actualizar la transmisión: ${errorMessage}` },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n    \n    if (!id) {\n      return NextResponse.json(\n        { error: 'ID de transmisión requerido' },\n        { status: 400 }\n      )\n    }\n\n    const deleted = await deleteLiveStreamFromDB(id)\n    \n    if (!deleted) {\n      return NextResponse.json(\n        { error: 'Transmisión no encontrada' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json({ message: 'Transmisión eliminada correctamente' })\n  } catch (error) {\n    console.error('Error deleting live stream:', error)\n    return NextResponse.json(\n      { error: 'Error al eliminar la transmisión' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":4494},"components/ui/context-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7260},"components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1070},"components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full opacity-100\",\n  {\n    variants: {\n      variant: {\n        default: \"border-gray-300 bg-white text-gray-900 shadow-lg opacity-100\",\n        destructive:\n          \"destructive group border-red-600 bg-red-600 text-white shadow-lg opacity-100\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4892},"hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"components/auto-scroll-carousel.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from 'react'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport { useFloatingPlayer } from \"@/components/floating-player-context\";\nimport Image from 'next/image'\n\ninterface ChannelConfig {\n  id: string\n  name: string\n  number: string\n  logo: string\n  backgroundColor: string\n  textColor: string\n  transmisionesLink: string\n  isActive: boolean\n  order: number\n}\n\nfunction ChannelIndicators() {\n  const [channels, setChannels] = useState<ChannelConfig[]>([])\n  const [liveStreams, setLiveStreams] = useState<LiveStream[]>([])\n\n  useEffect(() => {\n    const fetchChannels = async () => {\n      try {\n        const response = await fetch('/api/channels')\n        if (response.ok) {\n          const channelData = await response.json()\n          setChannels(channelData.filter((ch: ChannelConfig) => ch.isActive).sort((a: ChannelConfig, b: ChannelConfig) => a.order - b.order))\n        }\n      } catch (error) {\n        console.error('Error fetching channels:', error)\n      }\n    }\n\n    const fetchLiveStreams = async () => {\n      try {\n        const response = await fetch('/api/live-streams/all')\n        if (response.ok) {\n          const streamsData = await response.json()\n          setLiveStreams(streamsData)\n        }\n      } catch (error) {\n        console.error('Error fetching live streams:', error)\n      }\n    }\n\n    fetchChannels()\n    fetchLiveStreams()\n  }, [])\n\n  const getStreamLinkForChannel = (channelNumber: string) => {\n    // Find matching stream by channel\n    const matchingStream = liveStreams.find(stream => {\n      const streamChannelNumber = stream.channel === 'C+' ? '45.1' :\n                                  stream.channel === 'S+' ? '45.2' :\n                                  stream.channel === 'D+' ? '45.3' :\n                                  stream.channel === 'ST+' ? '45.4' : ''\n      return streamChannelNumber === channelNumber\n    })\n\n    return matchingStream ? `/transmisiones?stream=${matchingStream.id}` : '/transmisiones'\n  }\n\n  return (\n    <div className=\"flex flex-wrap justify-center sm:justify-end gap-2 sm:gap-3 md:gap-4\">\n      {channels.map((channel) => (\n        <a \n          key={channel.id} \n          href={getStreamLinkForChannel(channel.number)} \n          className=\"flex items-center gap-1 sm:gap-2 hover:opacity-80 transition-opacity\"\n        >\n          <div className=\"flex-shrink-0\">\n            <img \n              src={channel.logo || '/images/placeholder-logo.png'} \n              className=\"h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12 object-contain\" \n              alt={`${channel.name} logo`}\n            />\n          </div>\n          <div \n            className=\"text-white rounded-full px-2 py-1 sm:px-3 sm:py-1.5 md:px-4 md:py-2 flex items-center text-xs sm:text-sm md:text-base whitespace-nowrap\"\n            style={{ backgroundColor: channel.backgroundColor, color: channel.textColor }}\n          >\n            <span className=\"mr-1 sm:mr-1.5\">CANAL</span>\n            <span className=\"font-bold\">{channel.number}</span>\n          </div>\n        </a>\n      ))}\n    </div>\n  )\n}\n\n\nimport { useRef } from \"react\";\nimport Link from \"next/link\";\nimport type { LiveStream } from \"@/lib/api\";\nimport { useMobile } from \"@/hooks/use-mobile\";\n\ninterface AutoScrollCarouselProps {\n  items: LiveStream[];\n  showLiveIndicator?: boolean;\n  liveIndicatorText?: string;\n}\n\nexport default function AutoScrollCarousel({ items, showLiveIndicator = false, liveIndicatorText = \"EN VIVO AHORA\" }: AutoScrollCarouselProps) {\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [currentItems, setCurrentItems] = useState<LiveStream[]>(items);\n  const isMobile = useMobile();\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  // Touch handling for swipe gestures\n  const [touchStart, setTouchStart] = useState<number | null>(null);\n  const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n  // Refresh items when props change and add periodic refresh\n  useEffect(() => {\n    setCurrentItems(items);\n  }, [items]);\n\n  // Remove excessive refresh - data will be updated when parent component refreshes\n\n  // Auto scroll functionality\n  useEffect(() => {\n    const liveStreams = currentItems.filter((stream) => \n      stream.isLive === true || stream.status === 'recess'\n    );\n\n    // Only auto-scroll if there are enough items to scroll\n    const shouldAutoScroll = isMobile ? liveStreams.length > 1 : liveStreams.length > 4;\n\n    if (shouldAutoScroll) {\n      const maxIndex = isMobile \n        ? Math.max(0, liveStreams.length - 1)\n        : Math.max(0, liveStreams.length - 4);\n\n      const interval = setInterval(() => {\n        setActiveIndex((prev) => (prev >= maxIndex ? 0 : prev + 1));\n        setCurrentIndex((prev) => (prev >= maxIndex ? 0 : prev + 1));\n      }, 5000);\n\n      return () => clearInterval(interval);\n    }\n  }, [currentItems, isMobile]);\n\n  // Touch swipe handling\n  const minSwipeDistance = 50;\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.preventDefault(); // Prevent touch delays\n    setTouchEnd(null);\n    setTouchStart(e.targetTouches[0].clientX);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    setTouchEnd(e.targetTouches[0].clientX);\n  };\n\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n\n    const distance = touchStart - touchEnd;\n    const isLeftSwipe = distance > minSwipeDistance;\n    const isRightSwipe = distance < -minSwipeDistance;\n\n    if (isLeftSwipe) {\n      scroll(\"right\"); // Swipe left = go to next\n    } else if (isRightSwipe) {\n      scroll(\"left\"); // Swipe right = go to previous\n    }\n  };\n\n  // Function to handle manual scrolling\n  const scroll = (direction: \"left\" | \"right\") => {\n    const liveStreams = currentItems.filter((stream) => \n      stream.isLive === true || stream.status === 'recess'\n    );\n\n    if (isMobile) {\n      // Mobile: Show 1 item at a time\n      const maxIndex = Math.max(0, liveStreams.length - 1);\n      if (direction === \"left\") {\n        setActiveIndex((prev) => (prev === 0 ? maxIndex : prev - 1));\n        setCurrentIndex((prev) => (prev === 0 ? maxIndex : prev - 1));\n      } else {\n        setActiveIndex((prev) => (prev >= maxIndex ? 0 : prev + 1));\n        setCurrentIndex((prev) => (prev >= maxIndex ? 0 : prev + 1));\n      }\n    } else {\n      // Desktop: Show 4 items at a time for 5+ streams, scroll by 1\n      const maxIndex = Math.max(0, liveStreams.length - 4);\n      if (direction === \"left\") {\n        setActiveIndex((prev) => (prev === 0 ? maxIndex : prev - 1));\n        setCurrentIndex((prev) => (prev === 0 ? maxIndex : prev - 1));\n      } else {\n        setActiveIndex((prev) => (prev >= maxIndex ? 0 : prev + 1));\n        setCurrentIndex((prev) => (prev >= maxIndex ? 0 : prev + 1));\n      }\n    }\n  };\n\n  // Handle card click with better error handling\n  const handleCardClick = (stream: LiveStream) => {\n    console.log(\"Carousel: Clicking stream card:\", {\n      id: stream.id,\n      title: stream.title,\n      url: stream.streamUrl,\n    });\n\n    if (stream.streamUrl) {\n      try {\n        window.open(stream.streamUrl, \"_blank\", \"noopener,noreferrer\");\n      } catch (error) {\n        console.error(\"Carousel: Error opening URL:\", error);\n        // Fallback: try direct navigation\n        window.location.href = stream.streamUrl;\n      }\n    } else {\n      console.warn(\"Carousel: No stream URL available for:\", stream.title);\n    }\n  };\n\n  // Filter live and recess streams, include ST+ channel\n  const liveStreams = currentItems.filter((stream) => \n    (stream.isLive === true || stream.status === 'recess' || stream.status === 'signal_open')\n  );\n\n  // If no live streams, show a message\n  if (liveStreams.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-white\">\n        No hay transmisiones en vivo en este momento.\n      </div>\n    );\n  }\n\n  // Function to get channel logo based on channel field\n  const getChannelLogo = (channel: string) => {\n    switch (channel) {\n      case \"C+\":\n        return \"/images/channel-c-logo.png\";\n      case \"D+\":\n        return \"/images/channel-d-logo.png\";\n      case \"S+\":\n        return \"/images/channel-g-logo.png\";\n      case \"ST+\":\n        return \"/images/45.4.png\";\n      default:\n        return \"/images/logo-canal-congreso.png\";\n    }\n  };\n\n  // Streaming Player Button Component (for HLS streams)\n  function StreamingPlayerButton({ streamUrl }: { streamUrl: string }) {\n    const { showPlayer } = useFloatingPlayer();\n    const [isMobileDevice, setIsMobileDevice] = useState(false);\n    const [isHydrated, setIsHydrated] = useState(false);\n\n    useEffect(() => {\n      setIsHydrated(true);\n      setIsMobileDevice(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent));\n    }, []);\n\n    const handleStreamClick = () => {\n      // Show floating player only for desktop\n      showPlayer(streamUrl, \"Radio Congreso - EN VIVO\");\n    };\n\n    const handleMobileClick = () => {\n      // Navigate to radio page on mobile\n      window.location.href = '/radio';\n    };\n\n    return (\n      <div className=\"text-white py-3 px-4\">\n        <div className=\"container mx-auto flex items-center justify-center\">\n          {!isHydrated ? (\n            // Show button during SSR and initial hydration\n            <button\n              onClick={handleStreamClick}\n              className=\"bg-[#e11d48] hover:bg-[#be185d] text-white rounded-full p-3 flex items-center space-x-2 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M8 5v14l11-7z\"/>\n              </svg>\n              <span className=\"font-medium\">Radio en Vivo</span>\n            </button>\n          ) : isMobileDevice ? (\n            // Navigate to Radio Page for Mobile\n            <button\n              onClick={handleMobileClick}\n              className=\"bg-[#e11d48] hover:bg-[#be185d] text-white rounded-full px-4 py-2 flex items-center gap-2 transition-colors text-sm font-medium whitespace-nowrap shadow-lg\"\n            >\n              <svg className=\"w-4 h-4 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M8 5v14l11-7z\"/>\n              </svg>\n              <span>Radio en Vivo</span>\n            </button>\n          ) : (\n            // Button for Desktop (shows floating player)\n            <button\n              onClick={handleStreamClick}\n              className=\"bg-[#e11d48] hover:bg-[#be185d] text-white rounded-full px-4 py-2 sm:p-3 flex items-center gap-2 transition-colors text-sm font-medium whitespace-nowrap shadow-lg\"\n            >\n              <svg className=\"w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M8 5v14l11-7z\"/>\n              </svg>\n              <span>Radio en Vivo</span>\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative\">\n      {/* Header section with radio and channels - responsive layout */}\n      <div className=\"mb-4 px-2 sm:px-4\">\n        {/* Mobile layout - stacked */}\n        <div className=\"flex flex-col gap-4 sm:hidden\">\n          {/* Channel indicators - full width on mobile */}\n          <div className=\"w-full flex justify-center\">\n            <ChannelIndicators/>\n          </div>\n\n          {/* Radio section - separate row on mobile */}\n          <div className=\"flex items-center justify-center\">\n            <div className=\"min-w-0\">\n              <StreamingPlayerButton streamUrl=\"https://ccstreaming.packet.mx/LiveApp/streams/Radio_kd5oiNTTWO0gEOFc23dr762145.m3u8\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Desktop layout - same row */}\n        <div className=\"hidden sm:flex items-center justify-between\">\n          {/* Radio section on the left */}\n          <div className=\"flex items-center\">\n            <Image\n              src=\"/images/radio-icon.png\"\n              alt=\"Radio Congreso Icon\"\n              width={32}\n              height={32}\n              className=\"w-8 h-8 sm:w-10 sm:h-10 object-contain flex-shrink-0\"\n            />\n            <div className=\"min-w-0 -ml-2\">\n              <StreamingPlayerButton streamUrl=\"https://ccstreaming.packet.mx/LiveApp/streams/Radio_kd5oiNTTWO0gEOFc23dr762145.m3u8\" />\n            </div>\n          </div>\n\n          {/* Channel indicators on the right */}\n          <div className=\"flex justify-end\">\n            <ChannelIndicators/>\n          </div>\n        </div>\n      </div>\n\n      {/* EN VIVO AHORA title - conditionally rendered */}\n      {showLiveIndicator && (\n        <h2 className=\"text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center text-white\">\n          <span className=\"bg-red-600 w-3 h-3 rounded-full mr-2 animate-pulse\"></span>\n          {liveIndicatorText}\n        </h2>\n      )}\n\n      {/* Video thumbnails */}\n      <div className={`py-4 ${isMobile ? 'px-2' : 'px-1'}`}>\n        {isMobile ? (\n          // Mobile: Show only one card with better visibility\n          <div \n            className=\"flex justify-center px-4\"\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n          >\n            {liveStreams\n              .slice(activeIndex, activeIndex + 1)\n              .map((stream, index) => (\n                <Link\n                  href={`/transmisiones?stream=${stream.id}`}\n                  key={`${stream.id}-${stream.streamUrl}`}\n                  className=\"relative group cursor-pointer hover:scale-105 transition-transform duration-300 block w-full max-w-md\"\n                >\n                  <div className=\"relative h-64 w-full rounded-xl overflow-hidden shadow-2xl border-2 border-white/20\">\n                    <Image\n                      src={\n                        stream.thumbnailUrl ||\n                        \"/placeholder.svg?height=384&width=512\"\n                      }\n                      alt={stream.title}\n                      fill\n                      className=\"object-cover\"\n                      sizes=\"100vw\"\n                      priority\n                    />\n\n                    {/* Strong overlay with gradient background for text */}\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-black/30\"></div>\n\n                    {/* Live indicator */}\n                    {showLiveIndicator && (\n                        <div className=\"absolute top-3 left-3 z-10\">\n                          <span className={`text-white text-xs font-bold px-2 py-1 rounded ${\n                            stream.status === 'signal_open' ? 'bg-blue-600' : 'bg-red-600'\n                          }`}>\n                            {stream.status === 'signal_open' ? 'SEÑAL ABIERTA' : 'EN VIVO'}\n                          </span>\n                        </div>\n                      )\n                    }\n\n                    {/* Text overlay */}\n                    <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n                      <div className=\"flex items-start gap-2\">\n                        <Image\n                          src={getChannelLogo(stream.channel || \"\")}\n                          alt=\"Channel Logo\"\n                          width={24}\n                          height={24}\n                          className=\"object-contain flex-shrink-0 mt-1 bg-white/10 rounded-lg p-1\"\n                        />\n                        <p className=\"text-xs text-white text-left flex-1 leading-tight font-medium drop-shadow-lg\">{stream.title}</p>\n                      </div>\n                    </div>\n                  </div>\n                </Link>\n              ))\n            }\n          </div>\n        ) : (\n          // Desktop: Responsive grid layout with better spacing and card management\n          <div \n            className=\"flex justify-center px-2\"\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n          >\n            <div className=\"w-full max-w-[1400px] mx-auto\">\n              {liveStreams.length <= 4 ? (\n                // Show all streams if 4 or fewer (no pagination needed)\n                <div className=\"flex justify-center gap-3\"\n                >\n                  {liveStreams.map((stream, index) => (\n                    <div key={`${stream.id}-${stream.streamUrl}`} className=\"flex-1 min-w-0 max-w-none\">\n                      <Link\n                        href={`/transmisiones?stream=${stream.id}`}\n                        className=\"relative group cursor-pointer hover:scale-105 transition-all duration-300 block\"\n                      >\n                        <div className=\"relative h-56 w-full rounded-xl overflow-hidden shadow-xl border border-white/20 group-hover:shadow-2xl transition-shadow\">\n                          <Image\n                            src={\n                              stream.thumbnailUrl ||\n                              \"/placeholder.svg?height=384&width=512\"\n                            }\n                            alt={stream.title}\n                            fill\n                            className=\"object-cover transition-transform duration-500 group-hover:scale-110\"\n                            sizes=\"100vw, (max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw\"\n                            priority={index < 2}\n                          />\n\n                          {/* Enhanced overlay with better gradients */}\n                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-black/20 group-hover:from-black/95 transition-all duration-300\"></div>\n\n                          {/* Status tag with pulsing animation */}\n                          <div className=\"absolute top-3 left-3 z-10\">\n                            {stream.status === 'signal_open' ? (\n                              <div className=\"bg-blue-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                SEÑAL ABIERTA\n                              </div>\n                            ) : stream.status === 'live' || stream.isLive ? (\n                              <div className=\"bg-red-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                EN VIVO\n                              </div>\n                            ) : stream.status === 'recess' ? (\n                              <div className=\"bg-orange-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                EN RECESO\n                              </div>\n                            ) : (\n                              <div className=\"bg-gray-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                FUERA DE LÍNEA\n                              </div>\n                            )}\n                          </div>\n\n\n\n                          {/* Hover play button effect */}\n                          <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                            <div className=\"bg-white/20 backdrop-blur-sm rounded-full p-4 transform scale-75 group-hover:scale-100 transition-transform duration-300\">\n                              <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path d=\"M8 6.82v10.36c0 .79.87 1.27 1.54.84l8.14-5.18c.62-.39.62-1.29 0-1.68L9.54 5.98C8.87 5.55 8 6.03 8 6.82z\"/>\n                              </svg>\n                            </div>\n                          </div>\n                        </div>\n                      </Link>\n\n                      {/* Logo and title below card for desktop */}\n                      <div className=\"mt-4 flex items-start gap-3\">\n                        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-2 flex-shrink-0\">\n                          <Image\n                            src={getChannelLogo(stream.channel || \"\")}\n                            alt=\"Channel Logo\"\n                            width={24}\n                            height={24}\n                            className=\"object-contain\"\n                          />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-white text-sm lg:text-base font-medium leading-tight\">\n                            {stream.title}\n                          </p>\n                          <p className=\"text-white/80 text-xs mt-1\">\n                            {stream.channel === 'C+' ? 'Canal 45.1' : stream.channel === 'S+' ? 'Canal 45.2' : stream.channel === 'D+' ? 'Canal 45.3' : stream.channel === 'ST+' ? 'Streaming' : `Canal ${stream.channel}`}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                // Paginated view for 5+ streams (show 4 at a time)\n                <div className=\"flex justify-center gap-3\">\n                  {liveStreams.slice(activeIndex, activeIndex + 4).map((stream, index) => (\n                    <div key={`${stream.id}-${stream.streamUrl}`} className=\"flex-1 min-w-0 max-w-none\">\n                      <Link\n                        href={`/transmisiones?stream=${stream.id}`}\n                        className=\"relative group cursor-pointer hover:scale-105 transition-all duration-300 block\"\n                      >\n                        <div className=\"relative h-56 w-full rounded-xl overflow-hidden shadow-xl border border-white/20 group-hover:shadow-2xl transition-shadow\">\n                          <Image\n                            src={\n                              stream.thumbnailUrl ||\n                              \"/placeholder.svg?height=384&width=512\"\n                            }\n                            alt={stream.title}\n                            fill\n                            className=\"object-cover transition-transform duration-500 group-hover:scale-110\"\n                            sizes=\"100vw, (max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw\"\n                            priority={index < 2}\n                          />\n\n                          {/* Enhanced overlay */}\n                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-black/20 group-hover:from-black/95 transition-all duration-300\"></div>\n\n                          {/* Status tag */}\n                          <div className=\"absolute top-3 left-3 z-10\">\n                            {stream.status === 'signal_open' ? (\n                              <div className=\"bg-blue-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                SEÑAL ABIERTA\n                              </div>\n                            ) : stream.status === 'live' || stream.isLive ? (\n                              <div className=\"bg-red-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                EN VIVO\n                              </div>\n                            ) : stream.status === 'recess' ? (\n                              <div className=\"bg-orange-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                EN RECESO\n                              </div>\n                            ) : (\n                              <div className=\"bg-gray-600 text-white px-3 py-1.5 rounded-full text-xs font-bold flex items-center gap-1.5 shadow-lg\">\n                                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n                                FUERA DE LÍNEA\n                              </div>\n                            )}\n                          </div>\n\n\n\n                          {/* Hover play button effect */}\n                          <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                            <div className=\"bg-white/20 backdrop-blur-sm rounded-full p-4 transform scale-75 group-hover:scale-100 transition-transform duration-300\">\n                              <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path d=\"M8 6.82v10.36c0 .79.87 1.27 1.54.84l8.14-5.18c.62-.39.62-1.29 0-1.68L9.54 5.98C8.87 5.55 8 6.03 8 6.82z\"/>\n                              </svg>\n                            </div>\n                          </div>\n                        </div>\n                      </Link>\n\n                      {/* Logo and title below card for desktop */}\n                      <div className=\"mt-4 flex items-start gap-3\">\n                        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-2 flex-shrink-0\">\n                          <Image\n                            src={getChannelLogo(stream.channel || \"\")}\n                            alt=\"Channel Logo\"\n                            width={24}\n                            height={24}\n                            className=\"object-contain\"\n                          />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-white text-sm lg:text-base font-medium leading-tight\">\n                            {stream.title}\n                          </p>\n                          <p className=\"text-white/80 text-xs mt-1\">\n                            {stream.channel === 'C+' ? 'Canal 45.1' : stream.channel === 'S+' ? 'Canal 45.2' : stream.channel === 'D+' ? 'Canal 45.3' : stream.channel === 'ST+' ? 'Streaming' : `Canal ${stream.channel}`}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Navigation arrows - Only show when there are 5+ streams in desktop, or 2+ in mobile */}\n      {((liveStreams.length > 4 && !isMobile) || (liveStreams.length > 1 && isMobile)) && (\n        <div className={`flex justify-center items-center space-x-8 ${isMobile ? 'mt-8' : 'mt-8'}`}>\n          <button\n            onClick={() => scroll(\"left\")}\n            className=\"focus:outline-none p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors\"\n            aria-label=\"Anterior\"\n          >\n            <ChevronLeft className=\"w-6 h-6 text-white\" />\n          </button>\n\n          <button\n            onClick={() => scroll(\"right\")}\n            className=\"focus:outline-none p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors\"\n            aria-label=\"Siguiente\"\n          >\n            <ChevronRight className=\"w-6 h-6 text-white\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":27977},"components/tinymce-wrapper.tsx":{"content":"\"use client\"\n\nimport dynamic from 'next/dynamic'\nimport React from 'react'\n\n// Dynamically import TinyMCE to avoid SSR issues\nconst TinyMCEEditor = dynamic(() => import('./tinymce-editor'), { \n  ssr: false,\n  loading: () => (\n    <div className=\"w-full h-64 bg-gray-100 border border-gray-300 rounded-md flex items-center justify-center\">\n      <span className=\"text-gray-500\">Cargando editor...</span>\n    </div>\n  )\n})\n\ninterface TinyMCEWrapperProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  height?: number;\n  readOnly?: boolean;\n}\n\nexport default function TinyMCEWrapper(props: TinyMCEWrapperProps) {\n  return <TinyMCEEditor {...props} />\n}","size_bytes":684},"components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"app/api/auth/login/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { validateUser, getUserByUsername } from '@/lib/auth'\nimport { cookies } from 'next/headers'\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'default-secret-key-for-development-only'\n\n// Log environment info for debugging (remove in production)\nconsole.log('Auth environment check:', {\n  hasJwtSecret: !!process.env.JWT_SECRET,\n  nodeEnv: process.env.NODE_ENV,\n  hasDatabaseUrl: !!process.env.DATABASE_URL\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { username, password } = await request.json()\n\n    if (!username || !password) {\n      return NextResponse.json(\n        { error: 'Username and password are required' },\n        { status: 400 }\n      )\n    }\n\n    console.log('Login attempt for username:', username)\n    const isValid = await validateUser(username, password)\n    console.log('Validation result:', isValid)\n    \n    if (!isValid) {\n      console.log('Login failed for username:', username)\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      )\n    }\n\n    // Get user details from database\n    const user = await getUserByUsername(username)\n    if (!user) {\n      console.log('User not found after validation:', username)\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 401 }\n      )\n    }\n\n    // Create JWT token\n    const token = jwt.sign(\n      { username, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    )\n\n    // Set cookie with flexible security settings\n    const cookieStore = await cookies()\n    const isProduction = process.env.NODE_ENV === 'production'\n    const isHttps = process.env.HTTPS === 'true' || process.env.NODE_ENV === 'production'\n    \n    cookieStore.set('auth-token', token, {\n      httpOnly: true,\n      secure: isHttps, // Only secure if HTTPS is available\n      sameSite: isHttps ? 'strict' : 'lax', // More flexible for HTTP\n      path: '/',\n      maxAge: 24 * 60 * 60 // 24 hours\n    })\n\n    console.log('Cookie set with settings:', {\n      secure: isHttps,\n      sameSite: isHttps ? 'strict' : 'lax',\n      nodeEnv: process.env.NODE_ENV\n    })\n\n    return NextResponse.json({ \n      success: true, \n      user: { username, role: user.role }\n    })\n  } catch (error) {\n    console.error('Login error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2494},"components/social-bar.tsx":{"content":"\"use client\"\n\nimport React, { useState, useEffect } from 'react'\nimport Link from 'next/link'\n\nexport default function SocialBar() {\n  const [isHydrated, setIsHydrated] = useState(false)\n\n  useEffect(() => {\n    setIsHydrated(true)\n  }, [])\n\n  // Prevent hydration mismatch by not rendering on server\n  if (!isHydrated) {\n    return null\n  }\n\n  return (\n    <div className=\"fixed right-0 top-1/2 -translate-y-1/2 z-50 transition-transform duration-300 group\">\n      <div className=\"flex flex-col bg-purple-900 rounded-l-md shadow-lg\">\n        {/* WhatsApp */}\n        <Link\n          href=\"https://whatsapp.com/channel/0029Vb55Zgo5EjxvIySofH1J\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-green-600 transition-colors\"\n          aria-label=\"WhatsApp\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.893 3.488\"/>\n          </svg>\n        </Link>\n\n        {/* Facebook */}\n        <Link\n          href=\"https://www.facebook.com/share/1AEEAeTbkQ/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-blue-600 transition-colors\"\n          aria-label=\"Facebook\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n          </svg>\n        </Link>\n\n        {/* Twitter/X */}\n        <Link\n          href=\"https://x.com/canalcongreso\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-gray-800 transition-colors\"\n          aria-label=\"X (Twitter)\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"/>\n          </svg>\n        </Link>\n\n        {/* YouTube */}\n        <Link\n          href=\"https://www.youtube.com/channel/UC0qf7R7Vq3H8JSNYfIs3uKg\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-red-600 transition-colors\"\n          aria-label=\"YouTube\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\"/>\n          </svg>\n        </Link>\n\n        {/* Spotify */}\n        <Link\n          href=\"https://open.spotify.com/show/17bt21pyYPzCKdHOrgdY3B?si=28wx_d3QTZyEk9M8ABKhWA\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-green-500 transition-colors\"\n          aria-label=\"Spotify\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 0C5.376 0 0 5.376 0 12s5.376 12 12 12 12-5.376 12-12S18.624 0 12 0zm5.568 17.328c-.24 0-.48-.096-.72-.24-2.16-1.2-4.896-1.44-7.68-.72-.24.072-.48-.024-.576-.24-.072-.24.024-.48.24-.576 3.024-.768 6.024-.528 8.4.816.216.144.288.432.144.648-.096.144-.288.312-.552.312zm.96-2.52c-.24 0-.48-.096-.72-.24-2.52-1.44-6.24-1.8-9.36-.96-.288.072-.576-.072-.648-.36-.072-.288.072-.576.36-.648 3.6-.96 7.68-.552 10.56 1.152.24.144.36.48.216.72-.144.24-.288.336-.408.336zm.096-2.64c-.24 0-.48-.096-.72-.24-3.12-1.68-8.16-1.8-11.04-.96-.36.096-.72-.12-.816-.48-.096-.36.12-.72.48-.816 3.36-.96 8.88-.816 12.48 1.152.288.144.432.48.288.768-.144.216-.36.336-.648.336z\"/>\n          </svg>\n        </Link>\n\n        {/* TikTok */}\n        <Link\n          href=\"https://www.tiktok.com/@canaldelcongresomx?_t=ZS-8yDjQ5NJpX5&_r=1\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-black transition-colors\"\n          aria-label=\"TikTok\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z\"/>\n          </svg>\n        </Link>\n\n        {/* Instagram */}\n        <Link\n          href=\"https://www.instagram.com/canalcongresomx?igsh=MW5qNjJjNHU5aWZsdA==\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-2 hover:bg-gradient-to-r hover:from-purple-500 hover:to-pink-500 transition-colors\"\n          aria-label=\"Instagram\"\n        >\n          <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z\"/>\n          </svg>\n        </Link>\n      </div>\n    </div>\n  )\n}","size_bytes":7791},"lib/api-database.ts":{"content":"import { Pool } from 'pg'\nimport { createDatabaseConnectionFromEnv } from './database-env'\nimport type { LiveStream, Program, NewsItem, Organ, ParliamentaryGroup, Legislator, RadioProgram } from './api'\n\nlet pool: Pool | null = null\n\n// Helper function to get database connection\nfunction getDB(): Pool {\n  if (!pool) {\n    try {\n      pool = createDatabaseConnectionFromEnv()\n      if (!pool) {\n        throw new Error('Failed to create database connection from environment')\n      }\n    } catch (error) {\n      console.error('Database connection error:', error)\n      throw new Error('Database connection failed. Please check your DATABASE_URL environment variable.')\n    }\n  }\n  return pool\n}\n\n// Live Streams API functions\n// Parliamentary Groups functions\nexport async function getParliamentaryGroupsFromDB(): Promise<ParliamentaryGroup[]> {\n  const pool = getDB()\n  if (!pool) {\n    throw new Error('Database connection not available')\n  }\n\n  try {\n    const result = await pool.query(`\n      SELECT \n        pg.id,\n        pg.name,\n        pg.abbreviation,\n        pg.image_url as \"imageUrl\",\n        pg.color_hex as \"colorHex\",\n        pg.description,\n        pg.created_at as \"createdAt\",\n        COUNT(l.id) as \"legislatorCount\"\n      FROM parliamentary_groups pg\n      LEFT JOIN legislators l ON pg.id = l.parliamentary_group_id\n      GROUP BY pg.id, pg.name, pg.abbreviation, pg.image_url, pg.color_hex, pg.description, pg.created_at\n      ORDER BY pg.name\n    `)\n\n    return result.rows.map(row => ({\n      id: row.id.toString(),\n      name: row.name,\n      abbreviation: row.abbreviation,\n      imageUrl: row.imageUrl || '/placeholder.svg?height=100&width=100&text=' + row.abbreviation,\n      colorHex: row.colorHex,\n      description: row.description,\n      legislatorCount: parseInt(row.legislatorCount) || 0,\n      createdAt: new Date(row.createdAt)\n    }))\n  } catch (error) {\n    console.error('Error fetching parliamentary groups from database:', error)\n    throw error\n  }\n}\n\nexport async function createParliamentaryGroupInDB(data: Omit<ParliamentaryGroup, \"id\" | \"createdAt\">): Promise<ParliamentaryGroup> {\n  const pool = getDB()\n  if (!pool) {\n    throw new Error('Database connection not available')\n  }\n\n  try {\n    const result = await pool.query(`\n      INSERT INTO parliamentary_groups (name, abbreviation, image_url, color_hex, description)\n      VALUES ($1, $2, $3, $4, $5)\n      RETURNING \n        id,\n        name,\n        abbreviation,\n        image_url as \"imageUrl\",\n        color_hex as \"colorHex\", \n        description,\n        created_at as \"createdAt\"\n    `, [data.name, data.abbreviation, data.imageUrl, data.colorHex || null, data.description || null])\n\n    const row = result.rows[0]\n    return {\n      id: row.id.toString(),\n      name: row.name,\n      abbreviation: row.abbreviation,\n      imageUrl: row.imageUrl,\n      colorHex: row.colorHex,\n      description: row.description,\n      createdAt: new Date(row.createdAt)\n    }\n  } catch (error) {\n    console.error('Error creating parliamentary group:', error)\n    throw error\n  }\n}\n\n// Live streams management\nexport async function getLiveStreamsFromDB(): Promise<LiveStream[]> {\n  try {\n    const pool = getDB()\n\n    if (!pool) {\n      console.error('Database connection not available')\n      return []\n    }\n\n    const result = await pool.query(`\n      SELECT id, title, thumbnail_url as \"thumbnailUrl\", stream_url as \"streamUrl\", \n             channel, is_live as \"isLive\", status, created_at as \"createdAt\"\n      FROM live_streams \n      ORDER BY created_at DESC\n    `)\n\n    return result.rows.map(row => ({\n      ...row,\n      id: row.id.toString(),\n      createdAt: new Date(row.createdAt)\n    }))\n  } catch (error) {\n    console.error('Error fetching live streams from database:', error)\n    return []\n  }\n}\n\nexport async function createLiveStreamInDB(data: {\n  title: string\n  thumbnailUrl: string\n  streamUrl: string\n  channel: string\n  isLive: boolean\n  status?: string\n}): Promise<LiveStream> {\n  const pool = getDB()\n  // Set status based on isLive if not explicitly provided\n  const status = data.status ?? (data.isLive ? 'live' : 'offline')\n  \n  const result = await pool.query(\n      `INSERT INTO live_streams (title, thumbnail_url, stream_url, channel, is_live, status) \n       VALUES ($1, $2, $3, $4, $5, $6) \n       RETURNING id, title, thumbnail_url as \"thumbnailUrl\", stream_url as \"streamUrl\", \n                 channel, is_live as \"isLive\", status, created_at as \"createdAt\"`,\n      [data.title, data.thumbnailUrl, data.streamUrl, data.channel, data.isLive, status]\n    )\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }\n}\n\n// Organs database functions\nexport async function getOrgans(): Promise<Organ[]> {\n  const pool = getDB()\n\n  // Check if url column exists\n  const columnCheck = await pool.query(`\n    SELECT column_name FROM information_schema.columns \n    WHERE table_name = 'organs' AND column_name = 'url'\n  `)\n\n  let query;\n  if (columnCheck.rows.length > 0) {\n    // URL column exists\n    query = `\n      SELECT id, title, description, image_url as \"imageUrl\", url,\n             created_at as \"createdAt\", updated_at as \"updatedAt\"\n      FROM organs \n      ORDER BY created_at DESC\n    `;\n  } else {\n    // URL column doesn't exist\n    query = `\n      SELECT id, title, description, image_url as \"imageUrl\",\n             created_at as \"createdAt\", updated_at as \"updatedAt\"\n      FROM organs \n      ORDER BY created_at DESC\n    `;\n  }\n\n  const result = await pool.query(query)\n\n  return result.rows.map(row => ({\n    ...row,\n    id: row.id.toString(),\n    url: row.url || null,\n    createdAt: new Date(row.createdAt),\n    updatedAt: new Date(row.updatedAt)\n  }))\n}\n\nexport async function createOrganInDB(data: Omit<Organ, \"id\" | \"createdAt\" | \"updatedAt\">): Promise<Organ> {\n  const pool = getDB()\n\n  // Check if url column exists\n  const columnCheck = await pool.query(`\n    SELECT column_name FROM information_schema.columns \n    WHERE table_name = 'organs' AND column_name = 'url'\n  `)\n\n  let result;\n  if (columnCheck.rows.length > 0) {\n    // URL column exists\n    result = await pool.query(`\n      INSERT INTO organs (title, description, image_url, url)\n      VALUES ($1, $2, $3, $4)\n      RETURNING id, title, description, image_url as \"imageUrl\", url,\n                created_at as \"createdAt\", updated_at as \"updatedAt\"\n    `, [data.title, data.description, data.imageUrl, data.url || null])\n  } else {\n    // URL column doesn't exist\n    result = await pool.query(`\n      INSERT INTO organs (title, description, image_url)\n      VALUES ($1, $2, $3)\n      RETURNING id, title, description, image_url as \"imageUrl\",\n                created_at as \"createdAt\", updated_at as \"updatedAt\"\n    `, [data.title, data.description, data.imageUrl])\n  }\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    url: row.url || null,\n    createdAt: new Date(row.createdAt),\n    updatedAt: new Date(row.updatedAt)\n  }\n}\n\nexport async function updateOrganInDB(\n  id: string,\n  data: Partial<Omit<Organ, \"id\" | \"createdAt\" | \"updatedAt\">>\n): Promise<Organ | null> {\n  const pool = getDB()\n  const fields = []\n  const values = []\n  let paramCount = 1\n\n  if (data.title !== undefined) {\n    fields.push(`title = $${paramCount}`)\n    values.push(data.title)\n    paramCount++\n  }\n  if (data.description !== undefined) {\n    fields.push(`description = $${paramCount}`)\n    values.push(data.description)\n    paramCount++\n  }\n  if (data.imageUrl !== undefined) {\n    fields.push(`image_url = $${paramCount}`)\n    values.push(data.imageUrl)\n    paramCount++\n  }\n  if (data.url !== undefined) {\n    fields.push(`url = $${paramCount}`)\n    values.push(data.url)\n    paramCount++\n  }\n\n  if (fields.length === 0) return null\n\n  fields.push(`updated_at = CURRENT_TIMESTAMP`)\n  values.push(id)\n\n  const result = await pool.query(`\n    UPDATE organs \n    SET ${fields.join(', ')}\n    WHERE id = $${paramCount}\n    RETURNING id, title, description, image_url as \"imageUrl\", url,\n              created_at as \"createdAt\", updated_at as \"updatedAt\"\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt),\n    updatedAt: new Date(row.updatedAt)\n  }\n}\n\nexport async function deleteOrganInDB(id: string): Promise<boolean> {\n  const pool = getDB()\n  const result = await pool.query('DELETE FROM organs WHERE id = $1', [id])\n  return (result.rowCount ?? 0) > 0\n}\n\n// Export alias for consistency with the route import\nexport const deleteOrganFromDB = deleteOrganInDB\n\nexport async function updateLiveStreamInDB(\n  id: string,\n  data: Partial<Omit<LiveStream, \"id\" | \"createdAt\">>\n): Promise<LiveStream | null> {\n  const pool = getDB()\n\n  const fields = []\n  const values = []\n  let paramIndex = 1\n\n  if (data.title !== undefined) {\n    fields.push(`title = $${paramIndex++}`)\n    values.push(data.title)\n  }\n  if (data.thumbnailUrl !== undefined) {\n    fields.push(`thumbnail_url = $${paramIndex++}`)\n    values.push(data.thumbnailUrl)\n  }\n  if (data.streamUrl !== undefined) {\n    fields.push(`stream_url = $${paramIndex++}`)\n    values.push(data.streamUrl)\n  }\n  if (data.channel !== undefined) {\n    fields.push(`channel = $${paramIndex++}`)\n    values.push(data.channel)\n  }\n  if (data.status !== undefined) {\n    fields.push(`status = $${paramIndex++}`)\n    values.push(data.status)\n\n    // Automatically set is_live based on status\n    if (data.status === 'live' || data.status === 'signal_open') {\n      fields.push(`is_live = $${paramIndex++}`)\n      values.push(true)\n    } else if (data.status === 'recess' || data.status === 'offline') {\n      fields.push(`is_live = $${paramIndex++}`)\n      values.push(false)\n    }\n  }\n  if (data.isLive !== undefined && data.status === undefined) {\n    fields.push(`is_live = $${paramIndex++}`)\n    values.push(data.isLive)\n    // Keep status in sync with isLive\n    fields.push(`status = $${paramIndex++}`)\n    values.push(data.isLive ? 'live' : 'offline')\n  }\n\n  if (fields.length === 0) return null\n\n  values.push(id)\n\n  const result = await pool.query(`\n    UPDATE live_streams \n    SET ${fields.join(', ')}\n    WHERE id = $${paramIndex}\n    RETURNING id, title, thumbnail_url as \"thumbnailUrl\", stream_url as \"streamUrl\", \n              channel, is_live as \"isLive\", status, created_at as \"createdAt\"\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }\n}\n\nexport async function deleteLiveStreamFromDB(id: string): Promise<boolean> {\n  const pool = getDB()\n  const result = await pool.query('DELETE FROM live_streams WHERE id = $1', [id])\n  return (result.rowCount ?? 0) > 0\n}\n\nexport async function getAllLiveStreamsFromDB(): Promise<LiveStream[]> {\n  try {\n    const pool = getDB()\n    console.log('Querying all live streams from database...')\n\n    const result = await pool.query(`\n      SELECT id, title, thumbnail_url as \"thumbnailUrl\", stream_url as \"streamUrl\", \n             channel, is_live as \"isLive\", status, created_at as \"createdAt\"\n      FROM live_streams \n      ORDER BY created_at DESC, id DESC\n    `)\n\n    return result.rows.map(row => ({\n      ...row,\n      id: row.id.toString(),\n      createdAt: new Date(row.createdAt)\n    }))\n  } catch (error) {\n    console.error('Error fetching all live streams from database:', error)\n    return []\n  }\n}\n\n// Programs API functions\nexport async function getProgramsFromDB(): Promise<Program[]> {\n  try {\n    const pool = getDB()\n    if (!pool) {\n      console.log('Database not connected, using mock data')\n      const { getPrograms } = await import('./api')\n      return await getPrograms()\n    }\n\n    const result = await pool.query(`\n      SELECT id, title, description, image_url as \"imageUrl\", url,\n             order_index as \"orderIndex\", created_at as \"createdAt\"\n      FROM programs \n      ORDER BY order_index ASC, created_at DESC\n    `)\n\n    return result.rows.map(row => ({\n      ...row,\n      id: row.id.toString(),\n      orderIndex: row.orderIndex || 0,\n      createdAt: new Date(row.createdAt)\n    }))\n  } catch (error) {\n    console.error('Error fetching programs from database:', error)\n    console.log('Falling back to mock data')\n    const { getPrograms } = await import('./api')\n    return await getPrograms()\n  }\n}\n\nexport async function createProgramInDB(data: Omit<Program, \"id\" | \"createdAt\">): Promise<Program> {\n  const pool = getDB()\n\n  // Get the current max order_index\n  const maxOrderResult = await pool.query('SELECT COALESCE(MAX(order_index), -1) as max_order FROM programs')\n  const nextOrder = maxOrderResult.rows[0].max_order + 1\n\n  const result = await pool.query(`\n    INSERT INTO programs (title, description, image_url, url, order_index)\n    VALUES ($1, $2, $3, $4, $5)\n    RETURNING id, title, description, image_url as \"imageUrl\", url,\n              order_index as \"orderIndex\", created_at as \"createdAt\"\n  `, [data.title, data.description, data.imageUrl, data.url || null, nextOrder])\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    orderIndex: row.orderIndex || 0,\n    createdAt: new Date(row.createdAt)\n  }\n}\n\nexport async function updateProgramInDB(\n  id: string,\n  data: Partial<Omit<Program, \"id\" | \"createdAt\">>\n): Promise<Program | null> {\n  const pool = getDB()\n\n  const fields = []\n  const values = []\n  let paramIndex = 1\n\n  if (data.title !== undefined) {\n    fields.push(`title = $${paramIndex++}`)\n    values.push(data.title)\n  }\n  if (data.description !== undefined) {\n    fields.push(`description = $${paramIndex++}`)\n    values.push(data.description)\n  }\n  if (data.imageUrl !== undefined) {\n    fields.push(`image_url = $${paramIndex++}`)\n    values.push(data.imageUrl)\n  }\n  if (data.url !== undefined) {\n    fields.push(`url = $${paramIndex++}`)\n    values.push(data.url)\n  }\n\n  if (fields.length === 0) return null\n\n  values.push(id)\n\n  const result = await pool.query(`\n    UPDATE programs \n    SET ${fields.join(', ')}\n    WHERE id = $${paramIndex}\n    RETURNING id, title, description, image_url as \"imageUrl\", url, created_at as \"createdAt\"\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }\n}\n\nexport async function deleteProgramFromDB(id: string): Promise<boolean> {\n  const pool = getDB()\n  const result = await pool.query('DELETE FROM programs WHERE id = $1', [id])\n  return (result.rowCount ?? 0) > 0\n}\n\nexport async function updateProgramOrderInDB(id: string, direction: 'up' | 'down'): Promise<boolean> {\n  const pool = getDB()\n\n  try {\n    await pool.query('BEGIN')\n\n    // Get current program's order\n    const currentResult = await pool.query(\n      'SELECT order_index FROM programs WHERE id = $1',\n      [id]\n    )\n\n    if (currentResult.rows.length === 0) {\n      await pool.query('ROLLBACK')\n      return false\n    }\n\n    const currentOrder = currentResult.rows[0].order_index\n\n    if (direction === 'up') {\n      // Find the program with the next lower order_index\n      const targetResult = await pool.query(`\n        SELECT id, order_index FROM programs \n        WHERE order_index < $1 \n        ORDER BY order_index DESC \n        LIMIT 1\n      `, [currentOrder])\n\n      if (targetResult.rows.length === 0) {\n        await pool.query('ROLLBACK')\n        return false // Already at the top\n      }\n\n      const targetProgram = targetResult.rows[0]\n\n      // Swap the order_index values\n      await pool.query('UPDATE programs SET order_index = $1 WHERE id = $2', [targetProgram.order_index, id])\n      await pool.query('UPDATE programs SET order_index = $1 WHERE id = $2', [currentOrder, targetProgram.id])\n\n    } else if (direction === 'down') {\n      // Find the program with the next higher order_index\n      const targetResult = await pool.query(`\n        SELECT id, order_index FROM programs \n        WHERE order_index > $1 \n        ORDER BY order_index ASC \n        LIMIT 1\n      `, [currentOrder])\n\n      if (targetResult.rows.length === 0) {\n        await pool.query('ROLLBACK')\n        return false // Already at the bottom\n      }\n\n      const targetProgram = targetResult.rows[0]\n\n      // Swap the order_index values\n      await pool.query('UPDATE programs SET order_index = $1 WHERE id = $2', [targetProgram.order_index, id])\n      await pool.query('UPDATE programs SET order_index = $1 WHERE id = $2', [currentOrder, targetProgram.id])\n    }\n\n    await pool.query('COMMIT')\n    return true\n\n  } catch (error) {\n    await pool.query('ROLLBACK')\n    console.error('Error updating program order:', error)\n    return false\n  }\n}\n\n// News API functions\nexport async function getNewsFromDB(page: number = 1, limit: number = 20, category?: string): Promise<{news: NewsItem[], total: number, totalPages: number}> {\n  try {\n    const pool = getDB()\n    console.log('Querying news from database with pagination...', { page, limit, category })\n\n    // Build WHERE clauses\n    let whereClause = \"(COALESCE(status, 'published') = 'published' OR (COALESCE(status, 'published') = 'scheduled' AND published_at <= NOW()))\"\n    const params = []\n    \n    if (category) {\n      whereClause += \" AND category = $1\"\n      params.push(category)\n    }\n\n    // First get the total count\n    const countResult = await pool.query(`\n      SELECT COUNT(*) as total\n      FROM news\n      WHERE ${whereClause}\n    `, params)\n    \n    const total = parseInt(countResult.rows[0].total)\n    const totalPages = Math.ceil(total / limit)\n    const offset = (page - 1) * limit\n\n    // Then get the paginated results\n    const paginatedParams = [...params, limit, offset]\n    const limitOffset = category ? '$2 OFFSET $3' : '$1 OFFSET $2'\n    \n    const result = await pool.query(`\n      SELECT id, title, summary, content, image_url, \n             category, published_at as \"publishedAt\", created_at as \"createdAt\", \n             COALESCE(status, 'published') as status,\n             is_featured as \"isFeatured\", featured_rank as \"featuredRank\"\n      FROM news\n      WHERE ${whereClause}\n      ORDER BY COALESCE(published_at, created_at) DESC, id DESC\n      LIMIT ${limitOffset}\n    `, paginatedParams)\n\n    console.log('Raw database result:', result.rows.length, 'rows', { total, totalPages, page })\n\n    if (result.rows.length > 0) {\n      console.log('Sample news item from DB:', {\n        id: result.rows[0].id,\n        title: result.rows[0].title?.substring(0, 50) + '...',\n        imageUrl: result.rows[0].image_url,\n        hasImage: !!result.rows[0].image_url\n      })\n    }\n\n    const news = result.rows.map(row => ({\n      id: row.id.toString(),\n      title: row.title,\n      summary: row.summary,\n      content: row.content,\n      imageUrl: row.image_url,\n      category: row.category,\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt),\n      status: row.status,\n      isFeatured: row.isFeatured ?? false,\n      featuredRank: row.featuredRank ?? null\n    }))\n\n    return { news, total, totalPages }\n  } catch (error) {\n    console.error('Error fetching news from database:', error)\n    console.error('Error details:', error instanceof Error ? error.message : String(error))\n    return { news: [], total: 0, totalPages: 0 } // Return empty result instead of throwing\n  }\n}\n\nexport async function getAllNewsFromDB(page: number = 1, limit: number = 20): Promise<{news: NewsItem[], total: number, totalPages: number}> {\n  try {\n    const pool = getDB()\n    console.log('Querying all news from database with pagination...', { page, limit })\n\n    // First get the total count\n    const countResult = await pool.query(`\n      SELECT COUNT(*) as total\n      FROM news\n    `)\n    \n    const total = parseInt(countResult.rows[0].total)\n    const totalPages = Math.ceil(total / limit)\n    const offset = (page - 1) * limit\n\n    // Then get the paginated results\n    const result = await pool.query(`\n      SELECT id, title, summary, content, image_url as \"imageUrl\", \n             category, published_at as \"publishedAt\", created_at as \"createdAt\", \n             COALESCE(status, 'published') as status,\n             is_featured as \"isFeatured\", featured_rank as \"featuredRank\"\n      FROM news\n      ORDER BY COALESCE(published_at, created_at) DESC, id DESC\n      LIMIT $1 OFFSET $2\n    `, [limit, offset])\n\n    const news = result.rows.map(row => ({\n      ...row,\n      id: row.id.toString(),\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt),\n      isFeatured: row.isFeatured ?? false,\n      featuredRank: row.featuredRank ?? null\n    }))\n\n    return { news, total, totalPages }\n  } catch (error) {\n    console.error('Error fetching all news from database:', error)\n    return { news: [], total: 0, totalPages: 0 }\n  }\n}\n\nexport async function createNewsItemInDB(data: Omit<NewsItem, 'id' | 'createdAt'> & { status?: string; isFeatured?: boolean; featuredRank?: number | null }): Promise<NewsItem> {\n  try {\n    const pool = getDB()\n\n    // Insert with all new fields including featured fields\n    const result = await pool.query(`\n      INSERT INTO news (title, summary, content, image_url, category, published_at, status, is_featured, featured_rank)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n      RETURNING id, title, summary, content, image_url as \"imageUrl\", \n                category, published_at as \"publishedAt\", created_at as \"createdAt\", \n                COALESCE(status, 'published') as status,\n                is_featured as \"isFeatured\", featured_rank as \"featuredRank\"\n    `, [\n      data.title, \n      data.summary, \n      data.content, \n      data.imageUrl, \n      data.category, \n      data.publishedAt, \n      data.status || 'draft',\n      data.isFeatured || false,\n      data.featuredRank || null\n    ])\n\n    const row = result.rows[0]\n    return {\n      ...row,\n      id: row.id.toString(),\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt),\n      status: row.status || 'published',\n      isFeatured: row.isFeatured ?? false,\n      featuredRank: row.featuredRank ?? null\n    }\n  } catch (error) {\n    console.error('Error creating news item:', error)\n    throw error\n  }\n}\n\nexport async function updateNewsItemInDB(\n  id: string,\n  data: Partial<Omit<NewsItem, \"id\" | \"createdAt\"> & { isFeatured?: boolean; featuredRank?: number | null }>\n): Promise<NewsItem | null> {\n  const pool = getDB()\n\n  const fields = []\n  const values = []\n  let paramIndex = 1\n\n  if (data.title !== undefined) {\n    fields.push(`title = $${paramIndex++}`)\n    values.push(data.title)\n  }\n  if (data.summary !== undefined) {\n    fields.push(`summary = $${paramIndex++}`)\n    values.push(data.summary)\n  }\n  if (data.content !== undefined) {\n    fields.push(`content = $${paramIndex++}`)\n    values.push(data.content)\n  }\n  if (data.imageUrl !== undefined) {\n    fields.push(`image_url = $${paramIndex++}`)\n    values.push(data.imageUrl)\n  }\n  if (data.category !== undefined) {\n    fields.push(`category = $${paramIndex++}`)\n    values.push(data.category)\n  }\n  if (data.publishedAt !== undefined) {\n    fields.push(`published_at = $${paramIndex++}`)\n    values.push(data.publishedAt)\n  }\n  if (data.isFeatured !== undefined) {\n    fields.push(`is_featured = $${paramIndex++}`)\n    values.push(data.isFeatured)\n  }\n  if (data.featuredRank !== undefined) {\n    fields.push(`featured_rank = $${paramIndex++}`)\n    values.push(data.featuredRank)\n  }\n\n  if (fields.length === 0) return null\n\n  values.push(id)\n\n  const result = await pool.query(`\n    UPDATE news \n    SET ${fields.join(', ')}\n    WHERE id = $${paramIndex}\n    RETURNING id, title, summary, content, image_url as \"imageUrl\", \n              category, published_at as \"publishedAt\", created_at as \"createdAt\",\n              COALESCE(status, 'published') as status,\n              is_featured as \"isFeatured\", featured_rank as \"featuredRank\"\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    publishedAt: new Date(row.publishedAt),\n    createdAt: new Date(row.createdAt),\n    status: row.status ?? 'published',\n    isFeatured: row.isFeatured ?? false,\n    featuredRank: row.featuredRank ?? null\n  }\n}\n\nexport async function getFeaturedNewsFromDB(limit: number = 1): Promise<NewsItem[]> {\n  try {\n    const pool = getDB()\n    console.log('Querying featured news from database...', { limit })\n\n    const result = await pool.query(`\n      SELECT id, title, summary, content, image_url as \"imageUrl\", \n             category, published_at as \"publishedAt\", created_at as \"createdAt\", \n             COALESCE(status, 'published') as status,\n             is_featured as \"isFeatured\", featured_rank as \"featuredRank\"\n      FROM news\n      WHERE is_featured = true \n        AND (COALESCE(status, 'published') = 'published' OR (COALESCE(status, 'published') = 'scheduled' AND published_at <= NOW()))\n        AND image_url IS NOT NULL\n      ORDER BY (featured_rank IS NULL), featured_rank ASC, COALESCE(published_at, created_at) DESC, id DESC\n      LIMIT $1\n    `, [limit])\n\n    const news = result.rows.map(row => ({\n      id: row.id.toString(),\n      title: row.title,\n      summary: row.summary,\n      content: row.content,\n      imageUrl: row.imageUrl,\n      category: row.category,\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt),\n      status: row.status,\n      isFeatured: row.isFeatured ?? false,\n      featuredRank: row.featuredRank ?? null\n    }))\n\n    console.log('Featured news fetched from DB:', news.length, 'items')\n    return news\n  } catch (error) {\n    console.error('Error fetching featured news from database:', error)\n    return []\n  }\n}\n\nexport async function deleteNewsItemFromDB(id: string): Promise<boolean> {\n  const pool = getDB()\n  const result = await pool.query('DELETE FROM news WHERE id = $1', [id])\n  return (result.rowCount ?? 0) > 0\n}\n\n// Add similar functions for other entities (Organs, Parliamentary Groups, Legislators, Radio Programs, etc.)\n// Following the same pattern...\n\nexport async function getOrgansFromDB(): Promise<Organ[]> {\n  const pool = getDB()\n  const result = await pool.query(`\n    SELECT id, title, description, image_url as \"imageUrl\", url, created_at as \"createdAt\"\n    FROM organs \n    ORDER BY created_at DESC\n  `)\n\n  return result.rows.map(row => ({\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }))\n}\n\n// Legislators database functions\nexport async function getLegislatorsFromDB(): Promise<Legislator[]> {\n  const pool = getDB()\n  const result = await pool.query(`\n    SELECT \n      id,\n      name,\n      parliamentary_group_id as \"parliamentaryGroupId\",\n      legislature,\n      state,\n      type,\n      gender,\n      status,\n      image_url as \"imageUrl\",\n      email,\n      biography,\n      created_at as \"createdAt\"\n    FROM legislators \n    ORDER BY name\n  `)\n\n  return result.rows.map(row => ({\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }))\n}\n\nexport async function createLegislatorInDB(data: Omit<Legislator, \"id\" | \"createdAt\">): Promise<Legislator> {\n  const pool = getDB()\n  const result = await pool.query(`\n    INSERT INTO legislators (\n      name, parliamentary_group_id, legislature, state, type, \n      gender, status, image_url, email, biography\n    )\n    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n    RETURNING \n      id,\n      name,\n      parliamentary_group_id as \"parliamentaryGroupId\",\n      legislature,\n      state,\n      type,\n      gender,\n      status,\n      image_url as \"imageUrl\",\n      email,\n      biography,\n      created_at as \"createdAt\"\n  `, [\n    data.name,\n    data.parliamentaryGroupId,\n    data.legislature || null,\n    data.state || null,\n    data.type || null,\n    data.gender || null,\n    data.status || 'Activo',\n    data.imageUrl || null,\n    data.email || null,\n    data.biography || null\n  ])\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }\n}\n\nexport async function updateLegislatorInDB(\n  id: string,\n  data: Partial<Omit<Legislator, \"id\" | \"createdAt\">>\n): Promise<Legislator | null> {\n  const pool = getDB()\n  const fields = []\n  const values = []\n  let paramCount = 1\n\n  if (data.name !== undefined) {\n    fields.push(`name = $${paramCount}`)\n    values.push(data.name)\n    paramCount++\n  }\n  if (data.parliamentaryGroupId !== undefined) {\n    fields.push(`parliamentary_group_id = $${paramCount}`)\n    values.push(data.parliamentaryGroupId)\n    paramCount++\n  }\n  if (data.legislature !== undefined) {\n    fields.push(`legislature = $${paramCount}`)\n    values.push(data.legislature)\n    paramCount++\n  }\n  if (data.state !== undefined) {\n    fields.push(`state = $${paramCount}`)\n    values.push(data.state)\n    paramCount++\n  }\n  if (data.type !== undefined) {\n    fields.push(`type = $${paramCount}`)\n    values.push(data.type)\n    paramCount++\n  }\n  if (data.gender !== undefined) {\n    fields.push(`gender = $${paramCount}`)\n    values.push(data.gender)\n    paramCount++\n  }\n  if (data.status !== undefined) {\n    fields.push(`status = $${paramCount}`)\n    values.push(data.status)\n    paramCount++\n  }\n  if (data.imageUrl !== undefined) {\n    fields.push(`image_url = $${paramCount}`)\n    values.push(data.imageUrl)\n    paramCount++\n  }\n  if (data.email !== undefined) {\n    fields.push(`email = $${paramCount}`)\n    values.push(data.email)\n    paramCount++\n  }\n  if (data.biography !== undefined) {\n    fields.push(`biography = $${paramCount}`)\n    values.push(data.biography)\n    paramCount++\n  }\n\n  if (fields.length === 0) return null\n\n  fields.push(`updated_at = CURRENT_TIMESTAMP`)\n  values.push(id)\n\n  const result = await pool.query(`\n    UPDATE legislators \n    SET ${fields.join(', ')}\n    WHERE id = $${paramCount}\n    RETURNING \n      id,\n      name,\n      parliamentary_group_id as \"parliamentaryGroupId\",\n      legislature,\n      state,\n      type,\n      gender,\n      status,\n      image_url as \"imageUrl\",\n      email,\n      biography,\n      created_at as \"createdAt\"\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt)\n  }\n}\n\nexport async function deleteLegislatorFromDB(id: string): Promise<boolean> {\n  const pool = getDB()\n  const result = await pool.query('DELETE FROM legislators WHERE id = $1', [id])\n  return (result.rowCount ?? 0) > 0\n}\n\n// Homepage configuration functions\nexport async function getHomepageConfigFromDB(): Promise<any[]> {\n  const pool = getDB()\n\n  // Check if table exists first\n  const tableCheck = await pool.query(`\n    SELECT EXISTS (\n      SELECT FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name = 'homepage_config'\n    )\n  `)\n\n  if (!tableCheck.rows[0].exists) {\n    console.log('homepage_config table does not exist, returning empty array')\n    return []\n  }\n\n  const result = await pool.query(`\n    SELECT \n      id,\n      section, \n      title,\n      description,\n      background_image_url as \"backgroundImageUrl\",\n      hero_image_url as \"heroImageUrl\",\n      logo_url as \"logoUrl\",\n      additional_images as \"additionalImages\",\n      config_data as \"configData\",\n      is_active as \"isActive\",\n      created_at as \"createdAt\",\n      updated_at as \"updatedAt\"\n    FROM homepage_config\n    WHERE is_active = true\n    ORDER BY section\n  `)\n\n  return result.rows\n}\n\nexport async function createHomepageConfigInDB(data: any): Promise<any> {\n  const pool = getDB()\n\n  console.log('DB: Creating homepage config with data:', JSON.stringify(data, null, 2))\n  console.log('DB: Parameters:', [\n    data.section,\n    data.title || null,\n    data.description || null,\n    data.backgroundImageUrl || null,\n    data.heroImageUrl || null,\n    data.mobileImageUrl || null,\n    data.logoUrl || null,\n    data.additionalImages || null,\n    data.configData || null,\n    data.isActive !== undefined ? data.isActive : true\n  ])\n\n  const result = await pool.query(`\n    INSERT INTO homepage_config (\n      section, title, description, background_image_url, hero_image_url, logo_url, \n      additional_images, config_data, is_active\n    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n    RETURNING \n      id,\n      section,\n      title,\n      description,\n      background_image_url as \"backgroundImageUrl\",\n      hero_image_url as \"heroImageUrl\",\n      logo_url as \"logoUrl\",\n      additional_images as \"additionalImages\",\n      config_data as \"configData\",\n      is_active as \"isActive\",\n      created_at as \"createdAt\",\n      updated_at as \"updatedAt\"\n  `, [\n    data.section,\n    data.title || null,\n    data.description || null,\n    data.backgroundImageUrl || null,\n    data.heroImageUrl || null,\n    data.mobileImageUrl || null,\n    data.logoUrl || null,\n    data.additionalImages || null,\n    data.configData || null,\n    data.isActive !== undefined ? data.isActive : true\n  ])\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt),\n    updatedAt: new Date(row.updatedAt)\n  }\n}\n\nexport async function updateHomepageConfigInDB(section: string, data: any): Promise<any | null> {\n  const pool = getDB()\n\n  // Build the SET clause dynamically\n  const fields: string[] = []\n  const values: any[] = []\n  let paramCount = 1\n\n  if (data.title !== undefined) {\n    fields.push(`title = $${paramCount}`)\n    values.push(data.title)\n    paramCount++\n  }\n\n  if (data.description !== undefined) {\n    fields.push(`description = $${paramCount}`)\n    values.push(data.description)\n    paramCount++\n  }\n\n  if (data.backgroundImageUrl !== undefined) {\n    fields.push(`background_image_url = $${paramCount}`)\n    values.push(data.backgroundImageUrl)\n    paramCount++\n  }\n\n  if (data.heroImageUrl !== undefined) {\n    fields.push(`hero_image_url = $${paramCount}`)\n    values.push(data.heroImageUrl)\n    paramCount++\n  }\n\n  // mobileImageUrl removed - column does not exist in database\n\n  if (data.logoUrl !== undefined) {\n    fields.push(`logo_url = $${paramCount}`)\n    values.push(data.logoUrl)\n    paramCount++\n  }\n\n  if (data.additionalImages !== undefined) {\n    fields.push(`additional_images = $${paramCount}`)\n    values.push(data.additionalImages)\n    paramCount++\n  }\n\n  if (data.configData !== undefined) {\n    fields.push(`config_data = $${paramCount}`)\n    values.push(JSON.stringify(data.configData))\n    paramCount++\n  }\n\n  if (data.isActive !== undefined) {\n    fields.push(`is_active = $${paramCount}`)\n    values.push(data.isActive)\n    paramCount++\n  }\n\n  fields.push(`updated_at = CURRENT_TIMESTAMP`)\n  values.push(section)\n\n  const result = await pool.query(`\n    UPDATE homepage_config \n    SET ${fields.join(', ')}\n    WHERE section = $${paramCount}\n    RETURNING \n      id,\n      section,\n      title,\n      description,\n      background_image_url as \"backgroundImageUrl\",\n      hero_image_url as \"heroImageUrl\",\n      logo_url as \"logoUrl\",\n      additional_images as \"additionalImages\", \n      config_data as \"configData\",\n      is_active as \"isActive\",\n      created_at as \"createdAt\",\n      updated_at as \"updatedAt\"\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    createdAt: new Date(row.createdAt),\n    updatedAt: new Date(row.updatedAt)\n  }\n}\n\n// Video News database functions\nexport async function getVideoNewsFromDB(): Promise<any[]> {\n  try {\n    const pool = getDB()\n    console.log('Querying video news from database...')\n\n    const result = await pool.query(`\n      SELECT id, title, description, video_url, thumbnail_url, \n             category, duration, published_at as \"publishedAt\", \n             created_at as \"createdAt\", \n             COALESCE(status, 'published') as status\n      FROM video_news\n      WHERE (COALESCE(status, 'published') = 'published' OR (COALESCE(status, 'published') = 'scheduled' AND published_at <= NOW()))\n      ORDER BY COALESCE(published_at, created_at) DESC, id DESC\n    `)\n\n    console.log('Raw video news database result:', result.rows.length, 'rows')\n\n    return result.rows.map(row => ({\n      id: row.id.toString(),\n      title: row.title,\n      description: row.description,\n      videoUrl: row.video_url,\n      thumbnailUrl: row.thumbnail_url,\n      category: row.category,\n      duration: row.duration,\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt),\n      status: row.status\n    }))\n  } catch (error) {\n    console.error('Error fetching video news from database:', error)\n    return []\n  }\n}\n\nexport async function getAllVideoNewsFromDB(): Promise<any[]> {\n  try {\n    const pool = getDB()\n    console.log('Querying all video news from database...')\n\n    const result = await pool.query(`\n      SELECT id, title, description, video_url as \"videoUrl\", thumbnail_url as \"thumbnailUrl\", \n             category, duration, published_at as \"publishedAt\", created_at as \"createdAt\", \n             COALESCE(status, 'published') as status\n      FROM video_news\n      ORDER BY COALESCE(published_at, created_at) DESC, id DESC\n    `)\n\n    return result.rows.map(row => ({\n      ...row,\n      id: row.id.toString(),\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt)\n    }))\n  } catch (error) {\n    console.error('Error fetching all video news from database:', error)\n    return []\n  }\n}\n\nexport async function createVideoNewsInDB(data: any): Promise<any> {\n  try {\n    const pool = getDB()\n\n    const result = await pool.query(`\n      INSERT INTO video_news (title, description, video_url, thumbnail_url, category, duration, published_at, status)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING id, title, description, video_url as \"videoUrl\", thumbnail_url as \"thumbnailUrl\", \n                category, duration, published_at as \"publishedAt\", created_at as \"createdAt\", \n                COALESCE(status, 'published') as status\n    `, [data.title, data.description, data.videoUrl, data.thumbnailUrl, data.category, data.duration, data.publishedAt, data.status || 'published'])\n\n    const row = result.rows[0]\n    return {\n      ...row,\n      id: row.id.toString(),\n      publishedAt: new Date(row.publishedAt),\n      createdAt: new Date(row.createdAt)\n    }\n  } catch (error) {\n    console.error('Error creating video news:', error)\n    throw error\n  }\n}\n\nexport async function updateVideoNewsInDB(id: string, data: any): Promise<any | null> {\n  const pool = getDB()\n\n  const fields = []\n  const values = []\n  let paramIndex = 1\n\n  if (data.title !== undefined) {\n    fields.push(`title = $${paramIndex++}`)\n    values.push(data.title)\n  }\n  if (data.description !== undefined) {\n    fields.push(`description = $${paramIndex++}`)\n    values.push(data.description)\n  }\n  if (data.videoUrl !== undefined) {\n    fields.push(`video_url = $${paramIndex++}`)\n    values.push(data.videoUrl)\n  }\n  if (data.thumbnailUrl !== undefined) {\n    fields.push(`thumbnail_url = $${paramIndex++}`)\n    values.push(data.thumbnailUrl)\n  }\n  if (data.category !== undefined) {\n    fields.push(`category = $${paramIndex++}`)\n    values.push(data.category)\n  }\n  if (data.duration !== undefined) {\n    fields.push(`duration = $${paramIndex++}`)\n    values.push(data.duration)\n  }\n  if (data.publishedAt !== undefined) {\n    fields.push(`published_at = $${paramIndex++}`)\n    values.push(data.publishedAt)\n  }\n  if (data.status !== undefined) {\n    fields.push(`status = $${paramIndex++}`)\n    values.push(data.status)\n  }\n\n  if (fields.length === 0) return null\n\n  fields.push(`updated_at = CURRENT_TIMESTAMP`)\n  values.push(id)\n\n  const result = await pool.query(`\n    UPDATE video_news \n    SET ${fields.join(', ')}\n    WHERE id = $${paramIndex}\n    RETURNING id, title, description, video_url as \"videoUrl\", thumbnail_url as \"thumbnailUrl\", \n              category, duration, published_at as \"publishedAt\", created_at as \"createdAt\", status\n  `, values)\n\n  if (result.rows.length === 0) return null\n\n  const row = result.rows[0]\n  return {\n    ...row,\n    id: row.id.toString(),\n    publishedAt: new Date(row.publishedAt),\n    createdAt: new Date(row.createdAt)\n  }\n}\n\nexport async function deleteVideoNewsFromDB(id: string): Promise<boolean> {\n  const pool = getDB()\n  const result = await pool.query('DELETE FROM video_news WHERE id = $1', [id])\n  return (result.rowCount ?? 0) > 0\n}\n\n// Transparency Sections CRUD functions\nexport interface TransparencySection {\n  id: string\n  sectionKey: string\n  sectionTitle: string\n  iconType?: string\n  cardsData: any[]\n  displayOrder: number\n  isActive: boolean\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport async function getAllTransparencySectionsFromDB(): Promise<TransparencySection[]> {\n  try {\n    const pool = getDB()\n    const result = await pool.query(`\n      SELECT id, section_key as \"sectionKey\", section_title as \"sectionTitle\", \n             icon_type as \"iconType\", cards_data as \"cardsData\", \n             display_order as \"displayOrder\", is_active as \"isActive\",\n             created_at as \"createdAt\", updated_at as \"updatedAt\"\n      FROM transparency_sections\n      WHERE is_active = true\n      ORDER BY display_order ASC, id ASC\n    `)\n\n    return result.rows.map(row => ({\n      ...row,\n      id: row.id.toString(),\n      createdAt: new Date(row.createdAt),\n      updatedAt: new Date(row.updatedAt)\n    }))\n  } catch (error) {\n    console.error('Error fetching transparency sections:', error)\n    return []\n  }\n}\n\nexport async function getTransparencySectionByKeyFromDB(sectionKey: string): Promise<TransparencySection | null> {\n  try {\n    const pool = getDB()\n    const result = await pool.query(`\n      SELECT id, section_key as \"sectionKey\", section_title as \"sectionTitle\", \n             icon_type as \"iconType\", cards_data as \"cardsData\", \n             display_order as \"displayOrder\", is_active as \"isActive\",\n             created_at as \"createdAt\", updated_at as \"updatedAt\"\n      FROM transparency_sections\n      WHERE section_key = $1\n    `, [sectionKey])\n\n    if (result.rows.length === 0) return null\n\n    const row = result.rows[0]\n    return {\n      ...row,\n      id: row.id.toString(),\n      createdAt: new Date(row.createdAt),\n      updatedAt: new Date(row.updatedAt)\n    }\n  } catch (error) {\n    console.error('Error fetching transparency section by key:', error)\n    return null\n  }\n}\n\nexport async function updateTransparencySectionInDB(\n  sectionKey: string, \n  data: { sectionTitle?: string; iconType?: string; cardsData?: any[]; displayOrder?: number; isActive?: boolean }\n): Promise<TransparencySection | null> {\n  try {\n    const pool = getDB()\n    const fields: string[] = []\n    const values: any[] = []\n    let paramIndex = 1\n\n    if (data.sectionTitle !== undefined) {\n      fields.push(`section_title = $${paramIndex++}`)\n      values.push(data.sectionTitle)\n    }\n    if (data.iconType !== undefined) {\n      fields.push(`icon_type = $${paramIndex++}`)\n      values.push(data.iconType)\n    }\n    if (data.cardsData !== undefined) {\n      fields.push(`cards_data = $${paramIndex++}`)\n      values.push(JSON.stringify(data.cardsData))\n    }\n    if (data.displayOrder !== undefined) {\n      fields.push(`display_order = $${paramIndex++}`)\n      values.push(data.displayOrder)\n    }\n    if (data.isActive !== undefined) {\n      fields.push(`is_active = $${paramIndex++}`)\n      values.push(data.isActive)\n    }\n\n    if (fields.length === 0) return null\n\n    fields.push(`updated_at = CURRENT_TIMESTAMP`)\n    values.push(sectionKey)\n\n    const result = await pool.query(`\n      UPDATE transparency_sections \n      SET ${fields.join(', ')}\n      WHERE section_key = $${paramIndex}\n      RETURNING id, section_key as \"sectionKey\", section_title as \"sectionTitle\", \n                icon_type as \"iconType\", cards_data as \"cardsData\", \n                display_order as \"displayOrder\", is_active as \"isActive\",\n                created_at as \"createdAt\", updated_at as \"updatedAt\"\n    `, values)\n\n    if (result.rows.length === 0) return null\n\n    const row = result.rows[0]\n    return {\n      ...row,\n      id: row.id.toString(),\n      createdAt: new Date(row.createdAt),\n      updatedAt: new Date(row.updatedAt)\n    }\n  } catch (error) {\n    console.error('Error updating transparency section:', error)\n    throw error\n  }\n}","size_bytes":44654},"app/api/legislators/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { updateLegislatorInDB, deleteLegislatorFromDB } from '@/lib/api-database'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n    const legislator = await updateLegislatorInDB(id, data)\n    \n    if (!legislator) {\n      return NextResponse.json(\n        { error: 'Legislator not found' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json(legislator)\n  } catch (error) {\n    console.error('Error updating legislator:', error)\n    return NextResponse.json(\n      { error: 'Failed to update legislator' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const success = await deleteLegislatorFromDB(id)\n    \n    if (!success) {\n      return NextResponse.json(\n        { error: 'Legislator not found' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting legislator:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete legislator' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1337},"components/video-carousel.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\ninterface VideoItem {\n  id: number;\n  title: string;\n  imageUrl: string;\n  videoUrl?: string;\n  url?: string;\n  playlistUrl?: string;\n}\n\ninterface VideoCarouselProps {\n  videos: VideoItem[];\n}\n\nexport default function VideoCarousel({ videos }: VideoCarouselProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const totalPages = Math.ceil(videos.length / 5);\n\n  console.log(\"VideoCarousel: Received videos:\", videos.length, \"videos\");\n  console.log(\n    \"VideoCarousel: Videos data:\",\n    videos.map((v) => ({\n      id: v.id,\n      title: v.title.substring(0, 30) + \"...\",\n      hasImage: !!v.imageUrl,\n    })),\n  );\n\n  const goToNext = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % totalPages);\n  };\n\n  const goToPrev = () => {\n    setCurrentIndex((prevIndex) => (prevIndex - 1 + totalPages) % totalPages);\n  };\n\n  // Get current page videos\n  const getCurrentPageVideos = () => {\n    const startIndex = currentIndex * 5;\n    return videos.slice(startIndex, startIndex + 5);\n  };\n\n  const currentVideos = getCurrentPageVideos();\n  const centerVideo = currentVideos[2] || videos[0]; // Center video is the 3rd item (index 2)\n  const topLeftVideo = currentVideos[0];\n  const topRightVideo = currentVideos[1];\n  const bottomLeftVideo = currentVideos[3];\n  const bottomRightVideo = currentVideos[4];\n\n  return (\n    <div className=\"relative w-full\">\n      {/* Left Arrow */}\n      <button\n        onClick={goToPrev}\n        className=\"absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-white/80 hover:bg-white rounded-full p-3 shadow-md transition-all\"\n        aria-label=\"Previous videos\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"text-purple-700\"\n        >\n          <path d=\"m15 18-6-6 6-6\" />\n        </svg>\n      </button>\n\n      {/* Right Arrow */}\n      <button\n        onClick={goToNext}\n        className=\"absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-white/80 hover:bg-white rounded-full p-3 shadow-md transition-all\"\n        aria-label=\"Next videos\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"text-purple-700\"\n        >\n          <path d=\"m9 18 6-6-6-6\" />\n        </svg>\n      </button>\n\n      {/* Video Grid Container */}\n      <div className=\"grid grid-cols-12 gap-4 max-w-6xl mx-auto\">\n        {/* Top Row */}\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-6\">\n          {topLeftVideo && <VideoItem video={topLeftVideo} />}\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-6\">\n          {topRightVideo && <VideoItem video={topRightVideo} />}\n        </div>\n\n        {/* Center Row - Large Video */}\n        <div className=\"col-span-12 my-4\">\n          {centerVideo && <VideoItem video={centerVideo} isLarge={true} />}\n        </div>\n\n        {/* Bottom Row */}\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-6\">\n          {bottomLeftVideo && <VideoItem video={bottomLeftVideo} />}\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-6\">\n          {bottomRightVideo && <VideoItem video={bottomRightVideo} />}\n        </div>\n      </div>\n\n      {/* Ver más button */}\n      <div className=\"flex flex-col items-center mt-10\">\n        <Link\n          href=\"https://www.youtube.com/playlist?list=PLuH8BWke2UzDW9UYSYcOuuGE3V5t-qMCC\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"flex flex-col items-center text-pink-600 hover:text-pink-500 transition-colors\"\n        >\n          <span className=\"text-xl font-bold\">Ver más videos</span>\n          <div className=\"w-16 h-16 flex items-center justify-center\">\n            <svg\n              width=\"40\"\n              height=\"40\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"text-pink-600\"\n            >\n              <path\n                d=\"M12 15.713L18.01 9.70299L16.597 8.28799L12 12.888L7.40399 8.28799L5.98999 9.70199L12 15.713Z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\n// Individual video item component\nfunction VideoItem({\n  video,\n  isLarge = false,\n}: {\n  video: VideoItem;\n  isLarge?: boolean;\n}) {\n  // Extract video ID from YouTube URL for embedding\n  const getYouTubeVideoId = (url: string) => {\n    if (!url) return \"uAva6xw9qCg\"; // Default video ID as fallback\n\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n      /youtube\\.com\\/v\\/([^&\\n?#]+)/,\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n\n    return \"uAva6xw9qCg\"; // Default video ID as fallback\n  };\n\n  const videoId = getYouTubeVideoId(video.videoUrl || video.url || \"\");\n\n  return (\n    <div className=\"block group\">\n      <div\n        className={`relative ${isLarge ? \"h-[400px]\" : \"h-[250px]\"} w-full overflow-hidden rounded-lg`}\n      >\n        <iframe\n          width=\"100%\"\n          height=\"100%\"\n          src={`https://www.youtube.com/embed/${videoId}?si=bjKVY2uzQjg5SngC`}\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n          referrerPolicy=\"strict-origin-when-cross-origin\"\n          allowFullScreen\n          className=\"absolute inset-0 w-full h-full object-cover rounded-lg\"\n        />\n        {/* Video title overlay */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white bg-gradient-to-t from-black/60 to-transparent\">\n          <h3\n            className={`${isLarge ? \"text-xl\" : \"text-base\"} font-medium line-clamp-2`}\n          >\n            {video.title}\n          </h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6435},"app/api/defensoria-audiencia/contact/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { sendEmail } from '@/lib/email'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    const {\n      name,\n      email,\n      phone,\n      type, // 'Queja', 'Sugerencia', or 'Felicitaciones'\n      subject,\n      message\n    } = body\n    \n    // Validate required fields\n    if (!name || !email || !type || !message) {\n      return NextResponse.json(\n        { error: 'Nombre, correo electrónico, tipo y mensaje son requeridos' },\n        { status: 400 }\n      )\n    }\n    \n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { error: 'Formato de correo electrónico inválido' },\n        { status: 400 }\n      )\n    }\n    \n    // Validate type\n    const validTypes = ['Queja', 'Sugerencia', 'Felicitaciones']\n    if (!validTypes.includes(type)) {\n      return NextResponse.json(\n        { error: 'Tipo de solicitud inválido' },\n        { status: 400 }\n      )\n    }\n    \n    console.log('Processing defensoria contact form:', { name, email, type, subject })\n    \n    // Create email content\n    const emailSubject = subject || `${type} - Defensoría de Audiencia - ${name}`\n    const emailContent = `\n      <h2>Nueva ${type} - Defensoría de Audiencia</h2>\n      \n      <h3>Información del Contacto:</h3>\n      <p><strong>Nombre:</strong> ${name}</p>\n      <p><strong>Correo electrónico:</strong> ${email}</p>\n      ${phone ? `<p><strong>Teléfono:</strong> ${phone}</p>` : ''}\n      \n      <h3>Tipo de Solicitud:</h3>\n      <p><strong>${type}</strong></p>\n      \n      ${subject ? `<h3>Asunto:</h3><p>${subject}</p>` : ''}\n      \n      <h3>Mensaje:</h3>\n      <p>${message.replace(/\\n/g, '<br>')}</p>\n      \n      <hr>\n      <p><em>Este mensaje fue enviado desde el formulario de Defensoría de Audiencia del Canal del Congreso</em></p>\n      <p><em>Fecha: ${new Date().toLocaleString('es-MX', { timeZone: 'America/Mexico_City' })}</em></p>\n    `\n    \n    // Send email to defensoria using SMTP configuration\n    const emailResult = await sendEmail({\n      to: 'defensoria.audiencia@canaldelcongreso.gob.mx',\n      subject: emailSubject,\n      html: emailContent,\n      replyTo: email\n    })\n    \n    if (emailResult.success) {\n      console.log('Defensoria contact email sent successfully')\n      \n      // Send confirmation email to user\n      const confirmationSubject = `Confirmación - ${type} recibida - Defensoría de Audiencia`\n      const confirmationContent = `\n        <h2>Confirmación de ${type} Recibida</h2>\n        \n        <p>Estimado/a ${name},</p>\n        \n        <p>Hemos recibido su ${type.toLowerCase()} dirigida a la Defensoría de Audiencia del Canal del Congreso.</p>\n        \n        <h3>Resumen de su solicitud:</h3>\n        <p><strong>Tipo:</strong> ${type}</p>\n        ${subject ? `<p><strong>Asunto:</strong> ${subject}</p>` : ''}\n        <p><strong>Fecha de recepción:</strong> ${new Date().toLocaleString('es-MX', { timeZone: 'America/Mexico_City' })}</p>\n        \n        <p>Nuestro equipo revisará su solicitud y se pondrá en contacto con usted a la brevedad posible.</p>\n        \n        <p>Gracias por contactar a la Defensoría de Audiencia del Canal del Congreso.</p>\n        \n        <hr>\n        <p><strong>Canal del Congreso</strong><br>\n        Defensoría de Audiencia<br>\n        defensoria.audiencia@canaldelcongreso.gob.mx</p>\n      `\n      \n      // Send confirmation (non-blocking)\n      sendEmail({\n        to: email,\n        subject: confirmationSubject,\n        html: confirmationContent\n      }).catch(error => {\n        console.error('Error sending confirmation email:', error)\n        // Don't fail the main request if confirmation email fails\n      })\n      \n      return NextResponse.json({\n        success: true,\n        message: `Su ${type.toLowerCase()} ha sido enviada exitosamente. Recibirá una confirmación por correo electrónico.`\n      })\n    } else {\n      console.error('Failed to send defensoria contact email:', emailResult.error)\n      return NextResponse.json(\n        { error: 'Error al enviar el mensaje. Por favor, intente nuevamente más tarde.' },\n        { status: 500 }\n      )\n    }\n  } catch (error) {\n    console.error('Error processing defensoria contact form:', error)\n    return NextResponse.json(\n      { error: 'Error interno del servidor. Por favor, intente nuevamente más tarde.' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":4536},"components/program-banner-new.tsx":{"content":"import Link from \"next/link\"\n\ninterface ProgramBannerProps {\n  title: string\n  leftImageUrl: string\n  episodeTitle: string\n  episodeDate: string\n  episodeDescription: string\n  episodeLength: string\n  programLink: string\n  episodesLink: string\n}\n\nexport default function ProgramBanner({\n  title,\n  leftImageUrl,\n  episodeTitle,\n  episodeDate,\n  episodeDescription,\n  episodeLength,\n  programLink,\n  episodesLink,\n}: ProgramBannerProps) {\n  return (\n    <div style={{ display: \"table\", width: \"100%\", tableLayout: \"fixed\", borderCollapse: \"collapse\" }}>\n      <div style={{ display: \"table-row\" }}>\n        {/* Left side - Program Image */}\n        <div\n          style={{\n            display: \"table-cell\",\n            width: \"66.666%\",\n            height: \"400px\",\n            padding: 0,\n            margin: 0,\n            border: \"none\",\n            borderSpacing: 0,\n            overflow: \"hidden\",\n            position: \"relative\",\n          }}\n        >\n          <Link href={programLink}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                backgroundImage: `url(${leftImageUrl})`,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                border: \"none\",\n                margin: 0,\n                padding: 0,\n              }}\n            />\n          </Link>\n        </div>\n\n        {/* Right side - Episode details */}\n        <div\n          style={{\n            display: \"table-cell\",\n            width: \"33.333%\",\n            backgroundColor: \"#333333\",\n            color: \"white\",\n            padding: \"32px\",\n            margin: 0,\n            border: \"none\",\n            borderSpacing: 0,\n            verticalAlign: \"top\",\n          }}\n        >\n          <h3 style={{ fontSize: \"1.875rem\", fontWeight: \"bold\", marginBottom: \"1rem\" }}>{title}</h3>\n\n          <p style={{ fontSize: \"1.125rem\", fontWeight: \"bold\", marginBottom: \"1rem\", lineHeight: \"1.25\" }}>\n            \"{episodeTitle}\"\n          </p>\n\n          <p style={{ fontSize: \"0.875rem\", marginBottom: \"1.5rem\" }}>\n            {episodeDate} {episodeLength}\n          </p>\n\n          <p style={{ fontSize: \"0.875rem\", marginBottom: \"2rem\" }}>{episodeDescription}</p>\n\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n            <Link\n              href={episodesLink}\n              style={{\n                color: \"rgba(255, 255, 255, 0.8)\",\n                fontSize: \"0.875rem\",\n                textDecoration: \"underline\",\n              }}\n            >\n              Ver todos los episodios\n            </Link>\n\n            <div style={{ width: \"80px\", height: \"80px\", position: \"relative\" }}>\n              <img\n                src=\"/images/radio-congreso-plus.png\"\n                alt=\"Radio Congreso\"\n                style={{ width: \"100%\", height: \"100%\", objectFit: \"contain\" }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3020},"components/defensoria/conoce-la-ley-button.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from 'react'\n\ninterface DefensoriaContent {\n  id: number\n  section: string\n  title?: string\n  content?: string\n  image_url?: string\n  file_url?: string\n  metadata?: any\n  display_order: number\n  is_active: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport default function ConoceLaLeyButton() {\n  const [buttonData, setButtonData] = useState<DefensoriaContent | null>(null)\n\n  useEffect(() => {\n    const fetchButtonData = async () => {\n      try {\n        const response = await fetch('/api/defensoria-audiencia?section=conoce_ley')\n        if (response.ok) {\n          const data = await response.json()\n          if (data && data.length > 0) {\n            setButtonData(data[0])\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching button data:', error)\n      }\n    }\n\n    fetchButtonData()\n  }, [])\n\n  const handleDownload = () => {\n    if (buttonData?.file_url) {\n      const link = document.createElement('a')\n      link.href = buttonData.file_url\n      link.download = buttonData.title || 'ConoceTuLey.pdf'\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n    } else {\n      // Fallback to default file\n      const link = document.createElement('a')\n      link.href = '/files/ConoceTuLey.pdf'\n      link.download = 'ConoceTuLey.pdf'\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n    }\n  }\n\n  return (\n    <button\n      onClick={handleDownload}\n      className=\"inline-flex h-16 items-center px-10 rounded-full \n                 bg-[#7746d6] hover:bg-[#6a38cf] \n                 text-white text-[26px] font-bold transition shadow-lg\"\n    >\n      Conoce la Ley\n    </button>\n  )\n}\n","size_bytes":1767},"components/rich-text-editor.tsx":{"content":"\"use client\"\n\nimport React, { useState, useEffect, useRef } from 'react';\n\ninterface RichTextEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  height?: number;\n  readOnly?: boolean;\n}\n\nexport default function RichTextEditor({\n  value,\n  onChange,\n  placeholder = \"Escribe tu contenido aquí...\",\n  height = 400,\n  readOnly = false\n}: RichTextEditorProps) {\n  const [mounted, setMounted] = useState(false);\n  const [selectedImage, setSelectedImage] = useState<HTMLImageElement | null>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setMounted(true);\n\n    if (editorRef.current && value && editorRef.current.innerHTML !== value) {\n      editorRef.current.innerHTML = value;\n    }\n\n    // Convert any existing standalone images to proper containers\n    if (editorRef.current) {\n      const existingImages = editorRef.current.querySelectorAll('img:not(.image-container img)');\n      existingImages.forEach(img => {\n        const container = document.createElement('div');\n        container.className = 'image-container';\n        // IMPORTANT: Initial styles for the container. Default to block for proper floating\n        container.style.cssText = `\n          position: relative;\n          display: block; /* Make it a block element to allow float */\n          margin: 10px 0;\n          max-width: 100%;\n        `;\n\n        img.parentNode?.insertBefore(container, img);\n        container.appendChild(img);\n\n        // Add click handler\n        img.addEventListener('click', (event) => handleImageClick(event as MouseEvent, img as HTMLImageElement, container));\n      });\n    }\n\n    // Event listener for global clicks to deselect images\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (!target.closest('.image-container') && !target.closest('.alignment-controls')) {\n        deselectImage();\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      // Clean up any remaining event listeners\n      document.querySelectorAll('.image-controls').forEach(el => {\n        const cleanup = cleanupFunctions.get(el as HTMLElement);\n        if (cleanup) {\n          cleanup();\n          cleanupFunctions.delete(el as HTMLElement);\n        }\n      });\n    };\n  }, []);\n\n  // Only update content when value prop changes from outside\n  useEffect(() => {\n    if (editorRef.current && mounted && value !== editorRef.current.innerHTML) {\n      const selection = window.getSelection();\n      let savedRange: Range | null = null;\n\n      if (selection && selection.rangeCount > 0) {\n        savedRange = selection.getRangeAt(0);\n      }\n\n      editorRef.current.innerHTML = value;\n\n      if (savedRange && editorRef.current.contains(savedRange.startContainer)) {\n        try {\n          selection?.removeAllRanges();\n          selection?.addRange(savedRange);\n        } catch (e) {\n          editorRef.current.focus();\n        }\n      } else {\n        editorRef.current.focus();\n      }\n    }\n  }, [value, mounted]);\n\n  // Handle image upload\n  const handleImageUpload = async (file: File): Promise<string> => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('type', 'news');\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        return result.imageUrl;\n      } else {\n        console.error('Error uploading image');\n        return '';\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      return '';\n    }\n  };\n\n  // Handle file input change\n  const handleFileInputChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.indexOf('image') !== -1) {\n      const imageUrl = await handleImageUpload(file);\n      if (imageUrl && editorRef.current) {\n        insertImage(imageUrl, file.name);\n      }\n    }\n    // Reset the input\n    event.target.value = '';\n  };\n\n  // Insert image with default styling and controls\n  const insertImage = (src: string, alt: string) => {\n    if (!editorRef.current) return;\n\n    const imageContainer = document.createElement('div');\n    imageContainer.className = 'image-container';\n    imageContainer.style.cssText = `\n      position: relative;\n      display: block; /* Default to block */\n      margin: 10px 0;\n      max-width: 100%;\n      clear: both; /* Ensure new images don't float beside previous ones by default */\n    `;\n\n    const img = document.createElement('img');\n    img.src = src;\n    img.alt = alt;\n    img.style.cssText = `\n      width: 300px;\n      height: auto;\n      border-radius: 8px;\n      cursor: pointer;\n      max-width: 100%;\n      vertical-align: middle; /* Prevents extra space below image */\n    `;\n\n    imageContainer.appendChild(img);\n\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      if (editorRef.current.contains(range.commonAncestorContainer)) {\n        range.insertNode(imageContainer);\n        // Place cursor after the inserted image container\n        range.setStartAfter(imageContainer);\n        range.setEndAfter(imageContainer);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      } else {\n        editorRef.current.appendChild(imageContainer);\n      }\n    } else {\n      editorRef.current.appendChild(imageContainer);\n    }\n\n    setTimeout(() => {\n      ensureCursorAtEnd();\n    }, 0);\n\n    img.addEventListener('click', (event) => handleImageClick(event, img, imageContainer));\n\n    handleContentChange();\n  };\n\n  // Handle image click\n  const handleImageClick = (event: MouseEvent, img: HTMLImageElement, container: HTMLDivElement) => {\n    event.stopPropagation(); // Prevent global click handler from deselecting\n\n    deselectImage(); // Deselect any previously selected image\n\n    container.classList.add('image-selected');\n    container.style.outline = '3px solid #3b82f6';\n    container.style.outlineOffset = '2px';\n    setSelectedImage(img);\n\n    createResizeHandles(container, img);\n    createAlignmentControls(container, img);\n  };\n\n  const deselectImage = () => {\n    document.querySelectorAll('.image-selected').forEach(el => {\n      el.classList.remove('image-selected');\n      (el as HTMLElement).style.outline = '';\n    });\n    document.querySelectorAll('.image-controls').forEach(el => {\n      // Clean up event listeners before removing element\n      const cleanup = cleanupFunctions.get(el as HTMLElement);\n      if (cleanup) {\n        cleanup();\n        cleanupFunctions.delete(el as HTMLElement);\n      }\n      el.remove();\n    });\n    setSelectedImage(null);\n  };\n\n  // Create resize handles\n  // Store cleanup functions for event listeners\n  const cleanupFunctions = new WeakMap<HTMLElement, () => void>();\n\n  const createResizeHandles = (container: HTMLDivElement, img: HTMLImageElement) => {\n    const handle = document.createElement('div');\n    handle.className = 'image-controls resize-handle';\n    handle.style.cssText = `\n      position: absolute;\n      bottom: -5px;\n      right: -5px;\n      width: 10px;\n      height: 10px;\n      background: #3b82f6;\n      cursor: se-resize;\n      border-radius: 2px;\n      z-index: 1000;\n    `;\n\n    let isResizing = false;\n    let startX = 0;\n    let startWidth = 0;\n\n    handle.addEventListener('mousedown', (e) => {\n      isResizing = true;\n      startX = e.clientX;\n      startWidth = parseInt(img.style.width, 10) || img.offsetWidth;\n      e.preventDefault();\n      document.body.style.cursor = 'se-resize'; // Change cursor globally during resize\n    });\n\n    const onMouseMove = (e: MouseEvent) => {\n      if (!isResizing) return;\n      const width = startWidth + e.clientX - startX;\n      if (width > 50 && width <= 800) {\n        img.style.width = width + 'px';\n        img.style.height = 'auto';\n      }\n    };\n\n    const onMouseUp = () => {\n      if (isResizing) {\n        isResizing = false;\n        handleContentChange();\n        document.body.style.cursor = ''; // Reset cursor\n      }\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n\n    // Store cleanup function\n    const cleanup = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n    cleanupFunctions.set(handle, cleanup);\n\n    container.appendChild(handle);\n  };\n\n  // Create alignment controls\n  const createAlignmentControls = (container: HTMLDivElement, img: HTMLImageElement) => {\n    // Remove existing controls to avoid duplicates\n    document.querySelectorAll('.image-controls.alignment-controls').forEach(el => el.remove());\n\n    const controlsPanel = document.createElement('div');\n    controlsPanel.className = 'image-controls alignment-controls';\n    controlsPanel.style.cssText = `\n      position: fixed;\n      top: 10px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(255, 255, 255, 0.98);\n      backdrop-filter: blur(12px);\n      border: 3px solid #1e40af;\n      border-radius: 12px;\n      padding: 14px 16px;\n      display: flex;\n      gap: 10px;\n      box-shadow: 0 12px 40px rgba(0,0,0,0.35), 0 4px 12px rgba(30, 64, 175, 0.3), inset 0 1px 0 rgba(255,255,255,0.8);\n      z-index: 999999;\n      white-space: nowrap;\n      outline: 2px solid rgba(255, 255, 255, 0.7);\n      outline-offset: -1px;\n      pointer-events: auto;\n    `;\n\n    // Size buttons with more prominent styling\n    const sizes = [\n      { label: 'S', width: '150px', title: 'Pequeño (150px)' },\n      { label: 'M', width: '300px', title: 'Mediano (300px)' },\n      { label: 'L', width: '500px', title: 'Grande (500px)' },\n      { label: 'XL', width: '100%', title: 'Extra Grande (100%)' }\n    ];\n\n    sizes.forEach(size => {\n      const btn = document.createElement('button');\n      btn.textContent = size.label;\n      btn.title = size.title;\n      btn.setAttribute('type', 'button');\n      btn.style.cssText = `\n        padding: 10px 14px;\n        background: linear-gradient(135deg, #1e40af, #3b82f6);\n        color: white;\n        border: 2px solid rgba(255, 255, 255, 0.3);\n        border-radius: 8px;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 800;\n        text-shadow: 0 2px 4px rgba(0,0,0,0.5);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.3), 0 2px 4px rgba(30, 64, 175, 0.4);\n        transition: all 0.2s ease;\n        min-width: 44px;\n        position: relative;\n        z-index: 100000;\n      `;\n\n      btn.addEventListener('mouseover', () => {\n        btn.style.background = 'linear-gradient(135deg, #1d4ed8, #2563eb)';\n        btn.style.transform = 'scale(1.05) translateY(-1px)';\n        btn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.3)';\n      });\n\n      btn.addEventListener('mouseout', () => {\n        btn.style.background = 'linear-gradient(135deg, #1e40af, #3b82f6)';\n        btn.style.transform = 'scale(1) translateY(0)';\n        btn.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';\n      });\n\n      btn.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        img.style.width = size.width;\n        img.style.height = 'auto';\n        handleContentChange();\n      });\n\n      controlsPanel.appendChild(btn);\n    });\n\n    // Separator\n    const separator = document.createElement('div');\n    separator.style.cssText = 'width: 2px; background: linear-gradient(to bottom, transparent, #94a3b8, transparent); margin: 0 6px; border-radius: 1px;';\n    controlsPanel.appendChild(separator);\n\n    // Alignment buttons\n    const alignments = [\n      { label: '←', title: 'Alinear a la izquierda (texto rodea)', style: 'float: left; margin: 8px 16px 8px 0; display: block; clear: none;' },\n      { label: '↔', title: 'Centrar (bloque)', style: 'margin: 15px auto; display: block; float: none; clear: both;' },\n      { label: '→', title: 'Alinear a la derecha (texto rodea)', style: 'float: right; margin: 8px 0 8px 16px; display: block; clear: none;' }\n    ];\n\n    alignments.forEach(align => {\n      const btn = document.createElement('button');\n      btn.textContent = align.label;\n      btn.title = align.title;\n      btn.setAttribute('type', 'button');\n      btn.style.cssText = `\n        padding: 8px 12px;\n        background: linear-gradient(135deg, #f1f5f9, #e2e8f0);\n        border: 2px solid #64748b;\n        border-radius: 8px;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 700;\n        color: #1e293b;\n        text-shadow: 0 1px 2px rgba(255,255,255,0.8);\n        box-shadow: 0 3px 6px rgba(0,0,0,0.15), 0 1px 3px rgba(100, 116, 139, 0.3);\n        transition: all 0.2s ease;\n        min-width: 40px;\n        position: relative;\n        z-index: 100000;\n      `;\n      btn.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Reset all specific image alignment styles\n        container.style.float = '';\n        container.style.margin = '10px 0'; // Default margin\n        container.style.display = 'block'; // Default display\n        container.style.clear = 'both'; // Default clear\n\n        // Apply new alignment styles\n        const styles = align.style.split(';');\n        styles.forEach(style => {\n          const [property, value] = style.split(':').map(s => s.trim());\n          if (property && value) {\n            // Convert camelCase for JS style property access\n            const jsProperty = property.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n            (container.style as any)[jsProperty] = value;\n          }\n        });\n        handleContentChange();\n      });\n      controlsPanel.appendChild(btn);\n    });\n\n    // Column span button for two-column layouts\n    const spanBtn = document.createElement('button');\n    spanBtn.textContent = '📰';\n    spanBtn.setAttribute('type', 'button');\n    spanBtn.style.cssText = `\n      padding: 8px 12px;\n      background: linear-gradient(135deg, #e0f2fe, #bae6fd);\n      border: 2px solid #0284c7;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 14px;\n      font-weight: 700;\n      color: #0c4a6e;\n      text-shadow: 0 1px 2px rgba(255,255,255,0.8);\n      box-shadow: 0 3px 6px rgba(0,0,0,0.15), 0 1px 3px rgba(2, 132, 199, 0.3);\n      transition: all 0.2s ease;\n      margin-left: 8px;\n      position: relative;\n      z-index: 100000;\n    `;\n    spanBtn.title = 'Expandir a ancho completo (ignora columnas)';\n    spanBtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      const hasSpan = container.classList.contains('column-span-full');\n      if (hasSpan) {\n        container.classList.remove('column-span-full');\n        container.style.columnSpan = '';\n      } else {\n        container.classList.add('column-span-full');\n        container.style.columnSpan = 'all';\n      }\n      handleContentChange();\n    });\n    controlsPanel.appendChild(spanBtn);\n\n    // Delete button\n    const deleteBtn = document.createElement('button');\n    deleteBtn.textContent = '🗑️';\n    deleteBtn.style.cssText = `\n      padding: 8px 12px;\n      background: linear-gradient(135deg, #fee2e2, #fecaca);\n      border: 2px solid #dc2626;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 14px;\n      font-weight: 700;\n      color: #991b1b;\n      text-shadow: 0 1px 2px rgba(255,255,255,0.8);\n      box-shadow: 0 3px 6px rgba(0,0,0,0.15), 0 1px 3px rgba(220, 38, 38, 0.3);\n      transition: all 0.2s ease;\n      margin-left: 8px;\n      position: relative;\n      z-index: 100000;\n    `;\n    deleteBtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      container.remove();\n      deselectImage();\n      handleContentChange();\n    });\n    controlsPanel.appendChild(deleteBtn);\n\n    document.body.appendChild(controlsPanel); // Append controls to body for fixed positioning\n  };\n\n  // Handle content changes\n  const handleContentChange = () => {\n    if (editorRef.current) {\n      const newContent = editorRef.current.innerHTML;\n      if (newContent !== value) {\n        onChange(newContent);\n      }\n    }\n  };\n\n  // Fix cursor position after any DOM manipulation\n  const ensureCursorAtEnd = () => {\n    if (!editorRef.current) return;\n\n    const selection = window.getSelection();\n    if (!selection) return;\n\n    const range = document.createRange();\n    range.selectNodeContents(editorRef.current);\n    range.collapse(false); // Collapse to end\n\n    selection.removeAllRanges();\n    selection.addRange(range);\n\n    editorRef.current.focus();\n  };\n\n  // Apply formatting (only for reliable execCommand operations)\n  const applyFormat = (command: string, value?: string) => {\n    document.execCommand(command, false, value);\n    handleContentChange();\n  };\n\n  // --- Using EXECCOMMAND for LISTS ---\n  const toggleUnorderedList = () => {\n    document.execCommand('insertUnorderedList', false, undefined);\n    handleContentChange();\n  };\n\n  const toggleOrderedList = () => {\n    document.execCommand('insertOrderedList', false, undefined);\n    handleContentChange();\n  };\n\n\n  // Toggle two-column layout\n  const toggleColumns = () => {\n    if (editorRef.current) {\n      const hasColumns = editorRef.current.classList.contains('two-column-layout');\n      if (hasColumns) {\n        editorRef.current.classList.remove('two-column-layout');\n      } else {\n        editorRef.current.classList.add('two-column-layout');\n      }\n      handleContentChange();\n    }\n  };\n\n  // Handle paste to clean up formatting\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault();\n    const text = e.clipboardData.getData('text/plain');\n    document.execCommand('insertText', false, text);\n    handleContentChange();\n  };\n\n  // Handle clicks inside editor to manage image selection\n  const handleEditorClick = (e: React.MouseEvent) => {\n    const target = e.target as HTMLElement;\n\n    // If a resize handle is being dragged, don't deselect\n    if (target.classList.contains('resize-handle')) {\n      return;\n    }\n\n    if (target.tagName === 'IMG') {\n      const img = target as HTMLImageElement;\n      let container = img.closest('.image-container') as HTMLDivElement;\n\n      if (!container) {\n        // This case should ideally not happen if existing images are converted on mount\n        // but it's a good fallback.\n        container = document.createElement('div');\n        container.className = 'image-container';\n        container.style.cssText = `\n          position: relative;\n          display: block;\n          margin: 10px 0;\n          max-width: 100%;\n        `;\n        img.parentNode?.insertBefore(container, img);\n        container.appendChild(img);\n      }\n      handleImageClick(e.nativeEvent, img, container); // Pass nativeEvent to handleImageClick\n      return;\n    }\n\n    // If clicked anywhere else within the editor, deselect image\n    if (!target.closest('.image-controls')) {\n      deselectImage();\n    }\n  };\n\n\n  if (!mounted) {\n    return (\n      <div className=\"w-full h-64 bg-gray-100 border border-gray-300 rounded-md flex items-center justify-center\">\n        <span className=\"text-gray-500\">Cargando editor...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full border border-gray-300 rounded-lg overflow-hidden bg-white\">\n      {/* Simple Toolbar - Only show when not read-only */}\n      {!readOnly && (\n        <div className=\"flex flex-wrap items-center gap-1 p-3 bg-gray-50 border-b border-gray-200\">\n          {/* Bold */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => applyFormat('bold')}\n            className=\"px-3 py-2 text-sm font-bold bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Texto en negrita\"\n          >\n            B\n          </button>\n\n          {/* Italic */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => applyFormat('italic')}\n            className=\"px-3 py-2 text-sm italic bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Texto en cursiva\"\n          >\n            I\n          </button>\n\n          {/* Underline */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => applyFormat('underline')}\n            className=\"px-3 py-2 text-sm underline bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Texto subrayado\"\n          >\n            U\n          </button>\n\n          <div className=\"w-px h-6 bg-gray-300 mx-1\"></div>\n\n          {/* Text Size */}\n          <select\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onChange={(e) => applyFormat('fontSize', e.target.value)}\n            className=\"px-2 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            defaultValue=\"3\"\n          >\n            <option value=\"1\">Muy pequeño</option>\n            <option value=\"2\">Pequeño</option>\n            <option value=\"3\">Normal</option>\n            <option value=\"4\">Grande</option>\n            <option value=\"5\">Muy grande</option>\n          </select>\n\n          <div className=\"w-px h-6 bg-gray-300 mx-1\"></div>\n\n          {/* Column Layout */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => toggleColumns()}\n            className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Activar/Desactivar dos columnas\"\n          >\n            📰 Columnas\n          </button>\n\n          <div className=\"w-px h-6 bg-gray-300 mx-1\"></div>\n\n          {/* Align Left */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => applyFormat('justifyLeft')}\n            className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Alinear texto a la izquierda\"\n          >\n            ←\n          </button>\n\n          {/* Align Center */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => applyFormat('justifyCenter')}\n            className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Centrar texto\"\n          >\n            ↔\n          </button>\n\n          {/* Align Right */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => applyFormat('justifyRight')}\n            className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Alinear texto a la derecha\"\n          >\n            →\n          </button>\n\n          <div className=\"w-px h-6 bg-gray-300 mx-1\"></div>\n\n          {/* Bulleted List */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={toggleUnorderedList}\n            className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Lista con viñetas\"\n          >\n            • Lista\n          </button>\n\n          {/* Numbered List */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={toggleOrderedList}\n            className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Lista numerada\"\n          >\n            1. Lista\n          </button>\n\n          <div className=\"w-px h-6 bg-gray-300 mx-1\"></div>\n\n          {/* Add Image */}\n          <button\n            type=\"button\"\n            onMouseDown={(e) => e.preventDefault()} // Prevents blur\n            onClick={() => fileInputRef.current?.click()}\n            className=\"px-3 py-2 text-sm bg-blue-600 text-white border border-blue-600 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            title=\"Agregar imagen\"\n          >\n            📷 Imagen\n          </button>\n\n          {/* Hidden file input - Only show when not read-only */}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileInputChange}\n            className=\"hidden\"\n          />\n        </div>\n      )}\n\n      {/* Help Text */}\n      <div className=\"px-3 py-2 bg-blue-50 border-b border-blue-200 text-xs text-blue-700\">\n        💡 **¡Súper fácil!** Usa el botón \"Columnas\" para crear artículos como periódicos. Las imágenes se pueden mover a izquierda/derecha para que el texto las rodee.\n      </div>\n\n      {/* Editor */}\n      <div\n        ref={editorRef}\n        contentEditable={!readOnly}\n        onPaste={handlePaste}\n        onClick={handleEditorClick}\n        onInput={handleContentChange}\n        style={{ minHeight: `${height}px`, direction: 'ltr', textAlign: 'left' }}\n        className={`p-4 focus:outline-none text-gray-900 leading-relaxed ${readOnly ? 'cursor-default' : ''}`}\n        suppressContentEditableWarning={true}\n        dir=\"ltr\"\n      >\n      </div>\n\n      {/* Footer Help */}\n      <div className=\"px-3 py-2 bg-gray-50 border-t border-gray-200 text-xs text-gray-600\">\n        ✨ Activa \"Columnas\" para crear artículos como periódicos. Haz clic en imágenes para cambiar tamaño y posición. ¡Como en un periódico real!\n      </div>\n\n      {/* Global styles for the editor content */}\n      <style jsx>{`\n        /* Styles for the two-column layout */\n        .two-column-layout {\n          column-count: 2;\n          column-gap: 40px; /* Space between columns */\n          /* Ensures floats inside don't break the column layout */\n          clear: both;\n        }\n\n        /* Ensure images and other elements can span across all columns */\n        .two-column-layout .image-container.column-span-full {\n          column-span: all;\n        }\n\n        /* Clearfix for the editor content itself to handle floats */\n        .p-4::after {\n          content: \"\";\n          display: table;\n          clear: both;\n        }\n\n        /* Basic styling for lists in contentEditable */\n        .p-4 ul, .p-4 ol {\n            /* Forzar el margen izquierdo para que las viñetas sean visibles */\n            margin-left: 2.5em !important; \n            padding-left: 0 !important; /* Asegurarse de que no haya padding que lo empuje */\n            list-style-position: outside !important; /* Crucial: Asegurarse de que la viñeta/número esté fuera del contenido del item */\n            margin-bottom: 1em !important; /* Espacio debajo de la lista */\n            /* Quita el padding-inline-start de ul/ol si estuviera afectando */\n            -webkit-padding-start: 0 !important;\n        }\n        .p-4 ul {\n            list-style-type: disc !important; /* Tipo de viñeta por defecto */\n        }\n        .p-4 ol {\n            list-style-type: decimal !important; /* Tipo de numeración por defecto */\n        }\n        .p-4 li {\n            /* Muy importante: asegurar que se renderice como un item de lista para que el list-style funcione */\n            display: list-item !important;\n            margin-bottom: 4px !important; /* Espacio entre items de la lista */\n            padding-left: 0 !important; /* Resetear cualquier padding del item */\n            /* Ayuda visual para depuración: Comentar estas líneas si no funcionan las viñetas */\n            /* border: 1px dashed red !important; \n            padding: 2px !important; */\n        }\n\n        /* Default block for editor children for better consistency */\n        .p-4 > *:not(.image-container, ul, ol) { /* Excluye listas para no afectar sus márgenes */\n          margin-bottom: 1em; /* Add some spacing between paragraphs/blocks */\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":28883},"app/api/contact/route.ts":{"content":"import { type NextRequest, NextResponse } from \"next/server\"\nimport { sendContactEmail, type ContactFormData } from \"@/lib/email\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = (await request.json()) as ContactFormData\n\n    // Basic validation\n    if (!data.nombre || !data.email || !data.asunto) {\n      return NextResponse.json({ success: false, message: \"Nombre, email y asunto son requeridos\" }, { status: 400 })\n    }\n\n    // Send the email\n    const result = await sendContactEmail(data)\n\n    if (result.success) {\n      return NextResponse.json({\n        success: true,\n        message: \"Mensaje enviado correctamente\",\n      })\n    } else {\n      return NextResponse.json(\n        { success: false, message: \"Error al enviar el mensaje\", error: result.error },\n        { status: 500 },\n      )\n    }\n  } catch (error) {\n    console.error(\"Error in contact API route:\", error)\n    return NextResponse.json({ success: false, message: \"Error al procesar la solicitud\" }, { status: 500 })\n  }\n}\n","size_bytes":1029},"lib/audio-upload.ts":{"content":"\"use server\"\n\n// En un entorno real, aquí implementarías la lógica para subir archivos de audio\n// a un servicio de almacenamiento como Vercel Blob, AWS S3, etc.\nexport async function uploadAudio(formData: FormData): Promise<string> {\n  // Simulación de carga de audio\n  // En un entorno real, procesarías el archivo y lo subirías a un servicio\n  const file = formData.get(\"file\") as File\n\n  if (!file) {\n    throw new Error(\"No se proporcionó ningún archivo\")\n  }\n\n  // Verificar que sea un archivo de audio\n  if (!file.type.startsWith(\"audio/\")) {\n    throw new Error(\"El archivo debe ser un archivo de audio (MP3, WAV, etc.)\")\n  }\n\n  // Simular un retraso para la carga\n  await new Promise((resolve) => setTimeout(resolve, 1500))\n\n  // En un entorno real, aquí devolverías la URL del audio subido\n  return `/placeholder.mp3?filename=${encodeURIComponent(file.name)}`\n}\n","size_bytes":882},"app/transparencia/focalizada/tu-congreso/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\nimport Image from \"next/image\"\n\nexport default function TuCongresoPage() {\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">Tu Congreso</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          <div className=\"prose max-w-none\">\n            <h2 className=\"text-2xl font-semibold mb-4\">¿Qué es el Congreso de la Unión?</h2>\n            <p>\n              El Congreso de la Unión es el órgano depositario del Poder Legislativo federal de México. Está compuesto\n              por dos cámaras: la Cámara de Diputados y la Cámara de Senadores.\n            </p>\n            <p>\n              La Cámara de Diputados está integrada por 500 diputados electos cada tres años, mientras que la Cámara de\n              Senadores está compuesta por 128 senadores electos cada seis años.\n            </p>\n            <h3 className=\"text-xl font-semibold mt-6 mb-3\">Funciones del Congreso</h3>\n            <ul>\n              <li>Crear, reformar, adicionar, y derogar leyes y decretos</li>\n              <li>Aprobar el Presupuesto de Egresos de la Federación</li>\n              <li>Ratificar nombramientos realizados por el Ejecutivo Federal</li>\n              <li>Fiscalizar el uso de recursos públicos</li>\n              <li>Representar a la ciudadanía</li>\n            </ul>\n          </div>\n\n          <div className=\"flex flex-col space-y-6\">\n            <div className=\"bg-gray-100 p-4 rounded-lg\">\n              <h3 className=\"text-xl font-semibold mb-3\">Cámara de Diputados</h3>\n              <Image\n                src=\"/Mexican-Deputies-Debate.png\"\n                alt=\"Cámara de Diputados\"\n                width={400}\n                height={200}\n                className=\"w-full h-auto mb-3\"\n              />\n              <p className=\"text-gray-700\">\n                La Cámara de Diputados se renueva en su totalidad cada tres años y representa a la población de manera\n                proporcional.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-100 p-4 rounded-lg\">\n              <h3 className=\"text-xl font-semibold mb-3\">Senado de la República</h3>\n              <Image\n                src=\"/Mexican-Senate-Chamber.png\"\n                alt=\"Senado de la República\"\n                width={400}\n                height={200}\n                className=\"w-full h-auto mb-3\"\n              />\n              <p className=\"text-gray-700\">\n                El Senado se compone de 128 senadores, quienes permanecen en el cargo por seis años y representan a las\n                entidades federativas.\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":2969},"components/radio-logo.tsx":{"content":"import Image from \"next/image\"\n\ninterface RadioLogoProps {\n  size?: \"sm\" | \"md\" | \"lg\"\n  withText?: boolean\n  className?: string\n}\n\nexport default function RadioLogo({ size = \"md\", withText = true, className = \"\" }: RadioLogoProps) {\n  const sizes = {\n    sm: { logo: 24, container: \"h-6 w-6\" },\n    md: { logo: 40, container: \"h-10 w-10\" },\n    lg: { logo: 120, container: \"h-24 w-24\" },\n  }\n\n  const { logo, container } = sizes[size]\n\n  return (\n    <div className={`flex items-center ${className}`}>\n      <div className={`relative ${container} rounded-full overflow-hidden bg-[#7e22ce]`}>\n        <Image\n          src=\"/placeholder-qjr0n.png\"\n          alt=\"Radio Congreso Logo\"\n          width={logo}\n          height={logo}\n          className=\"object-contain\"\n        />\n      </div>\n      {withText && (\n        <div className=\"ml-2\">\n          {size === \"lg\" ? (\n            <div className=\"text-left\">\n              <h1 className=\"text-6xl font-bold\">Radio</h1>\n              <h2 className=\"text-4xl font-bold\">CONGRESO</h2>\n            </div>\n          ) : (\n            <span className=\"font-bold\">Radio Congreso</span>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":1186},"scripts/create-diff-dump.js":{"content":"// Previous dump file (latest one)\n  const previousDumpFile = 'database-dump-2025-07-20T23-23-49-823Z.sql';","size_bytes":107},"components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ ...props }) => {\n          if (props.orientation === 'left') {\n            return <ChevronLeft className=\"h-4 w-4\" />;\n          }\n          return <ChevronRight className=\"h-4 w-4\" />;\n        },\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2656},"app/admin/legislators/page.tsx":{"content":"\"use client\"\n\nimport React, { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Pencil, Trash2, Plus, Upload } from \"lucide-react\"\nimport Image from \"next/image\"\nimport type { Legislator, ParliamentaryGroup } from \"@/lib/api\"\n\nexport default function LegislatorsPage() {\n  const [legislators, setLegislators] = useState<Legislator[]>([])\n  const [parliamentaryGroups, setParliamentaryGroups] = useState<ParliamentaryGroup[]>([])\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [editingLegislator, setEditingLegislator] = useState<Legislator | null>(null)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    parliamentaryGroupId: \"\",\n    legislature: \"\",\n    state: \"\",\n    type: \"\",\n    gender: \"\",\n    status: \"Activo\",\n    imageUrl: \"\",\n    email: \"\",\n    biography: \"\"\n  })\n  const { toast } = useToast()\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n\n    try {\n      const formData = new FormData()\n      formData.append('file', file)\n      formData.append('type', 'legislators')\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setFormData(prev => ({ ...prev, imageUrl: data.imageUrl }))\n        toast({\n          title: \"Éxito\",\n          description: \"Imagen subida correctamente\"\n        })\n      } else {\n        throw new Error('Failed to upload image')\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo subir la imagen\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const fetchLegislators = async () => {\n    try {\n      const response = await fetch('/api/legislators')\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Fetched legislators:', data)\n        setLegislators(data)\n      } else {\n        console.error('Failed to fetch legislators:', response.status)\n      }\n    } catch (error) {\n      console.error('Error fetching legislators:', error)\n    }\n  }\n\n  const fetchParliamentaryGroups = async () => {\n    try {\n      const response = await fetch('/api/parliamentary-groups')\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Fetched parliamentary groups:', data)\n        setParliamentaryGroups(data)\n      } else {\n        console.error('Failed to fetch parliamentary groups:', response.status)\n      }\n    } catch (error) {\n      console.error('Error fetching parliamentary groups:', error)\n    }\n  }\n\n  useEffect(() => {\n    fetchLegislators()\n    fetchParliamentaryGroups()\n  }, [])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    try {\n      const url = editingLegislator ? `/api/legislators/${editingLegislator.id}` : '/api/legislators'\n      const method = editingLegislator ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      })\n\n      if (response.ok) {\n        toast({\n          title: \"Éxito\",\n          description: `Legislador ${editingLegislator ? 'actualizado' : 'creado'} correctamente`\n        })\n        fetchLegislators()\n        setDialogOpen(false)\n        resetForm()\n      } else {\n        throw new Error('Error al guardar legislador')\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo guardar el legislador\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleEdit = (legislator: Legislator) => {\n    setEditingLegislator(legislator)\n    setFormData({\n      name: legislator.name,\n      parliamentaryGroupId: legislator.parliamentaryGroupId,\n      legislature: legislator.legislature || \"\",\n      state: legislator.state || \"\",\n      type: legislator.type || \"\",\n      gender: legislator.gender || \"\",\n      status: legislator.status || \"Activo\",\n      imageUrl: legislator.imageUrl || \"\",\n      email: legislator.email || \"\",\n      biography: legislator.biography || \"\"\n    })\n    setDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar este legislador?')) {\n      try {\n        const response = await fetch(`/api/legislators/${id}`, {\n          method: 'DELETE',\n        })\n\n        if (response.ok) {\n          toast({\n            title: \"Éxito\",\n            description: \"Legislador eliminado correctamente\"\n          })\n          fetchLegislators()\n        } else {\n          throw new Error('Error al eliminar legislador')\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"No se pudo eliminar el legislador\",\n          variant: \"destructive\"\n        })\n      }\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      parliamentaryGroupId: \"\",\n      legislature: \"\",\n      state: \"\",\n      type: \"\",\n      gender: \"\",\n      status: \"Activo\",\n      imageUrl: \"\",\n      email: \"\",\n      biography: \"\"\n    })\n    setEditingLegislator(null)\n  }\n\n  const getParliamentaryGroupName = (id: string) => {\n    const group = parliamentaryGroups.find(g => g.id === id)\n    return group?.name || \"Sin grupo\"\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Legisladores</h1>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => resetForm()}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Nuevo Legislador\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingLegislator ? 'Editar Legislador' : 'Nuevo Legislador'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nombre *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"parliamentaryGroup\">Grupo Parlamentario *</Label>\n                  <Select\n                    value={formData.parliamentaryGroupId}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, parliamentaryGroupId: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleccionar grupo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {parliamentaryGroups.map(group => (\n                        <SelectItem key={group.id} value={group.id}>\n                          {group.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"legislature\">Legislatura</Label>\n                  <Input\n                    id=\"legislature\"\n                    value={formData.legislature}\n                    onChange={(e) => setFormData(prev => ({ ...prev, legislature: e.target.value }))}\n                    placeholder=\"LXV (2021–2024)\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"state\">Estado</Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData(prev => ({ ...prev, state: e.target.value }))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"type\">Tipo</Label>\n                  <Select\n                    value={formData.type}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleccionar tipo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Mayoría relativa\">Mayoría relativa</SelectItem>\n                      <SelectItem value=\"Plurinominal\">Plurinominal</SelectItem>\n                      <SelectItem value=\"Diputado\">Diputado</SelectItem>\n                      <SelectItem value=\"Senador\">Senador</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"gender\">Género</Label>\n                  <Select\n                    value={formData.gender}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, gender: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleccionar género\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"M\">Masculino</SelectItem>\n                      <SelectItem value=\"F\">Femenino</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"status\">Estado</Label>\n                  <Select\n                    value={formData.status}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, status: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Activo\">Activo</SelectItem>\n                      <SelectItem value=\"Inactivo\">Inactivo</SelectItem>\n                      <SelectItem value=\"Licencia\">Licencia</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"imageFile\">Fotografía</Label>\n                <div className=\"flex items-center gap-4\">\n                  <Input\n                    id=\"imageFile\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageUpload}\n                    className=\"flex-1\"\n                  />\n                  {formData.imageUrl && (\n                    <div className=\"w-16 h-16 relative rounded-lg overflow-hidden border\">\n                      <Image \n                        src={formData.imageUrl} \n                        alt=\"Preview\" \n                        fill\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"biography\">Biografía</Label>\n                <textarea\n                  id=\"biography\"\n                  value={formData.biography}\n                  onChange={(e) => setFormData(prev => ({ ...prev, biography: e.target.value }))}\n                  className=\"w-full p-2 border rounded-md\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\">\n                  {editingLegislator ? 'Actualizar' : 'Crear'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Legisladores</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Fotografía</TableHead>\n                  <TableHead>Nombre</TableHead>\n                  <TableHead>Grupo Parlamentario</TableHead>\n                  <TableHead>Legislatura</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Tipo</TableHead>\n                  <TableHead>Género</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {legislators.map((legislator) => (\n                  <TableRow key={legislator.id}>\n                    <TableCell>\n                      <div className=\"w-12 h-12 relative rounded-full overflow-hidden\">\n                        <Image\n                          src={legislator.imageUrl || \"/placeholder.svg?height=48&width=48&text=L\"}\n                          alt={legislator.name}\n                          fill\n                          className=\"object-cover\"\n                        />\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{legislator.name}</TableCell>\n                    <TableCell>{getParliamentaryGroupName(legislator.parliamentaryGroupId)}</TableCell>\n                    <TableCell>{legislator.legislature || \"–\"}</TableCell>\n                    <TableCell>{legislator.state || \"–\"}</TableCell>\n                    <TableCell>{legislator.type || \"–\"}</TableCell>\n                    <TableCell>{legislator.gender === \"M\" ? \"M\" : legislator.gender === \"F\" ? \"F\" : \"–\"}</TableCell>\n                    <TableCell>\n                      <Badge variant={legislator.status === \"Activo\" ? \"default\" : \"secondary\"}>\n                        {legislator.status || \"Activo\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(legislator)}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                          Editar\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(legislator.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                          Eliminar\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":16050},"styles/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":2428},"components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"app/globals.css":{"content":"body {\n  background-color: #3b0764;\n  background-image: url(\"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Fondo%20menu%CC%81%20inicio-E2Kphliz6M2WLtYSfYPrXeEIMNC6SY.png\");\n  background-size: cover;\n  background-position: center;\n  background-attachment: fixed;\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Import rich text styles */\n@import '../styles/rich-text.css';\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n/* Hide scrollbar for IE, Edge and Firefox */\n.scrollbar-hide {\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Estilos para el modo de alto contraste */\nbody.high-contrast {\n  background-color: black;\n  color: white;\n}\n\nbody.high-contrast a {\n  color: yellow;\n}\n\nbody.high-contrast button {\n  background-color: white;\n  color: black;\n  border: 2px solid yellow;\n}\n\nbody.high-contrast img {\n  filter: grayscale(100%) contrast(120%);\n}\n\nbody.high-contrast header,\nbody.high_contrast footer,\nbody.high_contrast section {\n  background-color: black;\n  color: white;\n  border-color: yellow;\n}\n\nbody.high_contrast .bg-purple-900 {\n  background-color: black;\n}\n\nbody.high_contrast .text-white {\n  color: yellow;\n}\n\nbody.high_contrast .bg-white {\n  background-color: black;\n  color: white;\n}\n\nbody.high_contrast .text-gray-600,\nbody.high_contrast .text-gray-500,\nbody.high_contrast .text-gray-700,\nbody.high_contrast .text-gray-800 {\n  color: white;\n}\n\nbody.high_contrast .border,\nbody.high_contrast .border-t,\nbody.high_contrast .border-b {\n  border-color: yellow;\n}\n\n/* Ocultar la barra de desplazamiento pero permitir el desplazamiento */\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n.scrollbar-hide {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n/* Animación de brillo optimizada */\n@keyframes shimmer {\n  0% {\n    transform: translateX(-150%);\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.5;\n  }\n  100% {\n    transform: translateX(150%);\n    opacity: 0;\n  }\n}\n\n.animate-shimmer {\n  animation: shimmer 2.5s ease-in-out infinite;\n  will-change: transform, opacity;\n}\n\n/* Estilos para el menú móvil */\n@media (max-width: 768px) {\n  body.menu-open {\n    overflow: hidden !important;\n    position: fixed;\n    width: 100%;\n  }\n\n  /* Ensure mobile menu appears above all other content */\n  header {\n    position: relative;\n    z-index: 50;\n  }\n\n  /* Mobile menu stays visible and prevents flickering */\n  .mobile-menu-container {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: white;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    z-index: 45;\n    opacity: 1;\n    visibility: visible;\n    transform: translateY(0);\n    transition: none; /* Remove transitions that cause flickering */\n  }\n}\n\n  @media (max-width: 768px) {\n  /* Mobile table improvements */\n  .mobile-table td {\n    padding: 8px 4px;\n    font-size: 14px;\n  }\n\n  .mobile-table th {\n    padding: 8px 4px;\n    font-size: 12px;\n  }\n\n  /* Mobile optimizations */\n  .overflow-x-auto {\n    -webkit-overflow-scrolling: touch;\n  }\n\n  /* Prevent body scroll when mobile menu is open */\n  body.menu-open {\n    overflow: hidden !important;\n  }\n\n  .table-container {\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  /* Prevent horizontal scroll on mobile */\n  body {\n    overflow-x: hidden;\n  }\n\n  /* Fix for mobile viewport */\n  html, body {\n    max-width: 100vw;\n    overflow-x: hidden;\n  }\n\n  /* Ensure content doesn't extend beyond viewport */\n  * {\n    max-width: 100%;\n    box-sizing: border-box;\n  }\n\n  /* Fix for mobile swipe gestures */\n  .mobile-safe {\n    touch-action: pan-y;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    user-select: none;\n  }\n\n  /* Carousel and container fixes for mobile */\n  .carousel-container,\n  [data-carousel=\"container\"] {\n    width: 100% !important;\n    max-width: 100vw !important;\n    overflow: hidden !important;\n  }\n\n  /* Fix carousel slides */\n  .carousel-slide,\n  [data-carousel=\"slide\"] {\n    width: 100% !important;\n    max-width: 100vw !important;\n    flex-shrink: 0 !important;\n  }\n\n  /* Fix carousel navigation */\n  .carousel-nav,\n  [data-carousel=\"nav\"] {\n    position: absolute !important;\n    z-index: 10 !important;\n  }\n\n  /* Ensure grid containers don't overflow */\n  .grid {\n    width: 100% !important;\n    max-width: 100vw !important;\n  }\n\n  /* Fix any absolute positioned elements */\n  .absolute {\n    max-width: 100vw !important;\n  }\n\n  /* Container constraints */\n  .container,\n  .mx-auto {\n    max-width: 100vw !important;\n    padding-left: 1rem !important;\n    padding-right: 1rem !important;\n  }\n\n  /* Prevent carousel overflow */\n  .grid {\n    overflow: hidden !important;\n  }\n\n  /* Make carousel items responsive */\n  .relative.group {\n    min-width: 0 !important;\n    flex-shrink: 1 !important;\n  }\n\n  /* Line clamp utility for text truncation */\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  /* Fix for broken images on mobile */\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  /* Mobile live stream optimizations */\n  .aspect-video {\n    aspect-ratio: 16 / 9;\n  }\n\n  /* Text stroke utility for mobile navigation */\n  .text-stroke-sm {\n    text-shadow: 1px 1px 0 #000, -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000;\n  }\n}\n\n/* Add any additional global styles here */\n\n/* Ensure error messages are always visible */\n.error,\n[class*=\"error\"],\n.alert-error,\n.bg-red-100,\n.text-red-700,\n.text-red-800 {\n  opacity: 1 !important;\n}\n\n/* Audio player error styles */\n.audio-error {\n  background-color: #fef2f2 !important;\n  border: 2px solid #fca5a5 !important;\n  color: #dc2626 !important;\n  opacity: 1 !important;\n  z-index: 1000;\n}\n.error-message {\n  opacity: 1 !important;\n  background-color: #fee2e2 !important;\n  color: #991b1b !important;\n  border: 1px solid #fca5a5 !important;\n}\n\n/* Toast notification styles */\n[data-radix-toast-viewport] {\n  z-index: 9999 !important;\n}\n\n/* Ensure all toast elements are visible with white background */\n[data-radix-toast-root] {\n  background-color: white !important;\n  border: 1px solid #d1d5db !important;\n  opacity: 1 !important;\n  color: #111827 !important;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;\n}\n\n[data-radix-toast-title],\n[data-radix-toast-description] {\n  opacity: 1 !important;\n  color: #111827 !important;\n}\n\n/* Success toasts */\n.group[data-type=\"foreground\"]:not(.destructive) {\n  background-color: white !important;\n  color: #059669 !important;\n  border-color: #10b981 !important;\n  opacity: 1 !important;\n}\n\n/* Error/destructive toasts */\n.group[data-type=\"foreground\"].destructive {\n  background-color: #dc2626 !important;\n  color: white !important;\n  border-color: #b91c1c !important;\n  opacity: 1 !important;\n}","size_bytes":7023},"app/api/radio/live-config/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\n// In-memory storage for live radio configuration\nlet liveRadioConfig = {\n  streamUrl: \"https://ccstreaming.packet.mx/LiveApp/streams/Radio_kd5oiNTTWO0gEOFc23dr762145.m3u8\",\n  isLive: false,\n  currentProgram: \"Transmisión en vivo\",\n  description: \"Escuche la señal en vivo de Radio Congreso\",\n  listeners: 0,\n  quality: 'high' as const,\n  fallbackUrl: \"\",\n  enableAutoReconnect: true,\n  maxRetries: 3\n}\n\nexport async function GET() {\n  try {\n    return NextResponse.json(liveRadioConfig)\n  } catch (error) {\n    console.error('Error fetching live radio config:', error)\n    return NextResponse.json({ error: 'Failed to fetch live radio config' }, { status: 500 })\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const data = await request.json()\n    \n    // Update configuration\n    liveRadioConfig = {\n      ...liveRadioConfig,\n      ...data,\n      // Ensure listeners is always a number\n      listeners: typeof data.listeners === 'number' ? data.listeners : liveRadioConfig.listeners\n    }\n    \n    return NextResponse.json(liveRadioConfig)\n  } catch (error) {\n    console.error('Error updating live radio config:', error)\n    return NextResponse.json({ error: 'Failed to update live radio config' }, { status: 500 })\n  }\n}\n","size_bytes":1307},"app/transparencia/plataforma-nacional/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\nimport Image from \"next/image\"\n\nexport default function PlataformaNacionalPage() {\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">Plataforma Nacional de Transparencia</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          <div className=\"prose max-w-none\">\n            <h2 className=\"text-2xl font-semibold mb-4\">¿Qué es la Plataforma Nacional de Transparencia?</h2>\n            <p>\n              La Plataforma Nacional de Transparencia (PNT) es una herramienta tecnológica desarrollada por el Instituto\n              Nacional de Transparencia, Acceso a la Información y Protección de Datos Personales (INAI), que facilita a\n              la ciudadanía el ejercicio de los derechos de acceso a la información y de protección de datos personales.\n            </p>\n\n            <h3 className=\"text-xl font-semibold mt-6 mb-3\">¿Qué puedes hacer en la PNT?</h3>\n            <ul>\n              <li>\n                <strong>Solicitar información pública</strong> a cualquier sujeto obligado del país.\n              </li>\n              <li>\n                <strong>Interponer recursos de revisión</strong> cuando no estés conforme con las respuestas recibidas.\n              </li>\n              <li>\n                <strong>Consultar información pública</strong> que los sujetos obligados deben publicar de oficio.\n              </li>\n              <li>\n                <strong>Ejercer tus derechos ARCO</strong> (Acceso, Rectificación, Cancelación y Oposición) sobre tus\n                datos personales.\n              </li>\n              <li>\n                <strong>Denunciar incumplimientos</strong> a las obligaciones de transparencia.\n              </li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold mt-6 mb-3\">Información del Canal del Congreso en la PNT</h3>\n            <p>\n              En la Plataforma Nacional de Transparencia podrás encontrar toda la información pública del Canal del\n              Congreso que debe ser publicada de acuerdo con las obligaciones establecidas en la Ley General de\n              Transparencia y Acceso a la Información Pública.\n            </p>\n            <p>\n              Esto incluye información sobre presupuesto, contratos, estructura orgánica, remuneraciones, normatividad,\n              informes y más.\n            </p>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"bg-gray-100 p-5 rounded-lg text-center\">\n              <Image\n                src=\"/mexican-transparency-portal.png\"\n                alt=\"Plataforma Nacional de Transparencia\"\n                width={400}\n                height={200}\n                className=\"w-full h-auto mb-4\"\n              />\n\n              <div className=\"mb-6\">\n                <h3 className=\"text-xl font-semibold mb-3\">Accede a la Plataforma</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  Visita la Plataforma Nacional de Transparencia para consultar información pública o realizar\n                  solicitudes de información.\n                </p>\n                <a\n                  href=\"https://www.plataformadetransparencia.org.mx/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-block bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-md font-medium\"\n                >\n                  Ir a la Plataforma\n                </a>\n              </div>\n\n              <div>\n                <h3 className=\"text-xl font-semibold mb-3\">¿Necesitas ayuda?</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  Si tienes dudas sobre cómo utilizar la Plataforma Nacional de Transparencia, consulta los siguientes\n                  recursos:\n                </p>\n                <div className=\"flex flex-col space-y-2\">\n                  <a href=\"#\" className=\"text-blue-600 hover:underline\">\n                    Manual de usuario\n                  </a>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline\">\n                    Preguntas frecuentes\n                  </a>\n                  <a href=\"#\" className=\"text-blue-600 hover:underline\">\n                    Videos tutoriales\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":4680},"components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"app/admin/database-config/database-config-client.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { CheckCircle, XCircle, AlertCircle, Database } from \"lucide-react\"\n\nexport function DatabaseConfigClient() {\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle')\n  const [initStatus, setInitStatus] = useState<'idle' | 'initializing' | 'success' | 'error'>('idle')\n  const [message, setMessage] = useState('')\n\n  const handleTestConnection = async () => {\n    setConnectionStatus('testing')\n    setMessage('')\n\n    try {\n      const response = await fetch('/api/admin/test-connection', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          // Use environment variables for testing\n          useEnvVars: true\n        })\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Connection failed')\n      }\n\n      setConnectionStatus('success')\n      setMessage('Database connection successful!')\n    } catch (error) {\n      setConnectionStatus('error')\n      setMessage(error instanceof Error ? error.message : 'Connection failed')\n    }\n  }\n\n  const handleInitializeDatabase = async () => {\n    setInitStatus('initializing')\n    setMessage('')\n\n    try {\n      const response = await fetch('/api/admin/init-db', {\n        method: 'POST',\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Initialization failed')\n      }\n\n      setInitStatus('success')\n      setMessage('Database initialized successfully!')\n    } catch (error) {\n      setInitStatus('error')\n      setMessage(error instanceof Error ? error.message : 'Initialization failed')\n    }\n  }\n\n  return (\n    <>\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Connection Test Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"h-5 w-5\" />\n              Connection Test\n            </CardTitle>\n            <CardDescription>\n              Test the connection to your PostgreSQL database\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium\">Status:</span>\n              {connectionStatus === 'idle' && <Badge variant=\"secondary\">Not tested</Badge>}\n              {connectionStatus === 'testing' && <Badge variant=\"secondary\">Testing...</Badge>}\n              {connectionStatus === 'success' && (\n                <Badge variant=\"default\" className=\"bg-green-500\">\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                  Connected\n                </Badge>\n              )}\n              {connectionStatus === 'error' && (\n                <Badge variant=\"destructive\">\n                  <XCircle className=\"h-3 w-3 mr-1\" />\n                  Failed\n                </Badge>\n              )}\n            </div>\n\n            <Button \n              onClick={handleTestConnection}\n              disabled={connectionStatus === 'testing'}\n              className=\"w-full\"\n            >\n              {connectionStatus === 'testing' ? 'Testing...' : 'Test Connection'}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Database Initialization Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5\" />\n              Database Setup\n            </CardTitle>\n            <CardDescription>\n              Initialize the database with required tables and data\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium\">Status:</span>\n              {initStatus === 'idle' && <Badge variant=\"secondary\">Not initialized</Badge>}\n              {initStatus === 'initializing' && <Badge variant=\"secondary\">Initializing...</Badge>}\n              {initStatus === 'success' && (\n                <Badge variant=\"default\" className=\"bg-green-500\">\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                  Initialized\n                </Badge>\n              )}\n              {initStatus === 'error' && (\n                <Badge variant=\"destructive\">\n                  <XCircle className=\"h-3 w-3 mr-1\" />\n                  Failed\n                </Badge>\n              )}\n            </div>\n\n            <Button \n              onClick={handleInitializeDatabase}\n              disabled={initStatus === 'initializing' || connectionStatus !== 'success'}\n              className=\"w-full\"\n              variant={connectionStatus !== 'success' ? 'secondary' : 'default'}\n            >\n              {initStatus === 'initializing' ? 'Initializing...' : 'Initialize Database'}\n            </Button>\n\n            {connectionStatus !== 'success' && (\n              <p className=\"text-sm text-gray-500\">\n                Test connection first before initializing\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Status Messages */}\n      {message && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className={`p-4 rounded-lg ${\n              (connectionStatus === 'success' || initStatus === 'success') \n                ? 'bg-green-50 text-green-800 border border-green-200' \n                : 'bg-red-50 text-red-800 border border-red-200'\n            }`}>\n              <div className=\"flex items-center gap-2\">\n                {(connectionStatus === 'success' || initStatus === 'success') ? (\n                  <CheckCircle className=\"h-4 w-4\" />\n                ) : (\n                  <XCircle className=\"h-4 w-4\" />\n                )}\n                <span className=\"font-medium\">{message}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </>\n  )\n}","size_bytes":6296},"app/admin/defensoria/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Plus, Edit, Trash2, ArrowLeft, Search, FileText, Save, Upload, Download, Image, User, MessageSquare, Calendar } from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\ninterface DefensoriaContent {\n  id: string | number; // Changed to string | number to accommodate potential API responses\n  section: string\n  title: string\n  content?: string\n  image_url?: string\n  file_url?: string\n  metadata?: any\n  display_order: number\n  is_active: boolean\n  created_at: string\n  updated_at: string\n}\n\nconst SECTION_CONFIG = {\n  conoce_ley: {\n    label: 'Conoce la Ley - Documento',\n    icon: FileText,\n    description: 'Gestiona el documento PDF del botón \"Conoce la Ley\"',\n    fields: ['title', 'file']\n  },\n  defensora_profile: {\n    label: 'Perfil de la Defensora',\n    icon: User,\n    description: 'Información, foto y biografía de la Defensora de Audiencia',\n    fields: ['title', 'content', 'image']\n  },\n  recent_requests: {\n    label: 'Solicitudes Recientes',\n    icon: MessageSquare,\n    description: 'Preguntas y respuestas del carrusel de solicitudes atendidas',\n    fields: ['title', 'content', 'metadata']\n  },\n  annual_reports: {\n    label: 'Informes Anuales',\n    icon: Calendar,\n    description: 'Informes organizados por año con documentos PDF',\n    fields: ['title', 'content', 'file', 'metadata']\n  }\n}\n\nexport default function DefensoriaAdmin() {\n  const [content, setContent] = useState<DefensoriaContent[]>([])\n  const [filteredContent, setFilteredContent] = useState<DefensoriaContent[]>([])\n  const [activeTab, setActiveTab] = useState('conoce_ley')\n  const [showForm, setShowForm] = useState(false)\n  const [editingContent, setEditingContent] = useState<DefensoriaContent | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [formData, setFormData] = useState<Omit<DefensoriaContent, 'id' | 'created_at' | 'updated_at'>>({\n    section: 'conoce_ley',\n    title: '',\n    content: '',\n    image_url: '',\n    file_url: '',\n    metadata: {},\n    display_order: 0,\n    is_active: true\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [imagePreview, setImagePreview] = useState<string>('')\n  const [editingId, setEditingId] = useState<string | number | null>(null)\n\n  // New state for handling PDF and Word files specifically for Annual Reports\n  const [selectedPdfFile, setSelectedPdfFile] = useState<File | null>(null)\n  const [selectedWordFile, setSelectedWordFile] = useState<File | null>(null)\n  const [uploadMessage, setUploadMessage] = useState('')\n  const [isUploading, setIsUploading] = useState(false)\n  const [dialogMessage, setDialogMessage] = useState('')\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n\n\n  const getSectionPlaceholder = (section: string, field: string) => {\n    const placeholders: Record<string, Record<string, string>> = {\n      conoce_ley: {\n        title: 'Conoce la Ley',\n        content: 'Descripción del documento'\n      },\n      defensora_profile: {\n        title: 'Mtra. Sandra Luz Hernández Bernal',\n        content: 'Biografía de la defensora...'\n      },\n      recent_requests: {\n        title: 'Pregunta frecuente',\n        content: 'Use los campos específicos abajo'\n      },\n      annual_reports: {\n        title: 'Informe 2024',\n        content: 'Descripción del informe'\n      }\n    }\n    return placeholders[section]?.[field] || ''\n  }\n\n  useEffect(() => {\n    loadContent()\n  }, [])\n\n  // Filter content by active tab\n  useEffect(() => {\n    let filtered = content.filter(item => item.section === activeTab)\n\n    if (searchTerm) {\n      filtered = filtered.filter(item =>\n        Boolean(\n          (item.title && item.title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n          (item.content && item.content.toLowerCase().includes(searchTerm.toLowerCase()))\n        )\n      )\n    }\n\n    setFilteredContent(filtered)\n  }, [content, activeTab, searchTerm])\n\n  const loadContent = async () => {\n    setIsLoading(true)\n    try {\n      // Add a small delay to ensure database operations are complete\n      await new Promise(resolve => setTimeout(resolve, 500))\n\n      const response = await fetch('/api/defensoria-audiencia?admin=true', {\n        // Add cache-busting to ensure fresh data\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Pragma': 'no-cache',\n          'Expires': '0'\n        }\n      })\n\n      if (response.status === 401) {\n        toast({\n          title: \"Sesión expirada\",\n          description: \"Por favor, inicie sesión nuevamente\",\n          variant: \"destructive\"\n        })\n        window.location.href = '/login'\n        return\n      }\n\n      if (response.status === 403) {\n        toast({\n          title: \"Acceso denegado\",\n          description: \"No tiene permisos de administrador\",\n          variant: \"destructive\"\n        })\n        return\n      }\n\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Loaded content:', data) // Debug log\n        setContent(data)\n\n        // Force re-render of filtered content\n        setTimeout(() => {\n          setFilteredContent(data.filter((item: DefensoriaContent) => {\n            let filtered = Boolean(item.section === activeTab)\n            if (searchTerm) {\n              filtered = filtered && Boolean(\n                (item.title && item.title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                (item.content && item.content.toLowerCase().includes(searchTerm.toLowerCase()))\n              )\n            }\n            return filtered\n          }))\n        }, 100)\n\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Error al cargar el contenido\",\n          variant: \"destructive\"\n        })\n      }\n    } catch (error) {\n      console.error('Error loading content:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error de conexión al cargar el contenido\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setTimeout(() => {\n        setIsLoading(false)\n      }, 500) // Slight delay to ensure state updates\n    }\n  }\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleMetadataChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        [field]: value\n      }\n    }))\n  }\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      setSelectedFile(file)\n\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader()\n        reader.onload = (e) => {\n          setImagePreview(e.target?.result as string)\n        }\n        reader.readAsDataURL(file)\n      }\n    }\n  }\n\n  // New handler for Annual Report file selection\n  const handleAnnualReportFileChange = (e: React.ChangeEvent<HTMLInputElement>, fileType: 'pdf' | 'word') => {\n    const file = e.target.files?.[0]\n    if (file) {\n      const allowedTypes = fileType === 'pdf'\n        ? ['.pdf']\n        : ['.doc', '.docx']\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase()\n\n      if (!allowedTypes.includes(fileExtension)) {\n        setDialogMessage(`Solo se permiten archivos ${fileType === 'pdf' ? 'PDF' : 'Word (DOC, DOCX)'}`)\n        // Clear the file input\n        e.target.value = ''\n        return\n      }\n\n      if (file.size > 50 * 1024 * 1024) {\n        setDialogMessage('El archivo no puede ser mayor a 50MB')\n        // Clear the file input\n        e.target.value = ''\n        return\n      }\n\n      // Additional validation for Word files\n      if (fileType === 'word') {\n        const validMimeTypes = [\n          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'application/msword',\n          'application/octet-stream' // Sometimes .docx files are detected as this\n        ]\n\n        if (!validMimeTypes.includes(file.type) && !fileExtension.match(/\\.(doc|docx)$/)) {\n          setDialogMessage('Por favor selecciona un archivo Word válido (.doc o .docx)')\n          e.target.value = ''\n          return\n        }\n      }\n\n      if (fileType === 'pdf') {\n        setSelectedPdfFile(file)\n        setSelectedWordFile(null) // Clear word file when PDF is selected\n      } else {\n        setSelectedWordFile(file)\n        setSelectedPdfFile(null) // Clear PDF file when Word is selected\n      }\n      setDialogMessage('')\n    }\n  }\n\n  const uploadFile = async (file: File): Promise<string | { originalUrl: string, pdfUrl?: string }> => {\n    const uploadFormData = new FormData()\n    uploadFormData.append('file', file)\n    uploadFormData.append('type', 'documents')\n\n    const uploadResponse = await fetch('/api/upload', {\n      method: 'POST',\n      body: uploadFormData\n    })\n\n    if (!uploadResponse.ok) {\n      const errorText = await uploadResponse.text()\n      let errorMessage = `Error uploading ${file.name}`\n\n      try {\n        const errorJson = JSON.parse(errorText)\n        errorMessage = errorJson.error || errorMessage\n      } catch {\n        errorMessage = errorText || errorMessage\n      }\n\n      throw new Error(errorMessage)\n    }\n\n    const uploadResult = await uploadResponse.json()\n\n    if (!uploadResult.url && !uploadResult.fileUrl && !uploadResult.documentUrl) {\n      throw new Error(`No se recibió URL válida para ${file.name}`)\n    }\n\n    // Return an object with both original and PDF URLs for Word documents\n    if (uploadResult.pdfUrl && (file.name.toLowerCase().endsWith('.doc') || file.name.toLowerCase().endsWith('.docx'))) {\n      return {\n        originalUrl: uploadResult.url || uploadResult.fileUrl || uploadResult.documentUrl,\n        pdfUrl: uploadResult.pdfUrl\n      }\n    }\n\n    return uploadResult.url || uploadResult.fileUrl || uploadResult.documentUrl\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    // Generic validation for all sections\n    if (!formData.title) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor, introduce un título\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    // For recent_requests, also validate content\n    if (activeTab === 'recent_requests' && !formData.content) {\n      toast({\n        title: \"Error\", \n        description: \"Por favor, introduce el contenido de la respuesta\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    setIsLoading(true)\n    try {\n      let finalFileUrl = formData.file_url\n      let finalImageUrl = formData.image_url\n\n      // Handle file upload for sections like 'conoce_ley' or 'defensora_profile'\n      if (selectedFile) {\n        const uploadedUrl = await uploadFile(selectedFile)\n        if (typeof uploadedUrl === 'string' && uploadedUrl) {\n          if (selectedFile.type.startsWith('image/')) {\n            finalImageUrl = uploadedUrl\n          } else {\n            finalFileUrl = uploadedUrl\n          }\n        }\n      }\n\n      // Create FormData for the request\n      const submitFormData = new FormData()\n      submitFormData.append('section', activeTab)\n      submitFormData.append('title', formData.title)\n      submitFormData.append('content', formData.content || '')\n      submitFormData.append('display_order', formData.display_order.toString())\n      submitFormData.append('is_active', formData.is_active.toString())\n\n      // Add metadata\n      submitFormData.append('metadata', JSON.stringify(formData.metadata || {}))\n\n      // Add file URLs if available\n      if (finalFileUrl) {\n        submitFormData.append('file_url', finalFileUrl)\n      }\n      if (finalImageUrl) {\n        submitFormData.append('image_url', finalImageUrl)\n      }\n\n      // Add ID for updates\n      if (editingId) {\n        submitFormData.append('id', editingId.toString())\n      }\n\n      const url = '/api/defensoria-audiencia'\n      const method = editingId ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        body: submitFormData\n      })\n\n      if (response.ok) {\n        toast({\n          title: \"Éxito\",\n          description: editingId ? \"Contenido actualizado\" : \"Contenido creado\"\n        })\n\n        resetForm()\n        setShowForm(false)\n        await loadContent()\n      } else {\n        const error = await response.json()\n        toast({\n          title: \"Error\",\n          description: error.error || \"Error al guardar el contenido\",\n          variant: \"destructive\"\n        })\n      }\n    } catch (error) {\n      console.error('Error submitting form:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error de conexión\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      section: activeTab,\n      title: '',\n      content: '',\n      image_url: '',\n      file_url: '',\n      metadata: {},\n      display_order: 0,\n      is_active: true\n    })\n    setEditingContent(null)\n    setSelectedFile(null)\n    setImagePreview('')\n    setEditingId(null)\n    setShowForm(false)\n    // Reset annual report specific files and messages\n    setSelectedPdfFile(null)\n    setSelectedWordFile(null)\n    setDialogMessage('')\n    setIsDialogOpen(false)\n    setIsUploading(false)\n    setUploadMessage('')\n  }\n\n  const handleEdit = (item: DefensoriaContent) => {\n    setEditingContent(item)\n    setFormData({\n      section: item.section,\n      title: item.title || '',\n      content: item.content || '',\n      image_url: item.image_url || '',\n      file_url: item.file_url || '',\n      metadata: item.metadata || {},\n      display_order: item.display_order,\n      is_active: item.is_active\n    })\n    setSelectedFile(null)\n    setImagePreview(item.image_url || '')\n    setEditingId(item.id)\n\n    // Pre-fill annual report form fields if editing\n    if (item.section === 'annual_reports') {\n      setFormData(prev => ({\n        ...prev,\n        title: item.metadata?.year || item.title || '',\n        content: item.metadata?.description || item.content || '',\n        metadata: {\n          year: item.metadata?.year || '',\n          description: item.metadata?.description || '',\n          period: item.metadata?.period || '',\n          reportType: item.metadata?.reportType || 'Plan de Trabajo',\n          pdfUrl: item.metadata?.pdfUrl || '',\n          wordUrl: item.metadata?.wordUrl || ''\n        }\n      }))\n    }\n\n    setShowForm(true)\n  }\n\n  const handleDelete = async (id: string | number) => {\n    if (!confirm('¿Está seguro de que desea eliminar este contenido?')) {\n      return\n    }\n\n    setIsLoading(true)\n    try {\n      const response = await fetch(`/api/defensoria-audiencia?id=${id}`, {\n        method: 'DELETE'\n      })\n\n      if (response.ok) {\n        toast({\n          title: \"Éxito\",\n          description: \"Contenido eliminado\"\n        })\n        loadContent()\n      } else {\n        const error = await response.json()\n        toast({\n          title: \"Error\",\n          description: error.error || \"Error al eliminar el contenido\",\n          variant: \"destructive\"\n        })\n      }\n    } catch (error) {\n      console.error('Error deleting content:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error de conexión\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Formatter for file size\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    if (bytes === 0) return '0 Bytes'\n    const i = Math.floor(Math.log(bytes) / Math.log(1024))\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]\n  }\n\n  const renderFormFields = () => {\n    const config = SECTION_CONFIG[activeTab as keyof typeof SECTION_CONFIG]\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Title Field */}\n        <div>\n          <Label htmlFor=\"title\">\n            {activeTab === 'defensora_profile' ? 'Nombre de la Defensora' :\n             activeTab === 'conoce_ley' ? 'Nombre del Documento' :\n             activeTab === 'recent_requests' ? 'Título de la Solicitud' :\n             activeTab === 'annual_reports' ? 'Año del Informe' : 'Título'}\n          </Label>\n          <Input\n            id=\"title\"\n            value={formData.title}\n            onChange={(e) => {\n              handleInputChange('title', e.target.value);\n              // If it's an annual report, update metadata year as well\n              if (activeTab === 'annual_reports') {\n                handleMetadataChange('year', e.target.value);\n              }\n            }}\n            placeholder={\n              activeTab === 'defensora_profile' ? 'Ej: Mtra. María Gabriela Ortiz Portilla' :\n              activeTab === 'conoce_ley' ? 'Ej: Ley de Defensoría de Audiencia 2024' :\n              activeTab === 'recent_requests' ? 'Ej: Mejora en la Calidad de Audio' :\n              activeTab === 'annual_reports' ? 'Ej: 2024' : 'Título'\n            }\n            required\n          />\n        </div>\n\n        {/* Content Field */}\n        {config.fields.includes('content') && (\n          <div>\n            <Label htmlFor=\"content\">\n              {activeTab === 'defensora_profile' ? 'Biografía' :\n               activeTab === 'recent_requests' ? 'Descripción de la Solicitud' :\n               activeTab === 'annual_reports' ? 'Descripción del Informe' : 'Contenido'}\n            </Label>\n            <Textarea\n              id=\"content\"\n              value={formData.content}\n              onChange={(e) => {\n                handleInputChange('content', e.target.value)\n                // If it's an annual report, update metadata description as well\n                if (activeTab === 'annual_reports') {\n                  handleMetadataChange('description', e.target.value);\n                }\n              }}\n              placeholder={\n                activeTab === 'defensora_profile' ? 'Biografía profesional, educación, trayectoria...' :\n                activeTab === 'recent_requests' ? 'Detalle de la solicitud y cómo se atendió...' :\n                activeTab === 'annual_reports' ? 'Resumen ejecutivo del informe...' : 'Descripción'\n              }\n              rows={activeTab === 'defensora_profile' ? 8 : 4}\n            />\n          </div>\n        )}\n\n        {/* Metadata Fields for Recent Requests */}\n        {activeTab === 'recent_requests' && (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"request_type\">Tipo de Solicitud</Label>\n                <Select\n                  value={formData.metadata?.type || ''}\n                  onValueChange={(value) => handleMetadataChange('type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione tipo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Queja\">Queja</SelectItem>\n                    <SelectItem value=\"Sugerencia\">Sugerencia</SelectItem>\n                    <SelectItem value=\"Felicitaciones\">Felicitaciones</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"request_date\">Fecha de Atención</Label>\n                <Input\n                  id=\"request_date\"\n                  type=\"date\"\n                  value={formData.metadata?.date || ''}\n                  onChange={(e) => handleMetadataChange('date', e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"request_status\">Estado</Label>\n              <Select\n                value={formData.metadata?.status || ''}\n                onValueChange={(value) => handleMetadataChange('status', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleccione estado\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Resuelto\">Resuelto</SelectItem>\n                  <SelectItem value=\"En proceso\">En proceso</SelectItem>\n                  <SelectItem value=\"Pendiente\">Pendiente</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"request_description\">Acción Tomada</Label>\n              <Textarea\n                id=\"request_description\"\n                value={formData.metadata?.description || ''}\n                onChange={(e) => handleMetadataChange('description', e.target.value)}\n                placeholder=\"Descripción de las acciones implementadas para resolver la solicitud...\"\n                rows={3}\n              />\n            </div>\n          </>\n        )}\n\n        {/* Metadata Fields for Annual Reports - These fields are now handled in the Dialog */}\n        {/* The original structure had these fields here, but the new implementation uses a separate dialog.\n             We will keep this conditional rendering for completeness if other sections were to use similar metadata,\n             but for annual_reports, the dialog's form will take precedence. */}\n        {activeTab === 'annual_reports' && (\n          <>\n            {/* Year field is now handled by the 'title' input in the dialog */}\n            {/* Type of Report is now a select in the dialog */}\n            <div>\n              <Label htmlFor=\"report_period\">Período</Label>\n              <Input\n                id=\"report_period\"\n                value={formData.metadata?.period || ''}\n                onChange={(e) => handleMetadataChange('period', e.target.value)}\n                placeholder=\"Ej: Enero - Diciembre 2024\"\n              />\n            </div>\n          </>\n        )}\n\n\n        {/* File Upload - Generic handler for sections other than annual reports */}\n        {config.fields.includes('file') && activeTab !== 'annual_reports' && (\n          <div>\n            <Label htmlFor=\"file\">\n              {activeTab === 'conoce_ley' ? 'Documento PDF' : 'Archivo'}\n            </Label>\n            <Input\n              id=\"file\"\n              type=\"file\"\n              onChange={handleFileSelect}\n              accept={activeTab === 'conoce_ley' ? '.pdf' : '*'}\n            />\n            {selectedFile && !selectedFile.type.startsWith('image/') && (\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Archivo seleccionado: {selectedFile.name}\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Image Upload */}\n        {config.fields.includes('image') && (\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"image\">Foto de la Defensora</Label>\n            \n            {/* Show current image if editing */}\n            {editingContent && formData.image_url && !selectedFile && (\n              <div className=\"p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                <p className=\"text-sm font-medium text-gray-700 mb-2\">Foto actual:</p>\n                <img \n                  src={formData.image_url} \n                  alt=\"Foto actual\" \n                  className=\"max-w-xs h-32 object-cover rounded border border-gray-200\" \n                />\n              </div>\n            )}\n            \n            {/* File input */}\n            <div className=\"space-y-1\">\n              <Input\n                id=\"image\"\n                type=\"file\"\n                onChange={handleFileSelect}\n                accept=\"image/*\"\n                className=\"cursor-pointer\"\n              />\n              <p className=\"text-xs text-gray-500\">\n                {editingContent ? 'Selecciona una nueva foto para reemplazar la actual' : 'Selecciona una foto para la defensora'}\n              </p>\n            </div>\n            \n            {/* Show preview of newly selected image */}\n            {selectedFile && imagePreview && (\n              <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                <p className=\"text-sm font-medium text-green-700 mb-2\">Nueva foto seleccionada:</p>\n                <img \n                  src={imagePreview} \n                  alt=\"Vista previa\" \n                  className=\"max-w-xs h-32 object-cover rounded border border-green-300\" \n                />\n                <p className=\"text-xs text-green-600 mt-1\">✓ {selectedFile.name}</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Display Order */}\n        <div>\n          <Label htmlFor=\"display_order\">Orden de Visualización</Label>\n          <Input\n            id=\"display_order\"\n            type=\"number\"\n            value={formData.display_order}\n            onChange={(e) => handleInputChange('display_order', parseInt(e.target.value) || 0)}\n            placeholder=\"Orden (0 = primero)\"\n          />\n        </div>\n\n        {/* Active Toggle */}\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"is_active\"\n            checked={formData.is_active}\n            onCheckedChange={(checked) => handleInputChange('is_active', checked === true)}\n          />\n          <Label htmlFor=\"is_active\">Contenido activo</Label>\n        </div>\n      </div>\n    )\n  }\n\n  const getSectionBadge = (section: string) => {\n    const colors = {\n      conoce_ley: 'bg-blue-100 text-blue-800',\n      defensora_profile: 'bg-purple-100 text-purple-800',\n      recent_requests: 'bg-green-100 text-green-800',\n      annual_reports: 'bg-orange-100 text-orange-800'\n    }\n\n    return (\n      <Badge className={colors[section as keyof typeof colors] || 'bg-gray-100 text-gray-800'}>\n        {SECTION_CONFIG[section as keyof typeof SECTION_CONFIG]?.label || section}\n      </Badge>\n    )\n  }\n\n  // --- New logic for Annual Reports Dialog ---\n  const handleAnnualReportSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!formData.title || !formData.content) { // Title is year, content is description\n      setDialogMessage('Por favor completa el año y la descripción del informe')\n      return\n    }\n\n    // Require at least one file if creating a new report, or if editing and no files exist\n    const hasExistingFiles = editingContent?.metadata?.pdfUrl || editingContent?.metadata?.wordUrl;\n    if ((!selectedPdfFile && !selectedWordFile) && !hasExistingFiles) {\n        setDialogMessage('Por favor, selecciona al menos un archivo PDF o Word para el informe.');\n        return;\n    }\n\n    setIsUploading(true)\n    setDialogMessage('Subiendo archivos...')\n\n    try {\n      let pdfUrl = editingContent?.metadata?.pdfUrl || ''\n      let wordUrl = editingContent?.metadata?.wordUrl || ''\n\n      if (selectedPdfFile) {\n        try {\n          pdfUrl = await uploadFile(selectedPdfFile) as string\n          setDialogMessage('Archivo PDF subido, procesando...')\n        } catch (error) {\n          throw new Error(`Error al subir archivo PDF: ${error instanceof Error ? error.message : 'Error desconocido'}`)\n        }\n      }\n\n      if (selectedWordFile) {\n        try {\n          const uploadResult = await uploadFile(selectedWordFile)\n          // Handle both cases: string URL or object with URLs\n          if (typeof uploadResult === 'object' && uploadResult.originalUrl) {\n            wordUrl = uploadResult.originalUrl\n            // If PDF conversion was successful, also use the PDF URL\n            if (uploadResult.pdfUrl && !pdfUrl) {\n              pdfUrl = uploadResult.pdfUrl\n            }\n          } else {\n            wordUrl = uploadResult as string\n          }\n          setDialogMessage('Archivo Word subido, guardando informe...')\n        } catch (error) {\n          throw new Error(`Error al subir archivo Word: ${error instanceof Error ? error.message : 'Error desconocido'}`)\n        }\n      }\n\n      // Create FormData instead of JSON\n      const reportFormData = new FormData()\n      reportFormData.append('section', 'annual_reports')\n      reportFormData.append('title', formData.title) // Year as title\n      reportFormData.append('content', formData.content) // Description as content\n      reportFormData.append('metadata', JSON.stringify({\n        year: formData.title,\n        description: formData.content,\n        period: formData.metadata?.period || '',\n        reportType: formData.metadata?.reportType || 'Plan de Trabajo',\n        pdfUrl: pdfUrl,\n        wordUrl: wordUrl\n      }))\n      reportFormData.append('display_order', '0')\n      reportFormData.append('is_active', 'true')\n\n      // Add ID for editing\n      if (editingContent) {\n        reportFormData.append('id', editingContent.id.toString())\n      }\n\n      const url = editingContent\n        ? `/api/defensoria-audiencia`\n        : '/api/defensoria-audiencia'\n      const method = editingContent ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method: method,\n        body: reportFormData // Send FormData instead of JSON\n      })\n\n      if (response.ok) {\n        setDialogMessage(editingContent ? 'Informe anual actualizado exitosamente' : 'Informe anual creado exitosamente')\n\n        // Add a longer delay to ensure database transaction is committed\n        setTimeout(async () => {\n          setIsDialogOpen(false)\n          resetForm() // Reset form state\n          await loadContent() // Reload content with await to ensure completion\n\n          // Additional delay to ensure state is updated\n          setTimeout(() => {\n            setIsLoading(false)\n          }, 1000)\n        }, 2000) // Increased timeout to 2 seconds\n\n      } else {\n        const error = await response.json()\n        setDialogMessage(`Error al guardar el informe: ${error.error || error.message || 'Error desconocido'}`)\n      }\n    } catch (error: any) {\n      setDialogMessage(`Error al guardar el informe: ${error.message || 'Error de conexión'}`)\n    } finally {\n      // Don't set isUploading to false immediately, let the timeout handle it\n    }\n  }\n\n\n  if (showForm) {\n    const config = SECTION_CONFIG[activeTab as keyof typeof SECTION_CONFIG]\n    const Icon = config.icon\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"outline\" onClick={resetForm}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver\n          </Button>\n          <Icon className=\"w-6 h-6 text-purple-600\" />\n          <h1 className=\"text-3xl font-bold\">\n            {editingContent ? 'Editar' : 'Nuevo'} - {config.label}\n          </h1>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Icon className=\"w-5 h-5\" />\n              <span>{config.label}</span>\n            </CardTitle>\n            <CardDescription>{config.description}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit}>\n              {renderFormFields()}\n\n              <div className=\"flex justify-end space-x-2 mt-6\">\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isLoading}>\n                  {isLoading ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                      Guardando...\n                    </div>\n                  ) : (\n                    <>\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {editingId ? 'Actualizar' : 'Crear'}\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  // --- Main view displaying tabs and tables ---\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Gestión de Defensoría de Audiencia</h1>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          {Object.entries(SECTION_CONFIG).map(([key, config]) => {\n            const Icon = config.icon\n            return (\n              <TabsTrigger key={key} value={key} className=\"flex items-center space-x-2\">\n                <Icon className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">{config.label}</span>\n              </TabsTrigger>\n            )\n          })}\n        </TabsList>\n\n        {Object.entries(SECTION_CONFIG).map(([key, config]) => {\n          const Icon = config.icon\n          const sectionContent = filteredContent.filter(item => item.section === key)\n\n          // Special rendering for 'annual_reports' tab\n          if (key === 'annual_reports') {\n            const annualReports = filteredContent;\n            return (\n              <TabsContent key={key} value={key}>\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Icon className=\"w-6 h-6 text-purple-600\" />\n                        <div>\n                          <CardTitle>{config.label}</CardTitle>\n                          <CardDescription>{config.description}</CardDescription>\n                        </div>\n                      </div>\n                      <Dialog open={isDialogOpen} onOpenChange={(open) => {\n                        setIsDialogOpen(open);\n                        if (!open) {\n                          resetForm(); // Reset form when dialog closes\n                          setEditingContent(null); // Clear editing content state\n                        }\n                      }}>\n                        <DialogTrigger asChild>\n                          <Button onClick={() => { setActiveTab(key); /* No need to call setShowForm(true) here */ }}>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Agregar Informe Anual\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>\n                              {editingContent?.section === 'annual_reports' ? 'Editar Informe Anual' : 'Nuevo Informe Anual'}\n                            </DialogTitle>\n                            <DialogDescription>\n                              Crea o edita informes anuales con archivos PDF y Word\n                            </DialogDescription>\n                          </DialogHeader>\n                          <form onSubmit={handleAnnualReportSubmit}>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor=\"year\">Año del Informe *</Label>\n                                  <Input\n                                    id=\"year\"\n                                    value={formData.title} // Use title for year input\n                                    onChange={(e) => {\n                                      setFormData({ ...formData, title: e.target.value });\n                                      setDialogMessage(''); // Clear message on input change\n                                    }}\n                                    placeholder=\"2024\"\n                                    required\n                                  />\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"reportType\">Tipo de Informe</Label>\n                                  <Select\n                                    value={formData.metadata?.reportType || ''}\n                                    onValueChange={(value) => {\n                                      setFormData({ ...formData, metadata: { ...formData.metadata, reportType: value } });\n                                      setDialogMessage('');\n                                    }}\n                                  >\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Seleccione tipo\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"Plan de Trabajo\">Plan de Trabajo</SelectItem>\n                                      <SelectItem value=\"Informe Anual\">Informe Anual</SelectItem>\n                                      <SelectItem value=\"Reporte Especial\">Reporte Especial</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n\n                              <div>\n                                <Label htmlFor=\"description\">Descripción del Informe *</Label>\n                                <Textarea\n                                  id=\"description\"\n                                  value={formData.content} // Use content for description textarea\n                                  onChange={(e) => {\n                                    setFormData({ ...formData, content: e.target.value });\n                                    setDialogMessage('');\n                                  }}\n                                  placeholder=\"Resumen ejecutivo del informe...\"\n                                  rows={3}\n                                  required\n                                />\n                              </div>\n\n                              <div>\n                                <Label htmlFor=\"period\">Período</Label>\n                                <Input\n                                  id=\"period\"\n                                  value={formData.metadata?.period || ''}\n                                  onChange={(e) => {\n                                    setFormData({ ...formData, metadata: { ...formData.metadata, period: e.target.value } });\n                                    setDialogMessage('');\n                                  }}\n                                  placeholder=\"Ej: Enero - Diciembre 2024\"\n                                />\n                              </div>\n\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor=\"pdfFile\">Archivo PDF</Label>\n                                  <Input\n                                    id=\"pdfFile\"\n                                    type=\"file\"\n                                    onChange={(e) => handleAnnualReportFileChange(e, 'pdf')}\n                                    accept=\".pdf\"\n                                  />\n                                  {selectedPdfFile && (\n                                    <p className=\"text-sm text-gray-600 mt-1\">\n                                      PDF: {selectedPdfFile.name} ({formatFileSize(selectedPdfFile.size)})\n                                    </p>\n                                  )}\n                                  {/* Display existing PDF if no new PDF is selected */}\n                                  {editingContent?.metadata?.pdfUrl && !selectedPdfFile && (\n                                    <p className=\"text-sm text-green-600 mt-1\">\n                                      <a href={editingContent.metadata.pdfUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n                                        PDF actual disponible\n                                      </a>\n                                    </p>\n                                  )}\n                                </div>\n\n                                <div>\n                                  <Label htmlFor=\"wordFile\">Archivo Word</Label>\n                                  <Input\n                                    id=\"wordFile\"\n                                    type=\"file\"\n                                    onChange={(e) => handleAnnualReportFileChange(e, 'word')}\n                                    accept=\".doc,.docx\"\n                                  />\n                                  {selectedWordFile && (\n                                    <p className=\"text-sm text-gray-600 mt-1\">\n                                      Word: {selectedWordFile.name} ({formatFileSize(selectedWordFile.size)})\n                                    </p>\n                                  )}\n                                  {/* Display existing Word if no new Word is selected */}\n                                  {editingContent?.metadata?.wordUrl && !selectedWordFile && (\n                                    <p className=\"text-sm text-green-600 mt-1\">\n                                      <a href={editingContent.metadata.wordUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n                                        Word actual disponible\n                                      </a>\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n\n                            {dialogMessage && (\n                              <Alert className=\"mt-4\">\n                                <AlertDescription>{dialogMessage}</AlertDescription>\n                              </Alert>\n                            )}\n\n                            <DialogFooter className=\"mt-6\">\n                              <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                                Cancelar\n                              </Button>\n                              <Button type=\"submit\" disabled={isUploading}>\n                                <Upload className=\"h-4 w-4 mr-2\" />\n                                {isUploading ? 'Guardando...' : (editingContent?.section === 'annual_reports' ? 'Actualizar' : 'Crear')}\n                              </Button>\n                            </DialogFooter>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {/* Search for Annual Reports */}\n                    <div className=\"mb-4\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                        <Input\n                          placeholder={`Buscar en ${config.label.toLowerCase()}...`}\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"pl-10\"\n                        />\n                      </div>\n                    </div>\n\n                    {isLoading ? (\n                      <div className=\"flex justify-center items-center py-12\">\n                        <div className=\"w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                      </div>\n                    ) : annualReports.length === 0 ? (\n                      <div className=\"text-center py-12 text-gray-500\">\n                        <Icon className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                        <h3 className=\"text-lg font-medium mb-2\">No hay informes anuales</h3>\n                        <p>Agrega el primer informe anual.</p>\n                        <Dialog open={isDialogOpen} onOpenChange={(open) => {\n                          setIsDialogOpen(open);\n                          if (!open) {\n                            resetForm();\n                            setEditingContent(null);\n                          }\n                        }}>\n                          <DialogTrigger asChild>\n                            <Button className=\"mt-4\" onClick={() => setActiveTab(key)}>\n                              <Plus className=\"w-4 h-4 mr-2\" />\n                              Agregar Informe Anual\n                            </Button>\n                          </DialogTrigger>\n                          {/* Dialog content for adding new annual report - same as above */}\n                          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                            <DialogHeader>\n                              <DialogTitle>Nuevo Informe Anual</DialogTitle>\n                              <DialogDescription>Crea o edita informes anuales con archivos PDF y Word</DialogDescription>\n                            </DialogHeader>\n                            <form onSubmit={handleAnnualReportSubmit}>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                  <div>\n                                    <Label htmlFor=\"year\">Año del Informe *</Label>\n                                    <Input\n                                      id=\"year\"\n                                      value={formData.title}\n                                      onChange={(e) => {\n                                        setFormData({ ...formData, title: e.target.value });\n                                        setDialogMessage('');\n                                      }}\n                                      placeholder=\"2024\"\n                                      required\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"reportType\">Tipo de Informe</Label>\n                                    <Select\n                                      value={formData.metadata?.reportType || ''}\n                                      onValueChange={(value) => {\n                                        setFormData({ ...formData, metadata: { ...formData.metadata, reportType: value } });\n                                        setDialogMessage('');\n                                      }}\n                                    >\n                                      <SelectTrigger>\n                                        <SelectValue placeholder=\"Seleccione tipo\" />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        <SelectItem value=\"Plan de Trabajo\">Plan de Trabajo</SelectItem>\n                                        <SelectItem value=\"Informe Anual\">Informe Anual</SelectItem>\n                                        <SelectItem value=\"Reporte Especial\">Reporte Especial</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                </div>\n\n                                <div>\n                                  <Label htmlFor=\"description\">Descripción del Informe *</Label>\n                                  <Textarea\n                                    id=\"description\"\n                                    value={formData.content}\n                                    onChange={(e) => {\n                                      setFormData({ ...formData, content: e.target.value });\n                                      setDialogMessage('');\n                                    }}\n                                    placeholder=\"Resumen ejecutivo del informe...\"\n                                    rows={3}\n                                    required\n                                  />\n                                </div>\n\n                                <div>\n                                  <Label htmlFor=\"period\">Período</Label>\n                                  <Input\n                                    id=\"period\"\n                                    value={formData.metadata?.period || ''}\n                                    onChange={(e) => {\n                                      setFormData({ ...formData, metadata: { ...formData.metadata, period: e.target.value } });\n                                      setDialogMessage('');\n                                    }}\n                                    placeholder=\"Ej: Enero - Diciembre 2024\"\n                                  />\n                                </div>\n\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                  <div>\n                                    <Label htmlFor=\"pdfFile\">Archivo PDF</Label>\n                                    <Input\n                                      id=\"pdfFile\"\n                                      type=\"file\"\n                                      onChange={(e) => handleAnnualReportFileChange(e, 'pdf')}\n                                      accept=\".pdf\"\n                                    />\n                                    {selectedPdfFile && (\n                                      <p className=\"text-sm text-gray-600 mt-1\">\n                                        PDF: {selectedPdfFile.name} ({formatFileSize(selectedPdfFile.size)})\n                                      </p>\n                                    )}\n                                  </div>\n\n                                  <div>\n                                    <Label htmlFor=\"wordFile\">Archivo Word</Label>\n                                    <Input\n                                      id=\"wordFile\"\n                                      type=\"file\"\n                                      onChange={(e) => handleAnnualReportFileChange(e, 'word')}\n                                      accept=\".doc,.docx\"\n                                    />\n                                    {selectedWordFile && (\n                                      <p className=\"text-sm text-gray-600 mt-1\">\n                                        Word: {selectedWordFile.name} ({formatFileSize(selectedWordFile.size)})\n                                      </p>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n\n                              {dialogMessage && (\n                                <Alert className=\"mt-4\">\n                                  <AlertDescription>{dialogMessage}</AlertDescription>\n                                </Alert>\n                              )}\n\n                              <DialogFooter className=\"mt-6\">\n                                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                                  Cancelar\n                                </Button>\n                                <Button type=\"submit\" disabled={isUploading}>\n                                  <Upload className=\"h-4 w-4 mr-2\" />\n                                  {isUploading ? 'Guardando...' : 'Crear'}\n                                </Button>\n                              </DialogFooter>\n                            </form>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-6\">\n                        {/* Group reports by year for better organization */}\n                        {(() => {\n                          // Group annual reports by year\n                          const groupedByYear: { [year: string]: DefensoriaContent[] } = {}\n                          \n                          annualReports.forEach((item) => {\n                            const year = item.metadata?.year || item.title || 'Sin año'\n                            if (!groupedByYear[year]) {\n                              groupedByYear[year] = []\n                            }\n                            groupedByYear[year].push(item)\n                          })\n\n                          // Sort years in descending order\n                          const sortedYears = Object.keys(groupedByYear).sort((a, b) => {\n                            const yearA = parseInt(a) || 0\n                            const yearB = parseInt(b) || 0\n                            return yearB - yearA\n                          })\n\n                          return sortedYears.map((year) => (\n                            <div key={year} className=\"space-y-3\">\n                              {/* Year header */}\n                              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <Badge className=\"bg-orange-100 text-orange-800 text-lg px-3 py-1\">\n                                    {year}\n                                  </Badge>\n                                  <span className=\"text-sm text-gray-600\">\n                                    {groupedByYear[year].length} informe{groupedByYear[year].length !== 1 ? 's' : ''}\n                                  </span>\n                                </div>\n                              </div>\n\n                              {/* Reports table for this year */}\n                              <div className=\"overflow-x-auto\">\n                                <Table>\n                                  <TableHeader>\n                                    <TableRow>\n                                      <TableHead>Tipo de Informe</TableHead>\n                                      <TableHead>Descripción</TableHead>\n                                      <TableHead>Archivos</TableHead>\n                                      <TableHead>Estado</TableHead>\n                                      <TableHead>Última Actualización</TableHead>\n                                      <TableHead>Acciones</TableHead>\n                                    </TableRow>\n                                  </TableHeader>\n                                  <TableBody>\n                                    {groupedByYear[year].map((item) => (\n                                      <TableRow key={item.id as string}>\n                                        <TableCell>\n                                          <Badge className=\"bg-purple-100 text-purple-800\">\n                                            {item.metadata?.reportType || 'Plan de Trabajo'}\n                                          </Badge>\n                                        </TableCell>\n                                        <TableCell className=\"max-w-xs\">\n                                          <div>\n                                            <p className=\"font-medium truncate\">\n                                              {item.metadata?.description || item.content || 'Sin descripción'}\n                                            </p>\n                                            {item.metadata?.period && (\n                                              <p className=\"text-sm text-gray-500\">\n                                                Período: {item.metadata.period}\n                                              </p>\n                                            )}\n                                          </div>\n                                        </TableCell>\n                                        <TableCell>\n                                          <div className=\"flex space-x-2\">\n                                            {item.metadata?.pdfUrl && (\n                                              <a href={item.metadata.pdfUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                <Badge className=\"bg-red-100 text-red-800 cursor-pointer hover:bg-red-200\">\n                                                  PDF\n                                                </Badge>\n                                              </a>\n                                            )}\n                                            {item.metadata?.wordUrl && (\n                                              <a href={item.metadata.wordUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                <Badge className=\"bg-blue-100 text-blue-800 cursor-pointer hover:bg-blue-200\">\n                                                  Word\n                                                </Badge>\n                                              </a>\n                                            )}\n                                            {!item.metadata?.pdfUrl && !item.metadata?.wordUrl && (\n                                              <span className=\"text-sm text-gray-500\">Sin archivos</span>\n                                            )}\n                                          </div>\n                                        </TableCell>\n                                        <TableCell>\n                                          <Badge variant={item.is_active ? \"default\" : \"secondary\"}>\n                                            {item.is_active ? 'Activo' : 'Inactivo'}\n                                          </Badge>\n                                        </TableCell>\n                                        <TableCell>\n                                          {new Date(item.updated_at).toLocaleDateString('es-MX', {\n                                            year: 'numeric',\n                                            month: 'short',\n                                            day: 'numeric',\n                                            hour: '2-digit',\n                                            minute: '2-digit'\n                                          })}\n                                        </TableCell>\n                                        <TableCell>\n                                          <div className=\"flex space-x-2\">\n                                            <Button\n                                              size=\"sm\"\n                                              variant=\"outline\"\n                                              onClick={() => {\n                                                setEditingContent(item);\n                                                setFormData({\n                                                  section: item.section,\n                                                  title: item.metadata?.year || item.title || '',\n                                                  content: item.metadata?.description || item.content || '',\n                                                  image_url: item.image_url || '',\n                                                  file_url: item.file_url || '',\n                                                  metadata: item.metadata || {},\n                                                  display_order: item.display_order,\n                                                  is_active: item.is_active\n                                                });\n                                                setIsDialogOpen(true);\n                                              }}\n                                            >\n                                              <Edit className=\"w-4 h-4\" />\n                                            </Button>\n                                            <Button\n                                              size=\"sm\"\n                                              variant=\"outline\"\n                                              onClick={() => handleDelete(item.id)}\n                                              className=\"text-red-600 hover:text-red-700\"\n                                            >\n                                              <Trash2 className=\"w-4 h-4\" />\n                                            </Button>\n                                          </div>\n                                        </TableCell>\n                                      </TableRow>\n                                    ))}\n                                  </TableBody>\n                                </Table>\n                              </div>\n                            </div>\n                          ))\n                        })()}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            )\n          }\n\n          // Render for other tabs (original logic)\n          return (\n            <TabsContent key={key} value={key}>\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Icon className=\"w-6 h-6 text-purple-600\" />\n                      <div>\n                        <CardTitle>{config.label}</CardTitle>\n                        <CardDescription>{config.description}</CardDescription>\n                      </div>\n                    </div>\n                    <Button onClick={() => { setActiveTab(key); setShowForm(true) }}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Agregar\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {/* Search */}\n                  <div className=\"mb-4\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                      <Input\n                        placeholder={`Buscar en ${config.label.toLowerCase()}...`}\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n\n                  {isLoading ? (\n                    <div className=\"flex justify-center items-center py-12\">\n                      <div className=\"w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                    </div>\n                  ) : sectionContent.length === 0 ? (\n                    <div className=\"text-center py-12 text-gray-500\">\n                      <Icon className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                      <h3 className=\"text-lg font-medium mb-2\">No hay contenido</h3>\n                      <p>Agregue el primer elemento para {config.label.toLowerCase()}.</p>\n                      <Button className=\"mt-4\" onClick={() => { setActiveTab(key); setShowForm(true) }}>\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Agregar {config.label}\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Título</TableHead>\n                            <TableHead>Estado</TableHead>\n                            {key === 'annual_reports' && <TableHead>Año</TableHead>}\n                            {key === 'recent_requests' && <TableHead>Tipo</TableHead>}\n                            <TableHead>Última Actualización</TableHead>\n                            <TableHead>Acciones</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {sectionContent.map((item) => (\n                            <TableRow key={item.id as string}>\n                              <TableCell className=\"font-medium\">\n                                <div>\n                                  <p>{item.title}</p>\n                                  {item.content && (\n                                    <p className=\"text-sm text-gray-500 truncate max-w-xs\">\n                                      {item.content.replace(/<[^>]*>/g, '').slice(0, 60)}...\n                                    </p>\n                                  )}\n                                  {item.file_url && (\n                                    <div className=\"flex items-center mt-1\">\n                                      <FileText className=\"w-3 h-3 mr-1 text-blue-600\" />\n                                      <span className=\"text-xs text-blue-600\">Archivo adjunto</span>\n                                    </div>\n                                  )}\n                                  {item.image_url && (\n                                    <div className=\"flex items-center mt-1\">\n                                      <Image className=\"w-3 h-3 mr-1 text-green-600\" />\n                                      <span className=\"text-xs text-green-600\">Imagen adjunta</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={item.is_active ? \"default\" : \"secondary\"}>\n                                  {item.is_active ? 'Activo' : 'Inactivo'}\n                                </Badge>\n                              </TableCell>\n                              {key === 'annual_reports' && (\n                                <TableCell>\n                                  <Badge className=\"bg-orange-100 text-orange-800\">\n                                    {item.metadata?.year || 'N/A'}\n                                  </Badge>\n                                </TableCell>\n                              )}\n                              {key === 'recent_requests' && (\n                                <TableCell>\n                                  <Badge className=\"bg-blue-100 text-blue-800\">\n                                    {item.metadata?.type || 'N/A'}\n                                  </Badge>\n                                </TableCell>\n                              )}\n                              <TableCell>\n                                {new Date(item.updated_at).toLocaleDateString('es-MX', {\n                                  year: 'numeric',\n                                  month: 'short',\n                                  day: 'numeric',\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => handleEdit(item)}\n                                  >\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => handleDelete(item.id)}\n                                    className=\"text-red-600 hover:text-red-700\"\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )\n        })}\n      </Tabs>\n    </div>\n  )\n}","size_bytes":69077},"components/defensoria/defensora-profile-section.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport Image from \"next/image\"\n\ninterface DefensoriaContent {\n  id: number\n  section: string\n  title?: string\n  content?: string\n  image_url?: string\n  file_url?: string\n  metadata?: any\n  display_order: number\n  is_active: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport default function DefensoraProfileSection() {\n  const [profileData, setProfileData] = useState<DefensoriaContent | null>(null)\n\n  useEffect(() => {\n    const fetchProfileData = async () => {\n      try {\n        const response = await fetch('/api/defensoria-audiencia?section=defensora_profile')\n        if (response.ok) {\n          const data = await response.json()\n          if (data && data.length > 0) {\n            setProfileData(data[0])\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching profile data:', error)\n      }\n    }\n\n    fetchProfileData()\n  }, [])\n\n  const defensoraName = profileData?.title || \"Mtra. Sandra Luz Hernández Bernal\"\n  const defensoraBio = profileData?.content || `La Mtra. Sandra Luz Hernández Bernal es la actual Defensora de Audiencia del Canal del Congreso, \n    cargo que desempeña con dedicación y compromiso desde su nombramiento. Con una sólida formación académica y \n    amplia experiencia en el ámbito de la comunicación y los medios públicos, la Mtra. Hernández se ha destacado \n    por su labor en la protección y promoción de los derechos de las audiencias.`\n  const defensoraImage = profileData?.image_url || \"/images/defensora-photo.jpg\"\n\n  return (\n    <section \n      className=\"py-12 md:py-14 relative overflow-hidden\"\n      style={{\n        backgroundImage: \"url('/images/defensoria-gradient-background.png')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\"\n      }}\n    >\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <h2 className=\"text-center font-black text-white tracking-tight uppercase leading-tight text-[26px] sm:text-[30px] md:text-[36px] mb-8 md:mb-10 drop-shadow-lg\">\n          CONOCE A TU DEFENSORA\n        </h2>\n\n        <div className=\"mx-auto max-w-7xl\">\n          <div className=\"bg-transparent rounded-2xl overflow-hidden\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-[0.8fr_1.2fr] gap-0 min-h-[500px]\">\n              {/* Imagen - Left side */}\n              <div className=\"relative bg-transparent flex items-center justify-center p-4\">\n                <div className=\"relative w-full h-full max-w-[400px] max-h-[500px] aspect-[3/4]\">\n                  <Image\n                    src={defensoraImage}\n                    alt={defensoraName}\n                    fill\n                    className=\"object-cover object-center rounded-lg\"\n                  />\n                </div>\n              </div>\n\n              {/* Contenido - Right side */}\n              <div className=\"p-8 lg:p-12 flex flex-col justify-center text-white bg-transparent\">\n                <h3 className=\"text-[22px] md:text-[26px] font-bold text-white mb-6\">\n                  {defensoraName}\n                </h3>\n                <div className=\"text-[15px] md:text-[16px] text-white leading-relaxed space-y-4\">\n                  {defensoraBio.split('\\n\\n').map((paragraph, index) => (\n                    <p key={index}>\n                      {paragraph}\n                    </p>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}","size_bytes":3554},"app/radio/radio-styles.css":{"content":"/* Remove any default browser styling that might cause borders */\n.program-banner-container {\n  box-shadow: none !important;\n  border: none !important;\n  overflow: hidden !important;\n}\n\n.program-banner-container * {\n  box-shadow: none !important;\n  border: none !important;\n}\n\n.program-banner-image {\n  display: block !important;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover !important;\n  margin: 0 !important;\n  padding: 0 !important;\n}\n","size_bytes":466},"app/admin/programs/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Plus, Edit, Trash2, Upload, ArrowUp, ArrowDown } from \"lucide-react\"\nimport { fetchPrograms, createProgram, updateProgram, deleteProgram, reorderProgram, type Program } from \"@/lib/api-client\"\nimport Image from \"next/image\"\n\nexport default function ProgramsAdmin() {\n  const [programs, setPrograms] = useState<Program[]>([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [editingProgram, setEditingProgram] = useState<Program | null>(null)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    imageUrl: '',\n    url: ''\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [isUploading, setIsUploading] = useState(false)\n\n  useEffect(() => {\n    loadPrograms()\n  }, [])\n\n  const loadPrograms = async () => {\n    try {\n      const data = await fetchPrograms()\n      setPrograms(data)\n    } catch (error) {\n      console.error('Error loading programs:', error)\n      setPrograms([])\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsUploading(true)\n\n    try {\n      let imageUrl = formData.imageUrl\n\n      // If there's a selected file, upload it first\n      if (selectedFile) {\n        const uploadFormData = new FormData()\n        uploadFormData.append('file', selectedFile)\n\n        const uploadResponse = await fetch('/api/upload', {\n          method: 'POST',\n          body: uploadFormData\n        })\n\n        if (!uploadResponse.ok) {\n          const errorData = await uploadResponse.json()\n          throw new Error(errorData.error || 'Failed to upload image')\n        }\n\n        const uploadResult = await uploadResponse.json()\n        imageUrl = uploadResult.imageUrl\n      }\n\n      const programData = {\n        title: formData.title,\n        description: formData.description,\n        imageUrl,\n        url: formData.url || ''\n      }\n\n      if (editingProgram) {\n        await updateProgram(editingProgram.id, programData)\n      } else {\n        await createProgram(programData)\n      }\n\n      setIsDialogOpen(false)\n      setFormData({ title: '', description: '', imageUrl: '', url: '' })\n      setSelectedFile(null)\n      loadPrograms()\n    } catch (error) {\n      console.error('Error saving program:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'\n      alert(`Error al guardar el programa: ${errorMessage}`)\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const handleEdit = (program: Program) => {\n    setEditingProgram(program)\n    setFormData({\n      title: program.title,\n      description: program.description,\n      imageUrl: program.imageUrl,\n      url: program.url || ''\n    })\n    setSelectedFile(null)\n    setIsDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar este programa?')) {\n      try {\n        await deleteProgram(id)\n        loadPrograms()\n      } catch (error) {\n        console.error('Error deleting program:', error)\n        alert('Error al eliminar el programa')\n      }\n    }\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setSelectedFile(file)\n      // Create preview URL\n      const previewUrl = URL.createObjectURL(file)\n      setFormData({ ...formData, imageUrl: previewUrl })\n    }\n  }\n\n  const handleReorder = async (programId: string, direction: 'up' | 'down') => {\n    try {\n      await reorderProgram(programId, direction)\n      loadPrograms() // Reload to show new order\n    } catch (error) {\n      console.error('Error reordering program:', error)\n      alert('Error al reordenar el programa')\n    }\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Programación</h1>\n          <p className=\"text-gray-600\">Gestiona los programas de televisión</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => {\n              setEditingProgram(null)\n              setFormData({ title: '', description: '', imageUrl: '', url: '' })\n              setSelectedFile(null)\n            }}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Programa\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"sm:max-w-[425px] bg-white\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProgram ? 'Editar Programa' : 'Nuevo Programa'}\n              </DialogTitle>\n              <DialogDescription>\n                Completa la información del programa.\n              </DialogDescription>\n            </DialogHeader>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Título</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Descripción</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"imageFile\">Imagen del Programa</Label>\n                <div className=\"space-y-2\">\n                  <Input\n                    id=\"imageFile\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                    required={!editingProgram && !formData.imageUrl}\n                  />\n                  {formData.imageUrl && (\n                    <div className=\"mt-2\">\n                      <p className=\"text-sm text-gray-600 mb-2\">Vista previa:</p>\n                      <Image\n                        src={formData.imageUrl}\n                        alt=\"Vista previa\"\n                        width={100}\n                        height={60}\n                        className=\"rounded object-cover border\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"url\">URL</Label>\n                <Input\n                  id=\"url\"\n                  value={formData.url}\n                  onChange={(e) => setFormData({ ...formData, url: e.target.value })}\n                  required\n                />\n              </div>\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isUploading}>\n                  {isUploading ? (\n                    <>\n                      <Upload className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Subiendo...\n                    </>\n                  ) : (\n                    editingProgram ? 'Actualizar' : 'Crear'\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Programas</CardTitle>\n          <CardDescription>\n            {programs.length} programas configurados\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Orden</TableHead>\n                <TableHead>Imagen</TableHead>\n                <TableHead>Título</TableHead>\n                <TableHead>Descripción</TableHead>\n                <TableHead>URL</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {programs.map((program, index) => (\n                <TableRow key={program.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleReorder(program.id, 'up')}\n                        disabled={index === 0}\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <ArrowUp className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleReorder(program.id, 'down')}\n                        disabled={index === programs.length - 1}\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <ArrowDown className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Image\n                      src={program.imageUrl}\n                      alt={program.title}\n                      width={60}\n                      height={40}\n                      className=\"rounded object-cover\"\n                    />\n                  </TableCell>\n                  <TableCell className=\"font-medium\">{program.title}</TableCell>\n                  <TableCell>{program.description}</TableCell>\n                  <TableCell>{program.url}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(program)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(program.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":11123},"components/news-submenu.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nconst menuItems = [\n  { label: \"Inicio\", href: \"/noticias\" },\n  {\n    label: \"Todas las Noticias\",\n    href: \"/noticias/todas\",\n  },\n  {\n    label: \"Foros y seminarios\",\n    href: \"/noticias/categorias/foros-y-seminarios\",\n  },\n  {\n    label: \"Reformas aprobadas\",\n    href: \"/noticias/categorias/reformas-aprobadas\",\n  },\n  {\n    label: \"Temas de actualidad\",\n    href: \"/noticias/categorias/temas-de-actualidad\",\n  },\n  {\n    label: \"Trabajo en comisiones\",\n    href: \"/noticias/categorias/trabajo-en-comisiones\",\n  },\n  { label: \"Reformas en DOF\", href: \"/noticias/categorias/reformas-en-dof\" },\n  {\n    label: \"Trabajos en pleno\",\n    href: \"/noticias/categorias/trabajos-en-pleno\",\n  },\n];\n\nexport default function NewsSubmenu() {\n  const pathname = usePathname();\n\n  return (\n    <nav className=\"w-full bg-[#c41c5c]\">\n      <div className=\"px-4 py-2 md:px-8 max-w-7xl mx-auto\">\n        <div className=\"flex flex-wrap items-center justify-center gap-1 md:gap-2\">\n          {menuItems.map((item) => {\n            const isActive =\n              pathname === item.href || pathname?.startsWith(`${item.href}/`);\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`\n                  whitespace-nowrap px-3 py-1 md:px-4 md:py-1 text-white text-xs md:text-base font-medium\n                  transition-colors duration-200 hover:bg-[#a01a4d] hover:text-white rounded\n                  ${isActive ? \"bg-[#a01a4d] text-white\" : \"\"}\n                `}\n              >\n                {item.label}\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":1763},"app/api/legislators/estados/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getDatabaseConnection } from '@/lib/database'\n\nexport async function GET() {\n  try {\n    const pool = getDatabaseConnection()\n    \n    if (!pool) {\n      return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n    }\n\n    const result = await pool.query(`\n      SELECT DISTINCT state \n      FROM legislators \n      WHERE state IS NOT NULL AND state != ''\n      ORDER BY state\n    `)\n\n    const estados = result.rows.map(row => row.state)\n\n    return NextResponse.json({\n      estados,\n      total: estados.length\n    })\n  } catch (error) {\n    console.error('Error fetching estados:', error)\n    return NextResponse.json({ error: 'Failed to fetch estados' }, { status: 500 })\n  }\n}\n","size_bytes":768},"app/transparencia/compromisos/informacion/page.tsx":{"content":"import Link from \"next/link\"\nimport Footer from \"@/components/footer\"\n\nexport default function InformacionPage() {\n  return (\n    <>\n      {/* Header Section */}\n      <section className=\"bg-gradient-to-r from-purple-700 to-purple-600 py-12\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex items-center gap-6\">\n            {/* Icon */}\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-24 h-24 rounded-full border-4 border-white bg-purple-600/50 flex items-center justify-center\">\n                <svg className=\"w-12 h-12 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                </svg>\n              </div>\n            </div>\n            \n            {/* Title */}\n            <div>\n              <h1 className=\"text-4xl md:text-5xl font-bold text-white\">\n                INFORMACIÓN DE\n              </h1>\n              <h1 className=\"text-4xl md:text-5xl font-bold text-white\">\n                UTILIDAD PÚBLICA\n              </h1>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Cards Section */}\n      <main className=\"min-h-screen bg-gradient-to-br from-gray-50 to-purple-50 py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            \n            {/* Card 1 - Defensor de Audiencias */}\n            <div className=\"group\">\n              <div className=\"bg-gradient-to-br from-purple-700 to-purple-900 rounded-3xl p-8 text-white shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2\">\n                {/* Badge */}\n                <div className=\"inline-block bg-purple-500 rounded-full px-6 py-2 mb-6\">\n                  <h3 className=\"text-sm font-bold tracking-wide\">DEFENSOR DE AUDIENCIAS</h3>\n                </div>\n                \n                {/* Content */}\n                <div className=\"mb-8 min-h-[280px]\">\n                  <p className=\"text-white/90 leading-relaxed\">\n                    La principal función del Defensor de Audiencia; es recibir, documentar, procesar y dar seguimiento a las observaciones, quejas, sugerencias, peticiones o señalamientos que formulen las personas que componen la audiencia, en materia de contenidos y programación del Canal del Congreso.\n                  </p>\n                </div>\n                \n                {/* Button */}\n                <Link \n                  href=\"/defensoria-audiencia\"\n                  className=\"inline-flex items-center gap-2 bg-white/20 hover:bg-white/30 backdrop-blur-sm border-2 border-white/40 text-white font-semibold py-3 px-6 rounded-full transition-all duration-300 group-hover:scale-105\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                  </svg>\n                  <span>Entra aquí</span>\n                </Link>\n              </div>\n            </div>\n\n            {/* Card 2 - Autonomía Técnica */}\n            <div className=\"group\">\n              <div className=\"bg-gradient-to-br from-purple-700 to-purple-900 rounded-3xl p-8 text-white shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2\">\n                {/* Badge */}\n                <div className=\"inline-block bg-purple-500 rounded-full px-6 py-2 mb-6\">\n                  <h3 className=\"text-sm font-bold tracking-wide\">AUTONOMÍA TÉCNICA Y DE GESTIÓN</h3>\n                </div>\n                \n                {/* Content */}\n                <div className=\"mb-8 min-h-[280px]\">\n                  <p className=\"text-white/90 leading-relaxed\">\n                    A fin de dar cumplimiento a lo señalado en el artículo 86 de la Ley Federal de Telecomunicaciones y Radiodifusión, que impone obligaciones a los Concesionarios de Uso Público, se reformaron los artículos 140 y 141 de la Ley Orgánica del Congreso General de los Estados Unidos Mexicanos, así como el Reglamento del Canal del Congreso.\n                  </p>\n                </div>\n                \n                {/* Button */}\n                <Link \n                  href=\"/transparencia/compromisos/informacion/autonomia\"\n                  className=\"inline-flex items-center gap-2 bg-white/20 hover:bg-white/30 backdrop-blur-sm border-2 border-white/40 text-white font-semibold py-3 px-6 rounded-full transition-all duration-300 group-hover:scale-105\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                  </svg>\n                  <span>Entra aquí</span>\n                </Link>\n              </div>\n            </div>\n\n            {/* Card 3 - Adquisiciones */}\n            <div className=\"group\">\n              <div className=\"bg-gradient-to-br from-purple-700 to-purple-900 rounded-3xl p-8 text-white shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2\">\n                {/* Badge */}\n                <div className=\"inline-block bg-purple-500 rounded-full px-6 py-2 mb-6\">\n                  <h3 className=\"text-sm font-bold tracking-wide\">ADQUISICIONES</h3>\n                </div>\n                \n                {/* Content */}\n                <div className=\"mb-8 min-h-[280px]\">\n                  <p className=\"text-white/90 leading-relaxed\">\n                    Aquí encontrará información sobre las principales adquisiciones efectuadas durante los ejercicios fiscales, por el Canal del Congreso en la Cámara de Senadores.\n                  </p>\n                  <p className=\"text-white/90 leading-relaxed mt-4\">\n                    Aquí encontrará información sobre las principales adquisiciones efectuadas durante los ejercicios fiscales, por el Canal del Congreso en la Cámara de Diputados.\n                  </p>\n                </div>\n                \n                {/* Button */}\n                <Link \n                  href=\"/transparencia/compromisos/informacion/adquisiciones\"\n                  className=\"inline-flex items-center gap-2 bg-white/20 hover:bg-white/30 backdrop-blur-sm border-2 border-white/40 text-white font-semibold py-3 px-6 rounded-full transition-all duration-300 group-hover:scale-105\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                  </svg>\n                  <span>Entra aquí</span>\n                </Link>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </>\n  )\n}\n","size_bytes":7150},"components/ui/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"app/defensoria-audiencia/page.tsx":{"content":"\"use client\";\n\nimport Image from \"next/image\";\nimport Footer from \"@/components/footer\";\nimport ContactModal from \"@/components/defensoria/contact-modal\";\nimport SolicitudesCarousel from \"@/components/SolicitudesCarousel\";\nimport DefensoraProfileSection from \"@/components/defensoria/defensora-profile-section\";\nimport RecentRequestsSection from \"@/components/defensoria/recent-requests-section\";\nimport ConoceLaLeyButton from \"@/components/defensoria/conoce-la-ley-button\";\nimport dynamic from \"next/dynamic\";\n\n// Disable SSR for AnnualReportsSection to prevent hydration mismatch\nconst AnnualReportsSection = dynamic(() => import(\"@/components/defensoria/annual-reports-section\"), { ssr: false });\n\nexport default function DefensoriaAudienciaPage() {\n  return (\n    <>\n      <main className=\"min-h-screen\">\n        {/* ===================== HERO ===================== */}\n        <section className=\"relative w-full h-[900px] md:h-[800px] lg:h-[900px] overflow-hidden\">\n          {/* Fondo + overlay */}\n          <Image\n            src=\"/images/defensoria-fondo-header.png\"\n            alt=\"Fondo Defensoría de Audiencia\"\n            fill\n            className=\"object-cover\"\n            priority\n          />\n          <div className=\"absolute inset-0 bg-[#4f148c]/88\" />\n\n          {/* Contenido */}\n          <div className=\"absolute inset-0 z-10 flex flex-col items-center justify-center text-white px-4\">\n            {/* Logo */}\n            <div className=\"mb-4 md:mb-6\">\n              <Image\n                src=\"/images/defensoria-logo.png\"\n                alt=\"Defensoría de Audiencia\"\n                width={360}\n                height={180}\n                className=\"w-[220px] md:w-[320px] lg:w-[400px] h-auto\"\n                priority\n              />\n            </div>\n\n            {/* Título + subtítulo */}\n            <div className=\"text-center px-4\">\n              <h1 className=\"font-black tracking-tight drop-shadow-xl text-[60px] sm:text-[70px] md:text-[80px] lg:text-[100px] xl:text-[120px] leading-[0.85] mb-2\">\n                ¡TU VOZ IMPORTA!\n              </h1>\n              <p className=\"text-[24px] sm:text-[26px] md:text-[28px] lg:text-[30px] font-normal drop-shadow-lg opacity-95\">\n                Comparte con nosotros tus comentarios\n              </p>\n            </div>\n\n            {/* Botones (píldora 160×44) */}\n            <div className=\"mt-6 md:mt-8 flex flex-col sm:flex-row items-center justify-center gap-4 md:gap-6\">\n              <ContactModal type=\"Queja\">\n                <button\n                  type=\"button\"\n                  aria-haspopup=\"dialog\"\n                  className=\"w-[180px] h-[50px] rounded-full bg-purple-400 hover:bg-purple-500 text-white text-[16px] font-bold shadow-lg transition-all duration-200\"\n                  style={{ backgroundColor: \"#b47bc7\" }}\n                >\n                  Quejas\n                </button>\n              </ContactModal>\n              <ContactModal type=\"Sugerencia\">\n                <button\n                  type=\"button\"\n                  aria-haspopup=\"dialog\"\n                  className=\"w-[180px] h-[50px] rounded-full bg-purple-400 hover:bg-purple-500 text-white text-[16px] font-bold shadow-lg transition-all duration-200\"\n                  style={{ backgroundColor: \"#b47bc7\" }}\n                >\n                  Sugerencias\n                </button>\n              </ContactModal>\n              <ContactModal type=\"Felicitaciones\">\n                <button\n                  type=\"button\"\n                  aria-haspopup=\"dialog\"\n                  className=\"w-[180px] h-[50px] rounded-full bg-purple-400 hover:bg-purple-500 text-white text-[16px] font-bold shadow-lg transition-all duration-200\"\n                  style={{ backgroundColor: \"#b47bc7\" }}\n                >\n                  Felicitaciones\n                </button>\n              </ContactModal>\n            </div>\n\n            {/* Redes: fila centrada, íconos 28px */}\n            <div className=\"mt-12 md:mt-16 flex items-center justify-center gap-5 md:gap-6\">\n              {[\n                {\n                  href: \"https://www.facebook.com/share/16ZPgemiKV/?mibextid=wwXIfr\",\n                  label: \"Facebook\",\n                  path: \"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\",\n                },\n                {\n                  href: \"https://x.com/defensoriacanal?s=21\",\n                  label: \"X\",\n                  path: \"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\",\n                },\n                {\n                  href: \"https://www.instagram.com/defensoriacanalmx?igsh=Zmc5d21laW84MWZ4&utm_source=qr\",\n                  label: \"Instagram\",\n                  path: \"M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z\",\n                },\n                {\n                  href: \"https://youtube.com/@defensoriadeaudienciacanal5590?si=ODRuPtkx3wFkH2AJ\",\n                  label: \"YouTube\",\n                  path: \"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\",\n                },\n                {\n                  href: \"https://www.tiktok.com/@defensoriacongresomx?_t=ZS-8ze8m5kkjV1&_r=1\",\n                  label: \"TikTok\",\n                  path: \"M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z\",\n                },\n                {\n                  href: \"https://open.spotify.com/show/defensoriacanal\",\n                  label: \"Spotify\",\n                  path: \"M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z\",\n                },\n              ].map((s, i) => (\n                <a\n                  key={i}\n                  href={s.href}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  aria-label={s.label}\n                  className=\"text-white/95 hover:text-white\"\n                >\n                  <svg\n                    className=\"w-7 h-7\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d={s.path} />\n                  </svg>\n                </a>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* ===================== ¿QUÉ HACE…? ===================== */}\n        <section\n          className=\"relative py-12 md:py-14\"\n          style={{\n            backgroundImage:\n              \"url('/images/defensoria-micrositio-fondo-new.png')\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }}\n        >\n          <div className=\"container mx-auto px-4 md:px-6\">\n            <h2 className=\"text-center font-black text-[#4f148c] tracking-tight uppercase leading-tight text-[26px] sm:text-[30px] md:text-[36px] mb-8 md:mb-10\">\n              ¿QUÉ HACE LA DEFENSORÍA\n              <br className=\"hidden sm:block\" /> DE AUDIENCIAS POR TI?\n            </h2>\n\n            <div className=\"mx-auto max-w-6xl grid grid-cols-1 md:grid-cols-3 gap-5 md:gap-7\">\n              {/* Card 1 */}\n              <div className=\"rounded-2xl bg-gray-100 shadow-[0_6px_20px_rgba(0,0,0,0.07)] border border-[#7d4bcd] p-6 text-center\">\n                <div className=\"flex justify-center mb-4\">\n                  <Image\n                    src=\"/images/defensoria-icono-1.png\"\n                    alt=\"Recibir\"\n                    width={200}\n                    height={200}\n                    className=\"w-auto h-auto\"\n                  />\n                </div>\n                <h3 className=\"text-[16px] md:text-[17px] font-extrabold text-[#262626] leading-snug\">\n                  Recibir documentar y procesar\n                  <br />\n                  tus observaciones,\n                  <br />\n                  quejas y sugerencias\n                </h3>\n              </div>\n\n              {/* Card 2 con divisores laterales */}\n              <div className=\"relative rounded-2xl bg-gray-100 shadow-[0_6px_20px_rgba(0,0,0,0.07)] border border-[#7d4bcd] p-6 text-center\">\n                <span className=\"hidden md:block absolute -left-4 top-6 bottom-6 w-[2px] bg-[#7d4bcd] opacity-60\" />\n                <span className=\"hidden md:block absolute -right-4 top-6 bottom-6 w-[2px] bg-[#7d4bcd] opacity-60\" />\n                <div className=\"flex justify-center mb-4\">\n                  <Image\n                    src=\"/images/defensoria-icono-2.png\"\n                    alt=\"Representar\"\n                    width={200}\n                    height={200}\n                    className=\"w-auto h-auto\"\n                  />\n                </div>\n                <h3 className=\"text-[16px] md:text-[17px] font-extrabold text-[#262626] leading-snug\">\n                  Representar tus intereses\n                  <br />\n                  cuando haces alguna\n                  <br />\n                  solicitud\n                </h3>\n              </div>\n\n              {/* Card 3 */}\n              <div className=\"rounded-2xl bg-gray-100 shadow-[0_6px_20px_rgba(0,0,0,0.07)] border border-[#7d4bcd] p-6 text-center\">\n                <div className=\"flex justify-center mb-4\">\n                  <Image\n                    src=\"/images/defensoria-icono-3.png\"\n                    alt=\"Promover\"\n                    width={200}\n                    height={200}\n                    className=\"w-auto h-auto\"\n                  />\n                </div>\n                <h3 className=\"text-[16px] md:text-[17px] font-extrabold text-[#262626] leading-snug\">\n                  Promover y proteger\n                  <br />\n                  tus derechos en temas\n                  <br />\n                  de audiencia\n                </h3>\n              </div>\n            </div>\n\n            {/* Botón Conoce la Ley (chico) */}\n            <div className=\"text-center mt-10\">\n              <ConoceLaLeyButton />\n            </div>\n          </div>\n        </section>\n\n        {/* ===================== CONOCE A TU DEFENSORA ===================== */}\n        <DefensoraProfileSection />\n\n        {/* ===================== RECIENTES SOLICITUDES ===================== */}\n        <RecentRequestsSection />\n\n        {/* ===================== INFORMES Y REPORTES ===================== */}\n        <AnnualReportsSection />\n      </main>\n      <Footer />\n    </>\n  );\n}\n","size_bytes":12957},"components/twitter-feed.tsx":{"content":"\nimport React from 'react'\n\ninterface TwitterFeedProps {\n  className?: string\n}\n\nconst TwitterFeed: React.FC<TwitterFeedProps> = ({ className }) => {\n  return (\n    <div className={className}>\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n        <h2 className=\"bg-purple-900 text-white px-4 py-2 font-bold uppercase text-sm\">\n          Twitter Feed\n        </h2>\n        <div className=\"p-4\">\n          <div className=\"space-y-4\">\n            <div className=\"border-b border-gray-200 pb-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                  <span className=\"text-purple-600 font-bold text-sm\">CC</span>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <span className=\"font-medium text-gray-900\">Canal del Congreso</span>\n                    <span className=\"text-gray-500 text-sm\">@CanalCongreso</span>\n                    <span className=\"text-gray-500 text-sm\">·</span>\n                    <span className=\"text-gray-500 text-sm\">2h</span>\n                  </div>\n                  <p className=\"text-gray-700 text-sm\">\n                    Mantente informado sobre las últimas actividades del Congreso de México. \n                    Transmisiones en vivo y contenido oficial.\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500 text-sm\">\n                El feed de Twitter se mostrará aquí cuando esté configurado\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TwitterFeed\n","size_bytes":1836},"scripts/check-postgres-version.js":{"content":"\nconst { Pool } = require('pg');\n\nasync function checkPostgresVersion() {\n  // Check if DATABASE_URL is set\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL environment variable is not set');\n    process.exit(1);\n  }\n\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }\n  });\n\n  try {\n    console.log('Checking PostgreSQL version...');\n    \n    // Query the version\n    const result = await pool.query('SELECT version()');\n    const versionInfo = result.rows[0].version;\n    \n    console.log('✅ PostgreSQL Version Information:');\n    console.log(`📊 ${versionInfo}`);\n    \n    // Extract just the version number\n    const versionMatch = versionInfo.match(/PostgreSQL (\\d+\\.\\d+(?:\\.\\d+)?)/);\n    if (versionMatch) {\n      console.log(`🔢 Version: ${versionMatch[1]}`);\n    }\n    \n    // Also check server version number\n    const versionNumResult = await pool.query('SHOW server_version_num');\n    const versionNum = versionNumResult.rows[0].server_version_num;\n    console.log(`🏷️  Version Number: ${versionNum}`);\n    \n  } catch (error) {\n    console.error('❌ Error checking PostgreSQL version:', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Run the version check\ncheckPostgresVersion();\n","size_bytes":1355},"components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"app/api/admin/init-db/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST() {\n  try {\n    const pool = createDatabaseConnectionFromEnv()\n\n    // Create programs table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS programs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        url TEXT,\n        order_index INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Add order_index column if it doesn't exist (for existing tables)\n    await pool.query(`\n      DO $$ \n      BEGIN \n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'programs' AND column_name = 'order_index'\n        ) THEN\n          ALTER TABLE programs ADD COLUMN order_index INTEGER DEFAULT 0;\n        END IF;\n      END $$;\n    `)\n\n    // Add url column if it doesn't exist (for existing tables)\n    await pool.query(`\n      DO $$ \n      BEGIN \n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'programs' AND column_name = 'url'\n        ) THEN\n          ALTER TABLE programs ADD COLUMN url TEXT;\n        END IF;\n      END $$;\n    `)\n\n    console.log('Programs table url column check completed')\n\n    // Update existing programs with proper order_index values if they're null or 0\n    await pool.query(`\n      WITH ordered_programs AS (\n        SELECT id, ROW_NUMBER() OVER (ORDER BY created_at) - 1 as new_order\n        FROM programs \n        WHERE order_index IS NULL OR order_index = 0\n      )\n      UPDATE programs \n      SET order_index = ordered_programs.new_order\n      FROM ordered_programs \n      WHERE programs.id = ordered_programs.id\n    `)\n\n    // Create live_streams table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS live_streams (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        thumbnail_url TEXT,\n        stream_url TEXT NOT NULL,\n        channel VARCHAR(50),\n        is_live BOOLEAN DEFAULT false,\n        status VARCHAR(20) DEFAULT 'offline',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Add channel column if it doesn't exist (for existing tables)\n    await pool.query(`\n      DO $$ \n      BEGIN \n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'live_streams' AND column_name = 'channel'\n        ) THEN\n          ALTER TABLE live_streams ADD COLUMN channel VARCHAR(50);\n        END IF;\n      END $$;\n    `)\n\n    // Add status column if it doesn't exist (for existing tables)\n    await pool.query(`\n      DO $$ \n      BEGIN \n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'live_streams' AND column_name = 'status'\n        ) THEN\n          ALTER TABLE live_streams ADD COLUMN status VARCHAR(20) DEFAULT 'offline';\n        END IF;\n      END $$;\n    `)\n\n    // Sync status with is_live for existing rows\n    await pool.query(`\n      UPDATE live_streams \n      SET status = CASE WHEN is_live THEN 'live' ELSE 'offline' END \n      WHERE status IS NULL OR status NOT IN ('live','offline','recess','signal_open')\n    `)\n\n    // Create news table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS news (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        summary TEXT,\n        content TEXT,\n        image_url TEXT,\n        category VARCHAR(100),\n        published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Add category column if it doesn't exist (for existing tables)\n    await pool.query(`\n      DO $$ \n      BEGIN \n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'news' AND column_name = 'category'\n        ) THEN\n          ALTER TABLE news ADD COLUMN category VARCHAR(100);\n        END IF;\n      END $$;\n    `)\n\n    // Create video_news table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS video_news (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        video_url TEXT NOT NULL,\n        thumbnail_url TEXT,\n        category VARCHAR(100),\n        duration VARCHAR(20),\n        published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        status VARCHAR(20) DEFAULT 'published' CHECK (status IN ('draft', 'published', 'scheduled', 'archived')),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create organs table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS organs (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        image_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Create radio_episodes table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_episodes (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        audio_url TEXT NOT NULL,\n        duration VARCHAR(50),\n        publish_date DATE,\n        image_url TEXT,\n        program_id INTEGER REFERENCES radio_programs(id) ON DELETE CASCADE,\n        published BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n\n    // Verify tables were created\n    const tablesResult = await pool.query(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      ORDER BY table_name\n    `)\n    \n    const createdTables = tablesResult.rows.map(row => row.table_name)\n    \n    await pool.end()\n\n    return NextResponse.json({ \n      message: 'All database tables created successfully',\n      tables: ['programs', 'live_streams', 'news', 'organs'],\n      actualTables: createdTables\n    })\n  } catch (error) {\n    console.error('Error initializing database:', error)\n    return NextResponse.json(\n      { error: 'Failed to initialize database tables', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":6493},"app/admin/smtp-config/smtp-config-client.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { CheckCircle, XCircle, AlertTriangle } from \"lucide-react\"\n\ninterface SmtpConfig {\n  host: string\n  port: string\n  secure: boolean\n  user: string\n  pass: string\n  from: string\n  to: string\n}\n\nexport function SmtpConfigClient() {\n  const [smtpConfig, setSmtpConfig] = useState<SmtpConfig>({\n    host: \"\",\n    port: \"587\",\n    secure: false,\n    user: \"\",\n    pass: \"\",\n    from: \"\",\n    to: \"\",\n  })\n\n  const [status, setStatus] = useState<{\n    type: \"idle\" | \"loading\" | \"success\" | \"error\"\n    message: string\n  }>({\n    type: \"idle\",\n    message: \"\",\n  })\n\n  const [testStatus, setTestStatus] = useState<{\n    type: \"idle\" | \"testing\" | \"success\" | \"error\"\n    message: string\n  }>({\n    type: \"idle\",\n    message: \"\",\n  })\n\n  useEffect(() => {\n    loadSmtpConfig()\n  }, [])\n\n  const loadSmtpConfig = async () => {\n    try {\n      const response = await fetch(\"/api/smtp/config\")\n      if (response.ok) {\n        const config = await response.json()\n        setSmtpConfig(config)\n      }\n    } catch (error) {\n      console.error(\"Error loading SMTP config:\", error)\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target\n    setSmtpConfig((prev) => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setStatus({ type: \"loading\", message: \"Guardando configuración...\" })\n\n    // Validation\n    if (!smtpConfig.host || !smtpConfig.port || !smtpConfig.user || !smtpConfig.from || !smtpConfig.to) {\n      setStatus({\n        type: \"error\",\n        message: \"Todos los campos son requeridos.\",\n      })\n      return\n    }\n\n    try {\n      const response = await fetch(\"/api/smtp/config\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(smtpConfig),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        setStatus({\n          type: \"success\",\n          message: \"Configuración SMTP guardada correctamente.\",\n        })\n        // Reload config to get masked password\n        loadSmtpConfig()\n      } else {\n        setStatus({\n          type: \"error\",\n          message: result.message || \"Error al guardar la configuración SMTP.\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error saving SMTP config:\", error)\n      setStatus({\n        type: \"error\",\n        message: \"Error de conexión al guardar la configuración SMTP.\",\n      })\n    }\n  }\n\n  const handleTestEmail = async () => {\n    setTestStatus({ type: \"testing\", message: \"Enviando email de prueba...\" })\n\n    // Validate that we have the required config\n    if (!smtpConfig.host || !smtpConfig.user || !smtpConfig.from || !smtpConfig.to) {\n      setTestStatus({\n        type: \"error\",\n        message: \"Configuración SMTP incompleta. Guarda la configuración primero.\",\n      })\n      return\n    }\n\n    try {\n      const response = await fetch(\"/api/smtp/test\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          nombre: \"Sistema de Prueba\",\n          email: smtpConfig.from,\n          asunto: \"Email de prueba - Configuración SMTP\",\n          mensaje: \"Este es un email de prueba para verificar que la configuración SMTP está funcionando correctamente.\",\n          telefono: \"\",\n          empresa: \"Canal del Congreso\",\n          puesto: \"Sistema\",\n          ciudad: \"\",\n          estado: \"\",\n        }),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        setTestStatus({\n          type: \"success\",\n          message: \"Email de prueba enviado correctamente.\",\n        })\n      } else {\n        setTestStatus({\n          type: \"error\",\n          message: result.message || \"Error al enviar el email de prueba.\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error testing email:\", error)\n      setTestStatus({\n        type: \"error\",\n        message: \"Error de conexión al probar el email.\",\n      })\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Configuration Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Configuración del Servidor SMTP</CardTitle>\n          <CardDescription>\n            Configure los parámetros del servidor de correo para el envío de formularios de contacto\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"host\">Servidor SMTP</Label>\n                <Input\n                  id=\"host\"\n                  name=\"host\"\n                  type=\"text\"\n                  value={smtpConfig.host}\n                  onChange={handleChange}\n                  placeholder=\"smtp.gmail.com\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"port\">Puerto</Label>\n                <Input\n                  id=\"port\"\n                  name=\"port\"\n                  type=\"number\"\n                  value={smtpConfig.port}\n                  onChange={handleChange}\n                  placeholder=\"587\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"user\">Usuario/Email</Label>\n                <Input\n                  id=\"user\"\n                  name=\"user\"\n                  type=\"email\"\n                  value={smtpConfig.user}\n                  onChange={handleChange}\n                  placeholder=\"your-email@gmail.com\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"pass\">Contraseña</Label>\n                <Input\n                  id=\"pass\"\n                  name=\"pass\"\n                  type=\"password\"\n                  value={smtpConfig.pass}\n                  onChange={handleChange}\n                  placeholder=\"••••••••\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"from\">Email Remitente</Label>\n                <Input\n                  id=\"from\"\n                  name=\"from\"\n                  type=\"email\"\n                  value={smtpConfig.from}\n                  onChange={handleChange}\n                  placeholder=\"notificaciones@canaldelcongreso.gob.mx\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"to\">Email Destino</Label>\n                <Input\n                  id=\"to\"\n                  name=\"to\"\n                  type=\"email\"\n                  value={smtpConfig.to}\n                  onChange={handleChange}\n                  placeholder=\"contacto@canaldelcongreso.gob.mx\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <input\n                id=\"secure\"\n                name=\"secure\"\n                type=\"checkbox\"\n                checked={smtpConfig.secure}\n                onChange={handleChange}\n                className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n              />\n              <Label htmlFor=\"secure\">Usar conexión SSL/TLS segura</Label>\n            </div>\n\n            <div className=\"flex justify-between items-center pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={status.type === \"loading\"}\n                className=\"min-w-[120px]\"\n              >\n                {status.type === \"loading\" ? \"Guardando...\" : \"Guardar Configuración\"}\n              </Button>\n\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleTestEmail}\n                disabled={testStatus.type === \"testing\" || !smtpConfig.host}\n                className=\"min-w-[120px]\"\n              >\n                {testStatus.type === \"testing\" ? \"Enviando...\" : \"Probar Email\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Status Messages */}\n      {(status.message || testStatus.message) && (\n        <div className=\"space-y-3\">\n          {status.message && (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className={`p-4 rounded-lg flex items-center gap-2 ${\n                  status.type === \"success\" \n                    ? \"bg-green-50 text-green-800 border border-green-200\" \n                    : status.type === \"error\"\n                    ? \"bg-red-50 text-red-800 border border-red-200\"\n                    : \"bg-blue-50 text-blue-800 border border-blue-200\"\n                }`}>\n                  {status.type === \"success\" && <CheckCircle className=\"h-4 w-4\" />}\n                  {status.type === \"error\" && <XCircle className=\"h-4 w-4\" />}\n                  {status.type === \"loading\" && <AlertTriangle className=\"h-4 w-4\" />}\n                  <span className=\"font-medium\">{status.message}</span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {testStatus.message && (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className={`p-4 rounded-lg flex items-center gap-2 ${\n                  testStatus.type === \"success\" \n                    ? \"bg-green-50 text-green-800 border border-green-200\" \n                    : testStatus.type === \"error\"\n                    ? \"bg-red-50 text-red-800 border border-red-200\"\n                    : \"bg-blue-50 text-blue-800 border border-blue-200\"\n                }`}>\n                  {testStatus.type === \"success\" && <CheckCircle className=\"h-4 w-4\" />}\n                  {testStatus.type === \"error\" && <XCircle className=\"h-4 w-4\" />}\n                  {testStatus.type === \"testing\" && <AlertTriangle className=\"h-4 w-4\" />}\n                  <span className=\"font-medium\">{testStatus.message}</span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Current Configuration Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Estado de Configuración</CardTitle>\n          <CardDescription>\n            Estado actual de la configuración SMTP\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Servidor</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <span>Host:</span>\n                  {smtpConfig.host ? (\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      {smtpConfig.host}\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"destructive\">\n                      <XCircle className=\"h-3 w-3 mr-1\" />\n                      No configurado\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span>Puerto:</span>\n                  <Badge variant=\"secondary\">{smtpConfig.port}</Badge>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span>SSL/TLS:</span>\n                  <Badge variant={smtpConfig.secure ? \"default\" : \"secondary\"}>\n                    {smtpConfig.secure ? \"Habilitado\" : \"Deshabilitado\"}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Emails</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <span>Remitente:</span>\n                  {smtpConfig.from ? (\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      {smtpConfig.from}\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"destructive\">\n                      <XCircle className=\"h-3 w-3 mr-1\" />\n                      No configurado\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span>Destino:</span>\n                  {smtpConfig.to ? (\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      {smtpConfig.to}\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"destructive\">\n                      <XCircle className=\"h-3 w-3 mr-1\" />\n                      No configurado\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":13826},"scripts/update-carousel-images.js":{"content":"\nconst { createDatabaseConnectionFromEnv } = require('../lib/database-env')\n\nasync function updateCarouselImages() {\n  try {\n    const pool = createDatabaseConnectionFromEnv()\n    if (!pool) {\n      console.error('Database connection not available')\n      return\n    }\n\n    // Get category images from config\n    const configResult = await pool.query(`\n      SELECT config_data \n      FROM radio_config \n      WHERE config_key = 'categoryImages'\n      ORDER BY created_at DESC \n      LIMIT 1\n    `)\n\n    if (!configResult.rows || configResult.rows.length === 0) {\n      console.log('No category images config found')\n      return\n    }\n\n    const categoryImages = configResult.rows[0].config_data || {}\n    console.log('Found category images config:', categoryImages)\n\n    // Update radio_categories table with uploaded images\n    for (const [categoryName, imageUrl] of Object.entries(categoryImages)) {\n      if (imageUrl && imageUrl.startsWith('/uploads/')) {\n        const updateResult = await pool.query(`\n          UPDATE radio_categories \n          SET image_url = $1, updated_at = NOW()\n          WHERE name = $2\n        `, [imageUrl, categoryName])\n\n        if (updateResult.rowCount > 0) {\n          console.log(`Updated ${categoryName} with image: ${imageUrl}`)\n        } else {\n          console.log(`No category found with name: ${categoryName}`)\n        }\n      }\n    }\n\n    console.log('Carousel images update completed')\n    await pool.end()\n  } catch (error) {\n    console.error('Error updating carousel images:', error)\n  }\n}\n\nupdateCarouselImages()\n","size_bytes":1567},"components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"app/admin/timezone-config/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { Save, Clock, Globe } from \"lucide-react\"\n\ninterface TimezoneConfig {\n  id?: number\n  timezone: string\n  displayName: string\n  isActive: boolean\n  createdAt?: string\n  updatedAt?: string\n}\n\nconst TIMEZONE_OPTIONS = [\n  { value: 'America/Mexico_City', label: 'Ciudad de México (CST/CDT)', offset: 'UTC-6/-5' },\n  { value: 'America/New_York', label: 'Nueva York (EST/EDT)', offset: 'UTC-5/-4' },\n  { value: 'America/Los_Angeles', label: 'Los Ángeles (PST/PDT)', offset: 'UTC-8/-7' },\n  { value: 'America/Chicago', label: 'Chicago (CST/CDT)', offset: 'UTC-6/-5' },\n  { value: 'America/Denver', label: 'Denver (MST/MDT)', offset: 'UTC-7/-6' },\n  { value: 'America/Phoenix', label: 'Phoenix (MST)', offset: 'UTC-7' },\n  { value: 'America/Anchorage', label: 'Anchorage (AKST/AKDT)', offset: 'UTC-9/-8' },\n  { value: 'America/Honolulu', label: 'Honolulu (HST)', offset: 'UTC-10' },\n  { value: 'Europe/London', label: 'Londres (GMT/BST)', offset: 'UTC+0/+1' },\n  { value: 'Europe/Paris', label: 'París (CET/CEST)', offset: 'UTC+1/+2' },\n  { value: 'Europe/Berlin', label: 'Berlín (CET/CEST)', offset: 'UTC+1/+2' },\n  { value: 'Europe/Madrid', label: 'Madrid (CET/CEST)', offset: 'UTC+1/+2' },\n  { value: 'Asia/Tokyo', label: 'Tokio (JST)', offset: 'UTC+9' },\n  { value: 'Asia/Shanghai', label: 'Shanghái (CST)', offset: 'UTC+8' },\n  { value: 'Asia/Dubai', label: 'Dubái (GST)', offset: 'UTC+4' },\n  { value: 'Australia/Sydney', label: 'Sídney (AEST/AEDT)', offset: 'UTC+10/+11' },\n  { value: 'Pacific/Auckland', label: 'Auckland (NZST/NZDT)', offset: 'UTC+12/+13' }\n]\n\nexport default function TimezoneConfigAdmin() {\n  const [config, setConfig] = useState<TimezoneConfig>({\n    timezone: 'America/Mexico_City',\n    displayName: 'Ciudad de México (CST/CDT)',\n    isActive: true\n  })\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [currentTime, setCurrentTime] = useState('')\n\n  useEffect(() => {\n    loadConfig()\n    updateCurrentTime()\n    const interval = setInterval(updateCurrentTime, 1000)\n    return () => clearInterval(interval)\n  }, [config.timezone])\n\n  const loadConfig = async () => {\n    try {\n      const response = await fetch('/api/admin/timezone-config')\n      if (response.ok) {\n        const data = await response.json()\n        setConfig(data)\n      }\n    } catch (error) {\n      console.error('Error loading timezone config:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al cargar la configuración de zona horaria\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateCurrentTime = () => {\n    try {\n      const now = new Date()\n      const timeInTimezone = new Intl.DateTimeFormat('es-MX', {\n        timeZone: config.timezone,\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      }).format(now)\n      setCurrentTime(timeInTimezone)\n    } catch (error) {\n      setCurrentTime('Error al obtener la hora')\n    }\n  }\n\n  const handleTimezoneChange = (timezone: string) => {\n    const option = TIMEZONE_OPTIONS.find(opt => opt.value === timezone)\n    if (option) {\n      setConfig(prev => ({\n        ...prev,\n        timezone,\n        displayName: option.label\n      }))\n    }\n  }\n\n  const handleSave = async () => {\n    setIsSaving(true)\n    try {\n      const method = config.id ? 'PUT' : 'POST'\n      const response = await fetch('/api/admin/timezone-config', {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: config.id,\n          timezone: config.timezone,\n          displayName: config.displayName\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to save timezone configuration')\n      }\n\n      const updatedConfig = await response.json()\n      setConfig(updatedConfig)\n\n      toast({\n        title: \"✅ Configuración Guardada\",\n        description: `Zona horaria actualizada a: ${config.displayName}`,\n        duration: 4000,\n      })\n    } catch (error) {\n      console.error('Error saving timezone config:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al guardar la configuración de zona horaria\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const createTimezoneTable = async () => {\n    try {\n      const response = await fetch('/api/admin/create-missing-tables', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          table: 'timezone_config'\n        })\n      })\n\n      if (response.ok) {\n        toast({\n          title: \"Éxito\",\n          description: \"Tabla de configuración de zona horaria creada\",\n        })\n        await loadConfig()\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Error al crear la tabla de configuración\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  if (isLoading) {\n    return <div className=\"p-6\">Cargando configuración de zona horaria...</div>\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">Configuración de Zona Horaria</h1>\n        <p className=\"text-gray-600\">\n          Configura la zona horaria que se usará para todos los elementos publicados en el sistema\n        </p>\n      </div>\n\n      {/* Current Time Display */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Hora Actual\n          </CardTitle>\n          <CardDescription>\n            Hora actual en la zona horaria configurada\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-mono font-bold text-blue-600\">\n            {currentTime}\n          </div>\n          <div className=\"text-sm text-gray-500 mt-2\">\n            Zona horaria: {config.displayName}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Timezone Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"h-5 w-5\" />\n            Configuración de Zona Horaria\n          </CardTitle>\n          <CardDescription>\n            Selecciona la zona horaria que se aplicará a todas las publicaciones programadas\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"timezone\">Zona Horaria</Label>\n            <Select value={config.timezone} onValueChange={handleTimezoneChange}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecciona una zona horaria\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white border border-gray-200 shadow-lg z-50\">\n                {TIMEZONE_OPTIONS.map((option) => (\n                  <SelectItem key={option.value} value={option.value} className=\"bg-white hover:bg-gray-50\">\n                    <div className=\"flex flex-col\">\n                      <span>{option.label}</span>\n                      <span className=\"text-xs text-gray-500\">{option.offset}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"displayName\">Nombre para Mostrar</Label>\n            <Input\n              id=\"displayName\"\n              value={config.displayName}\n              onChange={(e) => setConfig(prev => ({\n                ...prev,\n                displayName: e.target.value\n              }))}\n              placeholder=\"Ej: Ciudad de México (CST/CDT)\"\n            />\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleSave}\n              disabled={isSaving}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {isSaving ? 'Guardando...' : 'Guardar Configuración'}\n            </Button>\n\n            <Button \n              onClick={createTimezoneTable}\n              variant=\"outline\"\n            >\n              Crear Tabla de Configuración\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Impact Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Impacto de los Cambios</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm text-gray-600\">\n            <p>• La zona horaria configurada afectará a todas las publicaciones programadas</p>\n            <p>• Los elementos de noticias y episodios de radio se publicarán según esta zona horaria</p>\n            <p>• Los usuarios verán las fechas y horas en formato local del sistema</p>\n            <p>• Esta configuración es global para toda la aplicación</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":9827},"app/admin/channels/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Plus, Edit, Trash2 } from \"lucide-react\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport Image from 'next/image'\n\ninterface ChannelConfig {\n  id: string\n  name: string\n  number: string\n  logo: string\n  backgroundColor: string\n  textColor: string\n  transmisionesLink: string\n  isActive: boolean\n  order: number\n}\n\nexport default function ChannelsAdmin() {\n  const [channels, setChannels] = useState<ChannelConfig[]>([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [editingChannel, setEditingChannel] = useState<ChannelConfig | null>(null)\n  const [formData, setFormData] = useState({\n    name: '',\n    number: '',\n    logo: '',\n    backgroundColor: '',\n    textColor: '#ffffff',\n    transmisionesLink: '',\n    isActive: true,\n    order: 0\n  })\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    loadChannels()\n  }, [])\n\n  const loadChannels = async () => {\n    try {\n      setIsLoading(true)\n      const response = await fetch('/api/channels')\n      if (!response.ok) throw new Error('Failed to fetch channels')\n      const data = await response.json()\n      setChannels(data)\n    } catch (error) {\n      console.error('Error loading channels:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al cargar los canales\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      number: '',\n      logo: '',\n      backgroundColor: '',\n      textColor: '#ffffff',\n      transmisionesLink: '',\n      isActive: true,\n      order: 0\n    })\n    setEditingChannel(null)\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const method = editingChannel ? 'PUT' : 'POST'\n      const url = editingChannel ? `/api/channels?id=${editingChannel.id}` : '/api/channels'\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n      })\n\n      if (!response.ok) throw new Error('Failed to save channel')\n\n      await loadChannels()\n      setIsDialogOpen(false)\n      resetForm()\n      toast({\n        title: \"Éxito\",\n        description: editingChannel ? \"Canal actualizado\" : \"Canal creado\"\n      })\n    } catch (error) {\n      console.error('Error saving channel:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al guardar el canal\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleEdit = (channel: ChannelConfig) => {\n    setEditingChannel(channel)\n    setFormData({\n      name: channel.name,\n      number: channel.number,\n      logo: channel.logo,\n      backgroundColor: channel.backgroundColor,\n      textColor: channel.textColor,\n      transmisionesLink: channel.transmisionesLink,\n      isActive: channel.isActive,\n      order: channel.order\n    })\n    setIsDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('¿Estás seguro de que quieres eliminar este canal?')) return\n\n    try {\n      const response = await fetch(`/api/channels?id=${id}`, { method: 'DELETE' })\n      if (!response.ok) throw new Error('Failed to delete channel')\n      \n      await loadChannels()\n      toast({\n        title: \"Éxito\",\n        description: \"Canal eliminado\"\n      })\n    } catch (error) {\n      console.error('Error deleting channel:', error)\n      toast({\n        title: \"Error\",\n        description: \"Error al eliminar el canal\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const presetColors = [\n    { name: 'Gris', value: '#4a4a4a' },\n    { name: 'Rojo', value: '#b91c1c' },\n    { name: 'Verde', value: '#15803d' },\n    { name: 'Azul', value: '#1d4ed8' },\n    { name: 'Morado', value: '#7e22ce' }\n  ]\n\n  const presetLogos = [\n    { name: 'C+', value: '/images/channel-c-logo.png' },\n    { name: 'S+', value: '/images/channel-g-logo.png' },\n    { name: 'D+', value: '/images/channel-d-logo.png' },\n    { name: 'ST+', value: '/images/channel-st-logo.png' }\n  ]\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Configuración de Canales</h1>\n          <p className=\"text-gray-600\">Gestiona los botones de canales que aparecen en todo el sitio</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => {\n              setEditingChannel(null)\n              resetForm()\n            }}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Canal\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingChannel ? 'Editar Canal' : 'Nuevo Canal'}\n              </DialogTitle>\n              <DialogDescription>\n                Configura la información del canal que aparecerá en las barras de navegación.\n              </DialogDescription>\n            </DialogHeader>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nombre del Canal</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"ej: C+\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"number\">Número de Canal</Label>\n                  <Input\n                    id=\"number\"\n                    value={formData.number}\n                    onChange={(e) => setFormData({ ...formData, number: e.target.value })}\n                    placeholder=\"ej: 45.1\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"logo\">Logo del Canal</Label>\n                <Select onValueChange={(value) => setFormData({ ...formData, logo: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecciona un logo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {presetLogos.map((logo) => (\n                      <SelectItem key={logo.value} value={logo.value}>\n                        <div className=\"flex items-center gap-2\">\n                          <Image src={logo.value} alt={logo.name} width={20} height={20} />\n                          {logo.name}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Input\n                  className=\"mt-2\"\n                  value={formData.logo}\n                  onChange={(e) => setFormData({ ...formData, logo: e.target.value })}\n                  placeholder=\"O ingresa URL personalizada\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"backgroundColor\">Color de Fondo</Label>\n                  <Select onValueChange={(value) => setFormData({ ...formData, backgroundColor: value })}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona un color\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {presetColors.map((color) => (\n                        <SelectItem key={color.value} value={color.value}>\n                          <div className=\"flex items-center gap-2\">\n                            <div \n                              className=\"w-4 h-4 rounded\" \n                              style={{ backgroundColor: color.value }}\n                            />\n                            {color.name}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Input\n                    className=\"mt-2\"\n                    value={formData.backgroundColor}\n                    onChange={(e) => setFormData({ ...formData, backgroundColor: e.target.value })}\n                    placeholder=\"#4a4a4a\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"textColor\">Color de Texto</Label>\n                  <Input\n                    id=\"textColor\"\n                    type=\"color\"\n                    value={formData.textColor}\n                    onChange={(e) => setFormData({ ...formData, textColor: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"transmisionesLink\">Enlace a Transmisiones</Label>\n                <Input\n                  id=\"transmisionesLink\"\n                  value={formData.transmisionesLink}\n                  onChange={(e) => setFormData({ ...formData, transmisionesLink: e.target.value })}\n                  placeholder=\"/transmisiones?stream=1\"\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"order\">Orden de Aparición</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    value={formData.order}\n                    onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) })}\n                    min=\"0\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <Label htmlFor=\"isActive\">Canal Activo</Label>\n                </div>\n              </div>\n\n              {/* Preview */}\n              {formData.name && (\n                <div>\n                  <Label>Vista Previa</Label>\n                  <div className=\"flex items-center mt-2 p-2 border rounded\">\n                    <Image\n                      src={formData.logo || '/images/placeholder-logo.png'}\n                      alt={formData.name}\n                      width={32}\n                      height={32}\n                      className=\"mr-2\"\n                    />\n                    <div \n                      className=\"px-2 py-1 rounded text-xs font-medium\"\n                      style={{ \n                        backgroundColor: formData.backgroundColor || '#4a4a4a',\n                        color: formData.textColor \n                      }}\n                    >\n                      CANAL <span className=\"font-bold\">{formData.number}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isLoading}>\n                  {isLoading ? 'Guardando...' : (editingChannel ? 'Actualizar' : 'Crear')}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Canales Configurados</CardTitle>\n          <CardDescription>\n            {channels.length} canales configurados\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Cargando...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Vista Previa</TableHead>\n                  <TableHead>Nombre</TableHead>\n                  <TableHead>Número</TableHead>\n                  <TableHead>Enlace</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Orden</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {channels.sort((a, b) => a.order - b.order).map((channel) => (\n                  <TableRow key={channel.id}>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Image\n                          src={channel.logo || '/images/placeholder-logo.png'}\n                          alt={channel.name}\n                          width={24}\n                          height={24}\n                          className=\"mr-2\"\n                        />\n                        <div \n                          className=\"px-2 py-1 rounded text-xs font-medium\"\n                          style={{ \n                            backgroundColor: channel.backgroundColor,\n                            color: channel.textColor \n                          }}\n                        >\n                          CANAL <span className=\"font-bold\">{channel.number}</span>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{channel.name}</TableCell>\n                    <TableCell>{channel.number}</TableCell>\n                    <TableCell>\n                      <code className=\"text-xs bg-gray-100 px-2 py-1 rounded\">\n                        {channel.transmisionesLink}\n                      </code>\n                    </TableCell>\n                    <TableCell>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        channel.isActive \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {channel.isActive ? 'Activo' : 'Inactivo'}\n                      </span>\n                    </TableCell>\n                    <TableCell>{channel.order}</TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(channel)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(channel.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":15990},"app/api/featured-programs/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Import database pool dynamically\n    const { pool } = await import('@/lib/database')\n\n    if (!pool) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      )\n    }\n\n    const { id } = await params\n    const data = await request.json()\n    const { title, description, schedule, imageUrl, isActive, displayOrder } = data\n\n    if (!title || !description || !schedule) {\n      return NextResponse.json(\n        { error: 'Title, description, and schedule are required' },\n        { status: 400 }\n      )\n    }\n\n    const result = await pool.query(`\n      UPDATE featured_programs \n      SET title = $1, description = $2, schedule = $3, image_url = $4, \n          is_active = $5, display_order = $6, updated_at = NOW()\n      WHERE id = $7\n      RETURNING *\n    `, [title, description, schedule, imageUrl || null, isActive !== false, displayOrder || 0, id])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Featured program not found' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating featured program:', error)\n    return NextResponse.json(\n      { error: 'Failed to update featured program' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Import database pool dynamically\n    const { pool } = await import('@/lib/database')\n\n    if (!pool) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      )\n    }\n\n    const { id } = await params\n    const result = await pool.query(`\n      DELETE FROM featured_programs WHERE id = $1\n      RETURNING id\n    `, [id])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Featured program not found' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json({ message: 'Featured program deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting featured program:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete featured program' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2440},"hooks/use-radio-stream.ts":{"content":"\n'use client'\n\nimport { useState, useEffect } from 'react'\n\ninterface RadioStreamInfo {\n  isLive: boolean\n  currentProgram?: string\n  listeners?: number\n  quality?: 'low' | 'medium' | 'high'\n}\n\nexport function useRadioStream(streamUrl: string) {\n  const [streamInfo, setStreamInfo] = useState<RadioStreamInfo>({\n    isLive: false\n  })\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    // Simulate checking stream status\n    const checkStreamStatus = async () => {\n      try {\n        // In a real implementation, you'd check the stream status\n        // For now, we'll simulate a live stream\n        setStreamInfo({\n          isLive: true,\n          currentProgram: \"Transmisión en vivo\",\n          listeners: Math.floor(Math.random() * 1000) + 100,\n          quality: 'high'\n        })\n        setError(null)\n      } catch (err) {\n        console.error('Error checking stream status:', err)\n        setError('Unable to connect to stream')\n        setStreamInfo({ isLive: false })\n      }\n    }\n\n    checkStreamStatus()\n    const interval = setInterval(checkStreamStatus, 30000) // Check every 30 seconds\n\n    return () => clearInterval(interval)\n  }, [streamUrl])\n\n  return { streamInfo, error }\n}\n","size_bytes":1233},"components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1991},"components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-purple-600 data-[state=unchecked]:bg-gray-300\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1160},"app/transparencia/focalizada/page.tsx":{"content":"import Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport Link from \"next/link\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\n\nexport default function TransparenciaFocalizadaPage() {\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"min-h-screen py-12\">\n        <div className=\"container mx-auto px-4\">\n          <h1 className=\"text-3xl font-bold mb-8\">Transparencia Focalizada</h1>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n            <Link\n              href=\"/transparencia/focalizada/tu-congreso\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">Tu Congreso</h2>\n              <p className=\"text-gray-600\">Información sobre el funcionamiento del Congreso</p>\n            </Link>\n\n            <Link\n              href=\"/transparencia/focalizada/representantes\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">Tus Representantes</h2>\n              <p className=\"text-gray-600\">Información sobre legisladores y grupos parlamentarios</p>\n            </Link>\n\n            <Link\n              href=\"/transparencia/focalizada/ciudadania\"\n              className=\"bg-blue-50 hover:bg-blue-100 p-6 rounded-lg shadow transition\"\n            >\n              <h2 className=\"text-xl font-semibold mb-2\">La Ciudadanía y el Congreso</h2>\n              <p className=\"text-gray-600\">Participación ciudadana en el proceso legislativo</p>\n            </Link>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <h2 className=\"text-2xl font-bold mb-4\">¿Qué es la Transparencia Focalizada?</h2>\n            <p className=\"text-gray-700 mb-4\">\n              La Transparencia Focalizada es una estrategia que busca identificar y publicar información específica que\n              responde a las necesidades de la ciudadanía, presentada de manera clara y accesible.\n            </p>\n            <p className=\"text-gray-700\">\n              En esta sección encontrarás información relevante sobre el Congreso, tus representantes y los mecanismos\n              de participación ciudadana, organizada de manera que puedas acceder fácilmente a los temas de tu interés.\n            </p>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":2535},"app/api/video-news/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { updateVideoNewsInDB, deleteVideoNewsFromDB } from '@/lib/api-database'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n    const videoNews = await updateVideoNewsInDB(id, data)\n\n    if (!videoNews) {\n      return NextResponse.json({ error: 'Video news not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(videoNews)\n  } catch (error) {\n    console.error('Error updating video news:', error)\n    return NextResponse.json({ error: 'Failed to update video news' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const success = await deleteVideoNewsFromDB(id)\n\n    if (!success) {\n      return NextResponse.json({ error: 'Video news not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting video news:', error)\n    return NextResponse.json({ error: 'Failed to delete video news' }, { status: 500 })\n  }\n}","size_bytes":1228},"app/api/video-news/all/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { getAllVideoNewsFromDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const videoNews = await getAllVideoNewsFromDB()\n    console.log('API: All video news fetched from DB:', videoNews.length, 'items')\n\n    return new Response(JSON.stringify(videoNews), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'Last-Modified': new Date().toUTCString(),\n        'Vary': 'Accept-Encoding',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching all video news:', error)\n    return NextResponse.json({ error: 'Failed to fetch video news' }, { status: 500 })\n  }\n}","size_bytes":829},"components/ui/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"app/api/auth/logout/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nexport async function POST() {\n  try {\n    const cookieStore = await cookies()\n    cookieStore.delete('auth-token')\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Logout error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":421},"components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"app/api/admin/seed-live-streams/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { createLiveStreamInDB } from '@/lib/api-database'\n\n// No mock data - this endpoint now only cleans up existing mock streams\nconst mockLiveStreams: any[] = []\n\nexport async function POST() {\n  try {\n    // If there are no streams to create, just return success\n    if (mockLiveStreams.length === 0) {\n      return NextResponse.json({ \n        success: true, \n        message: 'No mock streams to create - database ready for real data',\n        data: []\n      })\n    }\n\n    const results = []\n\n    for (const streamData of mockLiveStreams) {\n      const result = await createLiveStreamInDB(streamData)\n      results.push(result)\n    }\n\n    return NextResponse.json({ \n      success: true, \n      message: `Successfully created ${results.length} live streams`,\n      data: results\n    })\n  } catch (error) {\n    console.error('Error seeding live streams:', error)\n    return NextResponse.json({ \n      success: false, \n      error: 'Failed to seed live streams',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}","size_bytes":1112},"components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4099},"components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"app/admin/radio-categories/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport Image from 'next/image'\nimport { Trash2, Upload, Save, Plus } from 'lucide-react'\n\ninterface CarouselCategory {\n  id: string\n  title: string\n  image: string\n  link: string\n}\n\ninterface CategoryImage {\n  [key: string]: string\n}\n\nexport default function RadioCategoriesPage() {\n  const [categories, setCategories] = useState<CarouselCategory[]>([])\n  const [categoryImages, setCategoryImages] = useState<CategoryImage>({})\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [newCategory, setNewCategory] = useState({ title: '', link: '' })\n  const [showAddForm, setShowAddForm] = useState(false)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    fetchCategories()\n    fetchCategoryImages()\n  }, [])\n\n  const fetchCategories = async () => {\n    try {\n      const response = await fetch('/api/radio/carousel')\n      if (response.ok) {\n        const data = await response.json()\n        setCategories(data)\n      }\n    } catch (error) {\n      console.error('Error fetching categories:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron cargar las categorías\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const fetchCategoryImages = async () => {\n    try {\n      const response = await fetch('/api/radio/config')\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Fetched category images:', data.categoryImages)\n        setCategoryImages(data.categoryImages || {})\n      }\n    } catch (error) {\n      console.error('Error fetching category images:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleImageUpload = async (categoryTitle: string, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    // Clear the input value to allow re-uploading the same file\n    event.target.value = ''\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor selecciona un archivo de imagen válido\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"La imagen no puede ser mayor a 5MB\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', 'radio-categories')\n\n    try {\n      toast({\n        title: \"Subiendo...\",\n        description: \"Subiendo imagen, por favor espera...\"\n      })\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (response.ok) {\n        const result = await response.json()\n        const imageUrl = result.url || result.imageUrl || result.fileUrl\n        console.log('Uploaded image URL:', imageUrl)\n\n        if (imageUrl) {\n          // Find the category by title\n          const foundCategory = categories.find(cat => cat.title === categoryTitle)\n          if (!foundCategory) {\n            throw new Error('Categoría no encontrada')\n          }\n\n          // Update both local state and database immediately\n          setCategories(prevCategories => \n            prevCategories.map(cat => \n              cat.title === categoryTitle ? { ...cat, image: imageUrl } : cat\n            )\n          )\n\n          // Update category images config\n          setCategoryImages(prev => ({\n            ...prev,\n            [categoryTitle]: imageUrl\n          }))\n\n          // Update the category in the database with the new image\n          try {\n            const updateResponse = await fetch(`/api/radio/carousel/${foundCategory.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                id: foundCategory.id,\n                title: categoryTitle,\n                image: imageUrl,\n                link: foundCategory.link\n              })\n            })\n\n            if (!updateResponse.ok) {\n              const errorText = await updateResponse.text()\n              throw new Error(`Error updating database: ${errorText}`)\n            }\n\n            // Also update the config to maintain consistency\n            await fetch('/api/radio/config', {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                categoryImages: {\n                  ...categoryImages,\n                  [categoryTitle]: imageUrl\n                }\n              })\n            })\n\n            toast({\n              title: \"Éxito\",\n              description: \"Imagen actualizada correctamente\"\n            })\n\n            // Refresh data to ensure consistency\n            setTimeout(() => {\n              fetchCategories()\n              fetchCategoryImages()\n            }, 1000)\n\n          } catch (updateError) {\n            console.error('Error updating category in database:', updateError)\n            toast({\n              title: \"Error\",\n              description: \"No se pudo actualizar la categoría en la base de datos\",\n              variant: \"destructive\"\n            })\n          }\n        } else {\n          throw new Error('No se recibió URL de imagen del servidor')\n        }\n      } else {\n        const errorText = await response.text()\n        console.error('Upload response error:', response.status, errorText)\n        throw new Error(`Error del servidor: ${response.status}`)\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error)\n      toast({\n        title: \"Error\",\n        description: `No se pudo subir la imagen: ${error instanceof Error ? error.message : 'Error desconocido'}`,\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const saveConfigImages = async (images: CategoryImage) => {\n    try {\n      const response = await fetch('/api/radio/config', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          categoryImages: images\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to save config')\n      }\n    } catch (error) {\n      console.error('Error saving config:', error)\n      throw error\n    }\n  }\n\n  const handleCategoryUpdate = async (categoryId: string, updates: Partial<CarouselCategory>) => {\n    setIsSaving(true)\n    try {\n      // Get the current category data\n      const currentCategory = categories.find(cat => cat.id === categoryId)\n      if (!currentCategory) {\n        console.error('Category not found in local state:', categoryId, 'Available categories:', categories.map(c => c.id))\n\n        // Try to refresh categories first\n        await fetchCategories()\n\n        // Check again after refresh\n        const refreshedCategory = categories.find(cat => cat.id === categoryId)\n        if (!refreshedCategory) {\n          toast({\n            title: \"Error\",\n            description: \"Categoría no encontrada. Por favor, recarga la página.\"\n          })\n          return\n        }\n      }\n\n      // Use the found category (either from original search or after refresh)\n      const categoryToUpdate = currentCategory || categories.find(cat => cat.id === categoryId)\n\n      if (!categoryToUpdate) {\n        toast({\n          title: \"Error\",\n          description: \"No se pudo encontrar la categoría para actualizar\"\n        })\n        return\n      }\n\n      // Prepare the complete update data\n      const updateData = {\n        id: categoryToUpdate.id,\n        title: updates.title || categoryToUpdate.title,\n        image: updates.image || categoryImages[categoryToUpdate.title] || categoryToUpdate.image,\n        link: updates.link || categoryToUpdate.link\n      }\n\n      console.log('Updating category:', categoryId, 'with data:', updateData)\n\n      const response = await fetch(`/api/radio/carousel/${categoryId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData)\n      })\n\n      if (response.ok) {\n        const updatedCategory = await response.json()\n        console.log('Category updated successfully:', updatedCategory)\n\n        // Update local state immediately\n        setCategories(prevCategories => \n          prevCategories.map(cat => \n            cat.id === categoryId ? { ...cat, ...updates } : cat\n          )\n        )\n\n        // Refresh from server to ensure consistency\n        setTimeout(() => {\n          fetchCategories()\n        }, 500)\n\n        toast({\n          title: \"Éxito\",\n          description: \"Categoría actualizada correctamente\"\n        })\n      } else {\n        const errorText = await response.text()\n        console.error('Server response error:', response.status, errorText)\n        let errorData\n        try {\n          errorData = JSON.parse(errorText)\n        } catch {\n          errorData = { error: errorText || 'Error desconocido del servidor' }\n        }\n        throw new Error(errorData.error || `Error del servidor: ${response.status}`)\n      }\n    } catch (error) {\n      console.error('Error updating category:', error)\n      toast({\n        title: \"Error\",\n        description: `No se pudo actualizar la categoría: ${error instanceof Error ? error.message : 'Error desconocido'}`,\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handleAddCategory = async () => {\n    if (!newCategory.title || !newCategory.link) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor completa todos los campos\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    setIsSaving(true)\n    try {\n      const response = await fetch('/api/radio/carousel', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: newCategory.title.toLowerCase().replace(/\\s+/g, '-'),\n          title: newCategory.title,\n          image: '/images/placeholder.jpg',\n          link: newCategory.link\n        })\n      })\n\n      if (response.ok) {\n        await fetchCategories()\n        setNewCategory({ title: '', link: '' })\n        setShowAddForm(false)\n        toast({\n          title: \"Éxito\",\n          description: \"Categoría creada correctamente\"\n        })\n      } else {\n        throw new Error('Error creating category')\n      }\n    } catch (error) {\n      console.error('Error creating category:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la categoría\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handleDeleteCategory = async (categoryId: string) => {\n    if (!confirm('¿Estás seguro de que quieres eliminar esta categoría?')) {\n      return\n    }\n\n    try {\n      const response = await fetch(`/api/radio/carousel/${categoryId}`, {\n        method: 'DELETE',\n      })\n\n      if (response.ok) {\n        await fetchCategories()\n        toast({\n          title: \"Éxito\",\n          description: \"Categoría eliminada correctamente\"\n        })\n      } else {\n        throw new Error('Error deleting category')\n      }\n    } catch (error) {\n      console.error('Error deleting category:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar la categoría\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  if (isLoading) {\n    return <div className=\"p-8\">Cargando...</div>\n  }\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestión de Categorías de Radio</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Administra las categorías que aparecen en el carrusel de la página de radio\n          </p>\n        </div>\n        <Button onClick={() => setShowAddForm(!showAddForm)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Agregar Categoría\n        </Button>\n      </div>\n\n      {/* Add New Category Form */}\n      {showAddForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Agregar Nueva Categoría</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"newTitle\">Título de la Categoría</Label>\n                  <Input\n                    id=\"newTitle\"\n                    value={newCategory.title}\n                    onChange={(e) => setNewCategory(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Ej: PROGRAMAS\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">Este título aparecerá en la tarjeta de categoría</p>\n                </div>\n                <div>\n                  <Label htmlFor=\"newLink\">URL de Destino</Label>\n                  <Input\n                    id=\"newLink\"\n                    value={newCategory.link}\n                    onChange={(e) => setNewCategory(prev => ({ ...prev, link: e.target.value }))}\n                    placeholder=\"Ej: /radio/programas o https://external-site.com\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">Los usuarios irán a esta URL al hacer clic en la categoría</p>\n                </div>\n              </div>\n            <div className=\"flex gap-2 mt-4\">\n              <Button onClick={handleAddCategory} disabled={isSaving}>\n                <Save className=\"h-4 w-4 mr-2\" />\n                Guardar\n              </Button>\n              <Button variant=\"outline\" onClick={() => setShowAddForm(false)}>\n                Cancelar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Categories Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {categories.map((category) => (\n          <Card key={category.id} className=\"overflow-hidden\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex justify-between items-center\">\n                {category.title}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDeleteCategory(category.id)}\n                  className=\"text-red-600 hover:text-red-700\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Image Preview */}\n              <div className=\"aspect-video relative overflow-hidden rounded-lg border\">\n                {(categoryImages[category.title] || category.image) && \n                 (categoryImages[category.title] || category.image) !== \"/images/placeholder.jpg\" ? (\n                  <Image\n                    src={categoryImages[category.title] || category.image}\n                    alt={category.title}\n                    fill\n                    className=\"object-cover\"\n                    key={`${category.title}-${categoryImages[category.title] || category.image}-${Date.now()}`}\n                    onError={(e) => {\n                      console.log('Image load error for', category.title, '- URL:', categoryImages[category.title] || category.image)\n                      // Don't remove from state on error, just log it\n                    }}\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-gray-200 flex items-center justify-center\">\n                    <span className=\"text-gray-500 text-sm\">Sin imagen</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Image Upload */}\n              <div>\n                <Label htmlFor={`image-${category.id}`} className=\"text-sm font-medium\">\n                  Cambiar Imagen\n                </Label>\n                <Input\n                  id={`image-${category.id}`}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => handleImageUpload(category.title, e)}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              {/* Category Details */}\n              <div className=\"space-y-2\">\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Título</Label>\n                  <Input\n                    value={category.title}\n                    onChange={(e) => {\n                      const newTitle = e.target.value\n                      setCategories(prevCategories =>\n                        prevCategories.map(cat =>\n                          cat.id === category.id ? { ...cat, title: newTitle } : cat\n                        )\n                      )\n                    }}\n                    placeholder=\"Ej: NOTICIAS CONGRESO\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Enlace</Label>\n                  <Input\n                    value={category.link}\n                    onChange={(e) => {\n                      const newLink = e.target.value\n                      setCategories(prevCategories =>\n                        prevCategories.map(cat =>\n                          cat.id === category.id ? { ...cat, link: newLink } : cat\n                        )\n                      )\n                    }}\n                    placeholder=\"\"\n                  />\n                </div>\n              </div>\n\n              {/* Save Button */}\n              <div className=\"pt-2\">\n                <Button\n                  onClick={() => {\n                    const currentCategory = categories.find(cat => cat.id === category.id)\n                    if (currentCategory) {\n                      handleCategoryUpdate(category.id, {\n                        title: currentCategory.title,\n                        link: currentCategory.link\n                      })\n                    }\n                  }}\n                  disabled={isSaving}\n                  className=\"w-full\"\n                  size=\"sm\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Guardar Cambios\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {categories.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p className=\"text-gray-500\">No hay categorías disponibles</p>\n            <Button onClick={() => setShowAddForm(true)} className=\"mt-4\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Crear Primera Categoría\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}","size_bytes":19292},"components/safe-image.tsx":{"content":"\"use client\"\n\nimport Image from 'next/image'\nimport { useState } from 'react'\n\ninterface SafeImageProps {\n  src: string\n  alt: string\n  width?: number\n  height?: number\n  className?: string\n  fill?: boolean\n  unoptimized?: boolean\n  onError?: () => void\n}\n\nexport default function SafeImage({\n  src,\n  alt,\n  width,\n  height,\n  className = '',\n  fill = false,\n  unoptimized = true,\n  onError\n}: SafeImageProps) {\n  const [imageSrc, setImageSrc] = useState(src || '/placeholder.jpg')\n  const [hasError, setHasError] = useState(false)\n\n  const handleError = () => {\n    if (!hasError && imageSrc !== '/placeholder.jpg') {\n      setHasError(true)\n\n      // Try different extensions for the same filename\n      const baseName = src?.split('.').slice(0, -1).join('.')\n      if (baseName && src?.includes('.jpeg')) {\n        setImageSrc(baseName + '.jpg')\n        return\n      } else if (baseName && src?.includes('.jpg')) {\n        setImageSrc(baseName + '.png')\n        return\n      }\n\n      setImageSrc('/placeholder.jpg')\n      onError?.()\n    } else if (imageSrc !== '/placeholder.jpg') {\n      setImageSrc('/placeholder.jpg')\n    }\n  }\n\n  if (fill) {\n    return (\n      <Image\n        src={imageSrc}\n        alt={alt}\n        fill\n        className={className}\n        unoptimized={unoptimized}\n        onError={handleError}\n      />\n    )\n  }\n\n  return (\n    <Image\n      src={imageSrc}\n      alt={alt}\n      width={width || 400}\n      height={height || 300}\n      className={className}\n      unoptimized={unoptimized}\n      onError={handleError}\n    />\n  )\n}","size_bytes":1560},"app/api/admin/init-users/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST() {\n  let pool = null\n  \n  try {\n    console.log('Attempting to initialize users table...')\n    \n    pool = createDatabaseConnectionFromEnv()\n    \n    if (!pool) {\n      console.error('Failed to create database connection')\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      )\n    }\n\n    // Test the connection first\n    const testResult = await pool.query('SELECT 1 as test')\n    console.log('Database connection test successful:', testResult.rows)\n    \n    // Create users table if it doesn't exist\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(100) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        role VARCHAR(50) DEFAULT 'admin',\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `)\n    \n    console.log('Users table created successfully')\n\n    // Check if default users exist\n    const existingUsers = await pool.query('SELECT username FROM users')\n    console.log('Existing users:', existingUsers.rows)\n\n    if (existingUsers.rows.length === 0) {\n      const bcrypt = require('bcryptjs')\n      \n      // Create default admin user\n      const adminPasswordHash = await bcrypt.hash('admin123', 10)\n      const cmsPasswordHash = await bcrypt.hash('hgqV&d3FJ!eDv#2Ji7v!kA', 10)\n      \n      await pool.query(`\n        INSERT INTO users (username, password_hash, role, is_active)\n        VALUES \n          ('admin', $1, 'admin', true),\n          ('cmscanal', $2, 'admin', true)\n      `, [adminPasswordHash, cmsPasswordHash])\n      \n      console.log('Default users created successfully')\n    }\n\n    const finalUserCount = await pool.query('SELECT COUNT(*) FROM users')\n    console.log('Final user count:', finalUserCount.rows[0].count)\n\n    return NextResponse.json({ \n      message: 'Users table and default users initialized successfully',\n      userCount: parseInt(finalUserCount.rows[0].count),\n      tableCreated: true\n    })\n  } catch (error) {\n    console.error('Error initializing users table:', error)\n    return NextResponse.json(\n      { \n        error: 'Failed to initialize users table',\n        details: error instanceof Error ? error.message : String(error)\n      },\n      { status: 500 }\n    )\n  } finally {\n    if (pool) {\n      try {\n        await pool.end()\n      } catch (endError) {\n        console.error('Error closing database connection:', endError)\n      }\n    }\n  }\n}\n","size_bytes":2712},"components/auto-scroll-carousel-large.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport Image from \"next/image\"\nimport { Play } from \"lucide-react\"\nimport type { LiveStream } from \"@/lib/api\"\n\ninterface ChannelConfig {\n  id: string\n  name: string\n  number: string\n  logo: string\n  backgroundColor: string\n  textColor: string\n  transmisionesLink: string\n  isActive: boolean\n  order: number\n}\n\nfunction ChannelIndicators() {\n  const [channels, setChannels] = useState<ChannelConfig[]>([])\n  const [liveStreams, setLiveStreams] = useState<LiveStream[]>([])\n\n  useEffect(() => {\n    const fetchChannels = async () => {\n      try {\n        const response = await fetch('/api/channels')\n        if (response.ok) {\n          const channelData = await response.json()\n          setChannels(channelData.filter((ch: ChannelConfig) => ch.isActive).sort((a: ChannelConfig, b: ChannelConfig) => a.order - b.order))\n        }\n      } catch (error) {\n        console.error('Error fetching channels:', error)\n      }\n    }\n\n    const fetchLiveStreams = async () => {\n      try {\n        const response = await fetch('/api/live-streams/all')\n        if (response.ok) {\n          const streamsData = await response.json()\n          setLiveStreams(streamsData)\n        }\n      } catch (error) {\n        console.error('Error fetching live streams:', error)\n      }\n    }\n\n    fetchChannels()\n    fetchLiveStreams()\n  }, [])\n\n  const getStreamLinkForChannel = (channelNumber: string) => {\n    // Find matching stream by channel\n    const matchingStream = liveStreams.find(stream => {\n      const streamChannelNumber = stream.channel === 'C+' ? '45.1' :\n                                  stream.channel === 'S+' ? '45.2' :\n                                  stream.channel === 'D+' ? '45.3' :\n                                  stream.channel === 'ST+' ? '45.4' : ''\n      return streamChannelNumber === channelNumber\n    })\n    \n    return matchingStream ? `/transmisiones?stream=${matchingStream.id}` : '/transmisiones'\n  }\n\n  return (\n    <div className=\"flex justify-end space-x-2 sm:space-x-4 md:space-x-8 mb-4 sm:mb-6 md:mb-8\">\n      {channels.map((channel) => (\n        <a key={channel.id} href={getStreamLinkForChannel(channel.number)} className=\"flex items-center hover:opacity-80 transition-opacity\">\n          <div \n            className=\"text-white rounded-full px-3 py-1 sm:px-4 sm:py-1.5 md:px-6 md:py-2 flex items-center text-sm sm:text-lg md:text-xl\"\n            style={{ backgroundColor: channel.backgroundColor, color: channel.textColor }}\n          >\n            <span className=\"mr-1 sm:mr-1.5 md:mr-2\">CANAL</span>\n            <span className=\"font-bold\">{channel.number}</span>\n          </div>\n        </a>\n      ))}\n    </div>\n  )\n}\n\ninterface AutoScrollCarouselProps {\n  items: LiveStream[]\n}\n\nexport default function AutoScrollCarouselLarge({ items }: AutoScrollCarouselProps) {\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  // Auto scroll functionality\n  useEffect(() => {\n    const liveStreams = items.filter(stream => stream.isLive === true)\n    if (liveStreams.length > 0) {\n      const interval = setInterval(() => {\n        setActiveIndex((prev) => (prev === liveStreams.length - 1 ? 0 : prev + 1))\n      }, 5000)\n\n      return () => clearInterval(interval)\n    }\n  }, [items])\n\n  // Function to handle manual scrolling\n  const scroll = (direction: \"left\" | \"right\") => {\n    const liveStreams = items.filter(stream => stream.isLive === true)\n    if (direction === \"left\") {\n      setActiveIndex((prev) => (prev === 0 ? liveStreams.length - 1 : prev - 1))\n    } else {\n      setActiveIndex((prev) => (prev === liveStreams.length - 1 ? 0 : prev + 1))\n    }\n  }\n\n  // Filter only live streams\n  const liveStreams = items.filter(stream => stream.isLive === true)\n\n  // If no live streams, show a message\n  if (liveStreams.length === 0) {\n    return <div className=\"text-center py-8 text-white text-2xl\">No hay transmisiones en vivo en este momento.</div>\n  }\n\n  return (\n    <div className=\"relative max-w-7xl mx-auto px-4\">\n      {/* Channel indicators - RESPONSIVE SIZE */}\n      <ChannelIndicators />\n\n      {/* EN VIVO AHORA title - DOUBLED SIZE */}\n      <h2 className=\"text-6xl font-bold mb-12 text-center flex items-center justify-center text-white\">\n        <span className=\"bg-red-600 w-6 h-6 rounded-full mr-4 animate-pulse\"></span>\n        EN VIVO AHORA\n      </h2>\n\n      {/* Video thumbnails - DOUBLED SIZE */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 py-8\">\n        {liveStreams.slice(0, 4).map((stream, index) => (\n          <div key={stream.id} className=\"relative group cursor-pointer\">\n            <div className=\"relative h-96 w-full rounded-xl overflow-hidden\">\n              <Image\n                src={stream.thumbnailUrl || \"/placeholder.svg?height=384&width=512\"}\n                alt={stream.title}\n                fill\n                className=\"object-cover\"\n              />\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"bg-white bg-opacity-20 rounded-full p-6 group-hover:bg-opacity-40 transition-all\">\n                  <Play className=\"w-16 h-16 text-white\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-4 text-center\">\n              <p className=\"text-lg text-white\">{stream.title}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Navigation arrows - DOUBLED SIZE */}\n      <div className=\"flex justify-center mt-8 space-x-8\">\n        <button onClick={() => scroll(\"left\")} className=\"focus:outline-none\" aria-label=\"Anterior\">\n          <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"white\" />\n            <path d=\"M15 6L9 12L15 18\" stroke=\"#3b0764\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n          </svg>\n        </button>\n        <button onClick={() => scroll(\"right\")} className=\"focus:outline-none\" aria-label=\"Siguiente\">\n          <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"white\" />\n            <path d=\"M9 18L15 12L9 6\" stroke=\"#3b0764\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  )\n}","size_bytes":6452},"app/admin/radio/page.tsx":{"content":"\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\n\ninterface RadioProgram {\n  id: string\n  title: string\n  description: string\n  imageUrl: string\n  latestEpisode: {\n    title: string\n    date: string\n    duration: string\n    description: string\n  }\n  programLink: string\n  episodesLink: string\n}\n\nexport default function RadioAdminPage() {\n  const [programs, setPrograms] = useState<RadioProgram[]>([])\n  const [streamUrl, setStreamUrl] = useState('')\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedProgram, setSelectedProgram] = useState<RadioProgram | null>(null)\n\n  useEffect(() => {\n    fetchRadioData()\n  }, [])\n\n  const fetchRadioData = async () => {\n    try {\n      const [configResponse, programsResponse] = await Promise.all([\n        fetch('/api/radio/config'),\n        fetch('/api/radio/programs')\n      ])\n      \n      const config = await configResponse.json()\n      const programs = await programsResponse.json()\n      \n      setStreamUrl(config.streamUrl)\n      setPrograms(programs)\n    } catch (error) {\n      console.error('Error fetching radio data:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateStreamUrl = async () => {\n    try {\n      // In a real implementation, this would update the database\n      console.log('Updating stream URL:', streamUrl)\n      alert('Stream URL updated successfully!')\n    } catch (error) {\n      console.error('Error updating stream URL:', error)\n    }\n  }\n\n  const updateProgram = async (program: RadioProgram) => {\n    try {\n      // In a real implementation, this would update the database\n      const updatedPrograms = programs.map(p => \n        p.id === program.id ? program : p\n      )\n      setPrograms(updatedPrograms)\n      setSelectedProgram(null)\n      alert('Program updated successfully!')\n    } catch (error) {\n      console.error('Error updating program:', error)\n    }\n  }\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading...</div>\n  }\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Radio Content Management</h1>\n      \n      {/* Stream Configuration */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Live Stream Configuration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"streamUrl\">Stream URL</Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"streamUrl\"\n                  value={streamUrl}\n                  onChange={(e) => setStreamUrl(e.target.value)}\n                  placeholder=\"Enter HLS stream URL\"\n                />\n                <Button onClick={updateStreamUrl}>Update</Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Programs Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Featured Programs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {programs.map((program) => (\n              <div key={program.id} className=\"border p-4 rounded\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"font-semibold\">{program.title}</h3>\n                    <p className=\"text-gray-600 text-sm\">{program.description}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Latest: {program.latestEpisode.title}\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSelectedProgram(program)}\n                  >\n                    Edit\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Edit Program Modal */}\n      {selectedProgram && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle>Edit Program: {selectedProgram.title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"programTitle\">Program Title</Label>\n                  <Input\n                    id=\"programTitle\"\n                    value={selectedProgram.title}\n                    onChange={(e) => setSelectedProgram({\n                      ...selectedProgram,\n                      title: e.target.value\n                    })}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"programDescription\">Description</Label>\n                  <Textarea\n                    id=\"programDescription\"\n                    value={selectedProgram.description}\n                    onChange={(e) => setSelectedProgram({\n                      ...selectedProgram,\n                      description: e.target.value\n                    })}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"episodeTitle\">Latest Episode Title</Label>\n                  <Input\n                    id=\"episodeTitle\"\n                    value={selectedProgram.latestEpisode.title}\n                    onChange={(e) => setSelectedProgram({\n                      ...selectedProgram,\n                      latestEpisode: {\n                        ...selectedProgram.latestEpisode,\n                        title: e.target.value\n                      }\n                    })}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"episodeDescription\">Episode Description</Label>\n                  <Textarea\n                    id=\"episodeDescription\"\n                    value={selectedProgram.latestEpisode.description}\n                    onChange={(e) => setSelectedProgram({\n                      ...selectedProgram,\n                      latestEpisode: {\n                        ...selectedProgram.latestEpisode,\n                        description: e.target.value\n                      }\n                    })}\n                  />\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  <Button onClick={() => updateProgram(selectedProgram)}>\n                    Save Changes\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedProgram(null)}>\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":7141},"hooks/use-mobile.ts":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\n\nexport function useMobile() {\n  const [isMobile, setIsMobile] = useState(false)\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < 768)\n    }\n\n    // Set initial value\n    handleResize()\n\n    // Listen for window resize events\n    window.addEventListener(\"resize\", handleResize)\n\n    // Remove event listener on cleanup\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [])\n\n  return isMobile\n}\n","size_bytes":532},"app/api/radio/carousel/route.ts":{"content":"import { NextResponse, NextRequest } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function GET() {\n  try {\n    // Connect to the real database\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (pool) {\n      try {\n        const result = await pool.query(`\n          SELECT id, name as title, slug, image_url as image, \n                 COALESCE(link_url, CONCAT('/radio/', slug)) as link, display_order, updated_at\n          FROM radio_categories \n          WHERE active = true \n          ORDER BY display_order ASC, name ASC\n        `)\n\n        if (result.rows && result.rows.length > 0) {\n          // Use database images directly - they should be up to date from the CMS\n          const carouselData = result.rows.map(row => ({\n            id: row.slug,\n            title: row.title.toUpperCase(),\n            image: row.image && row.image !== '/images/placeholder.jpg' \n              ? `${row.image}?t=${new Date(row.updated_at).getTime()}` // Add timestamp to prevent caching\n              : '/images/placeholder.jpg',\n            link: row.link,\n            displayOrder: row.display_order\n          }))\n\n          console.log('Using database carousel data:', carouselData)\n          return NextResponse.json(carouselData)\n        }\n      } catch (dbError) {\n        console.error('Database query failed:', dbError)\n      }\n    }\n\n    // Return empty array if no categories exist\n    console.log('No carousel data found, returning empty array')\n    return NextResponse.json([])\n  } catch (error) {\n    console.error('Error in carousel API:', error)\n    return NextResponse.json([])\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('Carousel API: Creating new category')\n    const data = await request.json()\n\n    // Validate required fields\n    if (!data.title || !data.link) {\n      return NextResponse.json(\n        { error: 'Title and link are required' },\n        { status: 400 }\n      )\n    }\n\n    // Try to create in database\n    try {\n      const pool = createDatabaseConnectionFromEnv()\n\n      if (pool) {\n        console.log('Carousel API: Creating category in database')\n        const slug = data.id || data.title.toLowerCase().replace(/\\s+/g, '-')\n\n        const result = await pool.query(`\n          INSERT INTO radio_categories (name, slug, description, image_url, display_order, active)\n          VALUES ($1, $2, $3, $4, $5, $6)\n          RETURNING *\n        `, [\n          data.title,\n          slug,\n          data.description || '',\n          data.image && data.image.startsWith('/uploads/radio-categories/') \n            ? data.image \n            : '/images/placeholder.jpg',\n          data.displayOrder || 0,\n          true\n        ])\n\n        if (result.rows && result.rows.length > 0) {\n          const newCategory = {\n            id: result.rows[0].slug,\n            title: result.rows[0].name.toUpperCase(),\n            image: result.rows[0].image_url,\n            link: data.link\n          }\n          console.log('Carousel API: Category created in database:', newCategory)\n          return NextResponse.json(newCategory)\n        }\n      }\n    } catch (dbError) {\n      console.warn('Carousel API: Database creation failed:', dbError)\n    }\n\n    // If database fails, return error\n    return NextResponse.json(\n      { error: 'Failed to create category in database' },\n      { status: 500 }\n    )\n\n  } catch (error) {\n    console.error('Carousel API: Error creating category:', error)\n    return NextResponse.json(\n      { error: 'Failed to create category' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":3623},"app/programacion/programas/[id]/page.tsx":{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\nimport { getPrograms } from \"@/lib/api\"\nimport Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport { Calendar, Clock, Play } from \"lucide-react\"\n\nexport default async function ProgramDetailPage({ params }: { params: Promise<{ id: string }> }) {\n  const { id } = await params\n  const programs = await getPrograms()\n  const program = programs.find((p) => p.id === id)\n\n  if (!program) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-black\">\n        <div className=\"bg-gray-900 p-8 rounded-lg shadow-md max-w-md\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Programa no encontrado</h1>\n          <p className=\"text-gray-300 mb-6\">El programa que estás buscando no existe o ha sido eliminado.</p>\n          <Link href=\"/programacion/programas\" className=\"bg-[#e91e63] text-white px-4 py-2 rounded hover:bg-[#f06292]\">\n            Volver a Programas\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  // Episodios simulados\n  const episodes = [\n    {\n      id: \"1\",\n      title: \"Episodio 1: Introducción\",\n      description: \"Primer episodio de la temporada\",\n      duration: \"28:45\",\n      date: \"15 Mar 2023\",\n      thumbnail: program.imageUrl,\n    },\n    {\n      id: \"2\",\n      title: \"Episodio 2: Desarrollo\",\n      description: \"Segundo episodio de la temporada\",\n      duration: \"32:10\",\n      date: \"22 Mar 2023\",\n      thumbnail: program.imageUrl,\n    },\n    {\n      id: \"3\",\n      title: \"Episodio 3: Conclusiones\",\n      description: \"Tercer episodio de la temporada\",\n      duration: \"30:22\",\n      date: \"29 Mar 2023\",\n      thumbnail: program.imageUrl,\n    },\n  ]\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Navbar />\n\n      <main className=\"flex-grow bg-black text-white\">\n        {/* Hero Section */}\n        <section className=\"relative\">\n          <div className=\"w-full h-[50vh] relative\">\n            <Image\n              src={program?.imageUrl || \"/placeholder.svg?height=500&width=1000&text=No+Image\"}\n              alt={program?.title || \"Program\"}\n              fill\n              className=\"object-cover object-center\"\n              priority\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black via-black/70 to-transparent\"></div>\n          </div>\n\n          <div className=\"container mx-auto px-4 relative -mt-32 z-10\">\n            <div className=\"bg-gray-900 rounded-2xl shadow-xl overflow-hidden\">\n              <div className=\"p-6 md:p-8\">\n                <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">{program.title}</h1>\n                <p className=\"text-xl text-gray-300 mb-6\">{program.description}</p>\n\n                <div className=\"flex flex-wrap gap-4 mb-8\">\n                  <button className=\"bg-[#e91e63] text-white px-6 py-3 rounded-full font-medium hover:bg-[#f06292] flex items-center gap-2\">\n                    <Play className=\"w-5 h-5\" />\n                    Ver último episodio\n                  </button>\n                  <button className=\"border border-gray-600 text-white px-6 py-3 rounded-full font-medium hover:bg-gray-800\">\n                    Ver todos los episodios\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Episodes Section */}\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold mb-8\">Episodios recientes</h2>\n\n            <div className=\"space-y-6\">\n              {episodes.map((episode) => (\n                <div key={episode.id} className=\"bg-gray-900 rounded-xl overflow-hidden flex flex-col md:flex-row\">\n                  <div className=\"relative w-full md:w-64 h-48 flex-shrink-0\">\n                    <Image\n                      src={episode.thumbnail || \"/placeholder.svg?height=192&width=384&text=No+Image\"}\n                      alt={episode.title}\n                      fill\n                      className=\"object-cover\"\n                    />\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/30 hover:bg-black/50 transition-colors\">\n                      <button className=\"bg-[#e91e63] text-white rounded-full p-3 hover:bg-[#f06292]\">\n                        <Play className=\"w-8 h-8\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4 md:p-6 flex-grow\">\n                    <h3 className=\"text-xl font-bold mb-2\">{episode.title}</h3>\n                    <p className=\"text-gray-300 mb-4\">{episode.description}</p>\n\n                    <div className=\"flex items-center gap-4 text-gray-400\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span>{episode.duration}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        <span>{episode.date}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex justify-center mt-10\">\n              <Link\n                href=\"#\"\n                className=\"bg-gray-900 text-white px-6 py-3 rounded-full font-medium hover:bg-gray-800 flex items-center gap-2\"\n              >\n                Ver más episodios\n              </Link>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}\n","size_bytes":5711},"components/program-banner.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\n\ninterface ProgramBannerProps {\n  title: string;\n  subtitle?: string;\n  leftImageUrl?: string;\n  episodeTitle: string;\n  episodeDate: string;\n  episodeDescription: string;\n  episodeLength: string;\n  programLink: string;\n  episodesLink: string;\n  variant: \"red\" | \"blue\";\n  className?: string;\n}\n\nexport default function ProgramBanner({\n  title,\n  subtitle,\n  leftImageUrl,\n  episodeTitle,\n  episodeDate,\n  episodeDescription,\n  episodeLength,\n  programLink,\n  episodesLink,\n  variant = \"red\",\n  className,\n}: ProgramBannerProps) {\n  return (\n    <div\n      className={`flex flex-col md:flex-row ${className}`}\n      style={{\n        boxShadow: \"none\",\n        border: \"none\",\n        overflow: \"hidden\",\n      }}\n    >\n      {/* Left panel - Program info */}\n      <div\n        className=\"relative overflow-hidden h-[400px] md:w-2/3\"\n        style={{\n          border: \"none\",\n          margin: 0,\n          padding: 0,\n        }}\n      >\n        <Link\n          href={programLink}\n          className=\"block w-full h-full\"\n          style={{ display: \"block\" }}\n        >\n          {leftImageUrl ? (\n            <div className=\"relative w-full h-full\">\n              <Image\n                src={leftImageUrl || \"/placeholder.svg\"}\n                alt={title}\n                fill\n                className=\"object-cover\"\n                priority\n                sizes=\"(max-width: 768px) 100vw, 66vw\"\n                style={{\n                  display: \"block\",\n                  margin: 0,\n                  padding: 0,\n                  border: \"none\",\n                }}\n              />\n              <div\n                className=\"absolute inset-0 bg-black opacity-0 hover:opacity-10 transition-opacity duration-300\"\n                style={{ pointerEvents: \"none\" }}\n              ></div>\n            </div>\n          ) : (\n            <div className=\"bg-[#0c1e3e] h-full w-full flex items-center justify-center\">\n              <p className=\"text-white text-2xl\">Program Image</p>\n            </div>\n          )}\n\n          {/* Play button overlay on hover */}\n          <div className=\"absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300\">\n            <div className=\"bg-white/20 backdrop-blur-sm rounded-full p-4\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"white\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n              </svg>\n            </div>\n          </div>\n        </Link>\n      </div>\n\n      {/* Right panel - Episode info */}\n      <div\n        className=\"bg-[#333333] text-white p-8 md:w-1/3\"\n        style={{\n          border: \"none\",\n          margin: 0,\n          boxShadow: \"none\",\n        }}\n      >\n        <h3 className=\"text-3xl font-bold mb-4\">{title}</h3>\n\n        <p className=\"text-lg font-bold mb-4 leading-tight\">\"{episodeTitle}\"</p>\n\n        <p className=\"text-sm mb-6\">\n          {episodeDate} {episodeLength}\n        </p>\n\n        <p className=\"text-sm mb-8\">{episodeDescription}</p>\n\n        {/* Radio logo and play button */}\n        <div className=\"flex justify-between items-center\">\n          <Link\n            href={episodesLink}\n            className=\"text-white/80 hover:text-white transition-colors text-sm underline\"\n          >\n            Ver todos los episodios\n          </Link>\n\n          <Image\n            src=\"/images/radio-congreso.png\"\n            alt=\"Radio Congreso\"\n            width={80}\n            height={80}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3868},"app/api/users/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getAllUsers, createUser, deactivateUser, updateUserPassword } from '@/lib/auth'\nimport { cookies } from 'next/headers'\nimport jwt from 'jsonwebtoken'\nimport { getDatabaseConnection } from '@/lib/database'\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-key-change-in-production'\n\nasync function verifyAdmin(request: NextRequest) {\n  try {\n    const cookieStore = await cookies()\n    const token = cookieStore.get('auth-token')\n\n    if (!token) {\n      return false\n    }\n\n    const decoded = jwt.verify(token.value, JWT_SECRET) as any\n    return decoded.role === 'admin'\n  } catch (error) {\n    return false\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const pool = getDatabaseConnection()\n\n  if (!pool) {\n    return NextResponse.json(\n      { error: 'Database connection not available' },\n      { status: 500 }\n    )\n  }\n\n  try {\n    // Check if users table exists\n    const tableCheck = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'users'\n      );\n    `)\n\n    if (!tableCheck.rows[0].exists) {\n      console.log('Users table does not exist')\n      return NextResponse.json([])\n    }\n\n    const result = await pool.query(`\n      SELECT id, username, role, is_active, created_at\n      FROM users \n      ORDER BY created_at DESC\n    `)\n\n    return NextResponse.json(result.rows)\n  } catch (error) {\n    console.error('Error fetching users:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch users' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const isAdmin = await verifyAdmin(request)\n    if (!isAdmin) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { username, password, role } = await request.json()\n\n    if (!username || !password) {\n      return NextResponse.json(\n        { error: 'Username and password are required' },\n        { status: 400 }\n      )\n    }\n\n    const success = await createUser(username, password, role || 'admin')\n\n    if (!success) {\n      return NextResponse.json(\n        { error: 'Failed to create user' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error creating user:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const isAdmin = await verifyAdmin(request)\n    if (!isAdmin) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { username, newPassword, action } = await request.json()\n\n    if (!username) {\n      return NextResponse.json(\n        { error: 'Username is required' },\n        { status: 400 }\n      )\n    }\n\n    let success = false\n\n    if (action === 'deactivate') {\n      success = await deactivateUser(username)\n    } else if (action === 'updatePassword' && newPassword) {\n      success = await updateUserPassword(username, newPassword)\n    } else {\n      return NextResponse.json(\n        { error: 'Invalid action or missing parameters' },\n        { status: 400 }\n      )\n    }\n\n    if (!success) {\n      return NextResponse.json(\n        { error: 'Failed to update user' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error updating user:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":3668},"components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4429},"app/admin/pages/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Pencil, Save, Eye } from \"lucide-react\"\n\ninterface PageContent {\n  id: string\n  page: string\n  section: string\n  title: string\n  content: string\n  metadata?: any\n  updated_at: string\n}\n\nexport default function PagesAdmin() {\n  const [pages, setPages] = useState<PageContent[]>([])\n  const [loading, setLoading] = useState(true)\n  const [editingPage, setEditingPage] = useState<PageContent | null>(null)\n  const [saving, setSaving] = useState(false)\n\n  useEffect(() => {\n    fetchPages()\n  }, [])\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && editingPage) {\n        handleCancel()\n      }\n    }\n    \n    if (editingPage) {\n      document.addEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'hidden'\n    }\n    \n    return () => {\n      document.removeEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'unset'\n    }\n  }, [editingPage])\n\n  const fetchPages = async () => {\n    try {\n      const response = await fetch('/api/pages')\n      if (response.ok) {\n        const data = await response.json()\n        setPages(data)\n      }\n    } catch (error) {\n      console.error('Error fetching pages:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleEdit = (page: PageContent) => {\n    setEditingPage({ ...page })\n  }\n\n  const handleSave = async () => {\n    if (!editingPage) return\n\n    setSaving(true)\n    try {\n      const response = await fetch(`/api/pages/${editingPage.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: editingPage.title,\n          content: editingPage.content,\n          metadata: editingPage.metadata\n        }),\n      })\n\n      if (response.ok) {\n        await fetchPages()\n        setEditingPage(null)\n      }\n    } catch (error) {\n      console.error('Error saving page:', error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleCancel = () => {\n    setEditingPage(null)\n  }\n\n  const groupedPages = pages.reduce((acc, page) => {\n    if (!acc[page.page]) {\n      acc[page.page] = []\n    }\n    acc[page.page].push(page)\n    return acc\n  }, {} as Record<string, PageContent[]>)\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold\">Gestión de Páginas</h1>\n        <p className=\"text-gray-600\">Edita el contenido de las páginas del sitio web</p>\n      </div>\n\n      <Tabs defaultValue=\"transparencia\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"transparencia\">Transparencia</TabsTrigger>\n          <TabsTrigger value=\"contacto\">Contacto</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"transparencia\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {groupedPages.transparencia?.map((page) => (\n              <Card key={page.id}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{page.title}</CardTitle>\n                      <CardDescription>\n                        <Badge variant=\"secondary\">{page.section}</Badge>\n                        <span className=\"ml-2 text-sm text-gray-500\">\n                          Actualizado: {new Date(page.updated_at).toLocaleDateString()}\n                        </span>\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`/transparencia/${page.section}`, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(page)}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 line-clamp-3\">{page.content}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"contacto\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {groupedPages.contacto?.map((page) => (\n              <Card key={page.id}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{page.title}</CardTitle>\n                      <CardDescription>\n                        <Badge variant=\"secondary\">{page.section}</Badge>\n                        <span className=\"ml-2 text-sm text-gray-500\">\n                          Actualizado: {new Date(page.updated_at).toLocaleDateString()}\n                        </span>\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open('/contacto', '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(page)}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 line-clamp-3\">{page.content}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Modal */}\n      {editingPage && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-[60]\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              handleCancel()\n            }\n          }}\n        >\n          <div className=\"w-full max-w-4xl max-h-[95vh] bg-white rounded-lg shadow-2xl overflow-hidden\">\n            <div className=\"bg-white border-b px-6 py-4\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Editar: {editingPage.title}</h2>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Página: {editingPage.page} - Sección: {editingPage.section}\n              </p>\n            </div>\n            \n            <div className=\"p-6 overflow-y-auto max-h-[calc(95vh-140px)]\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\" className=\"text-sm font-medium text-gray-700\">Título</Label>\n                  <Input\n                    id=\"title\"\n                    value={editingPage.title}\n                    onChange={(e) => setEditingPage({ ...editingPage, title: e.target.value })}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\" className=\"text-sm font-medium text-gray-700\">Contenido</Label>\n                  <Textarea\n                    id=\"content\"\n                    rows={25}\n                    value={editingPage.content}\n                    onChange={(e) => setEditingPage({ ...editingPage, content: e.target.value })}\n                    className=\"font-mono text-sm mt-1 resize-none\"\n                    placeholder=\"Ingresa el contenido HTML...\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    💡 Puedes usar HTML y clases de Tailwind CSS para estilizar el contenido\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-50 border-t px-6 py-4 flex justify-end gap-3\">\n              <Button variant=\"outline\" onClick={handleCancel} disabled={saving}>\n                Cancelar\n              </Button>\n              <Button onClick={handleSave} disabled={saving}>\n                <Save className=\"h-4 w-4 mr-2\" />\n                {saving ? 'Guardando...' : 'Guardar Cambios'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":9536},"app/api/radio/programs/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { updateRadioProgram, deleteRadioProgram } from '@/lib/api'\n\nexport async function PUT(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const id = params.id\n    const data = await request.json()\n\n    // Validate required fields\n    if (!data.title || !data.description) {\n      return NextResponse.json(\n        { error: 'Title and description are required' },\n        { status: 400 }\n      )\n    }\n\n    const updatedProgram = await updateRadioProgram(id, data)\n\n    if (!updatedProgram) {\n      return NextResponse.json(\n        { error: 'Program not found' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(updatedProgram)\n  } catch (error) {\n    console.error('Error updating radio program:', error)\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'\n    return NextResponse.json(\n      { error: `Failed to update radio program: ${errorMessage}` },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PATCH(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n    const data = await request.json()\n\n    console.log('Patching radio program:', id, 'with data:', data)\n\n    const updatedProgram = await updateRadioProgram(id, data)\n\n    if (!updatedProgram) {\n      return NextResponse.json({ error: 'Program not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(updatedProgram)\n  } catch (error) {\n    console.error('Error updating radio program:', error)\n    return NextResponse.json({ error: 'Failed to update program' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const id = params.id\n\n    const result = await deleteRadioProgram(id)\n\n    if (!result) {\n      return NextResponse.json(\n        { error: 'Program not found' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting radio program:', error)\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'\n    return NextResponse.json(\n      { error: `Failed to delete radio program: ${errorMessage}` },\n      { status: 500 }\n    )\n  }\n}","size_bytes":2473},"app/radio/legisladores/page.tsx":{"content":"import Link from \"next/link\"\nimport Image from \"next/image\"\nimport { getLegislators, getParliamentaryGroups } from \"@/lib/api\"\nimport Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\n\nexport default async function LegislatorsPage() {\n  const [legislators, parliamentaryGroups] = await Promise.all([getLegislators(), getParliamentaryGroups()])\n\n  // Get parliamentary group names for display\n  const groupsMap = Object.fromEntries(parliamentaryGroups.map((group) => [group.id, group]))\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Navbar />\n\n      <main className=\"flex-grow bg-gray-100\">\n        <div className=\"container mx-auto py-8 px-4\">\n          <h1 className=\"text-3xl font-bold text-[#3b0764] mb-6\">Legisladores</h1>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {legislators.map((legislator) => (\n              <div key={legislator.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                <div className=\"flex items-center p-4\">\n                  <div className=\"w-20 h-20 relative rounded-full overflow-hidden mr-4\">\n                    <Image\n                      src={legislator.imageUrl || \"/placeholder.svg?height=80&width=80&text=Legislador\"}\n                      alt={legislator.name}\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                  <div>\n                    <h2 className=\"font-bold text-lg\">{legislator.name}</h2>\n                    <p className=\"text-gray-600\">{groupsMap[legislator.parliamentaryGroupId]?.name || \"Sin grupo\"}</p>\n                    <p className=\"text-gray-600\">{legislator.state}</p>\n                  </div>\n                </div>\n                <div className=\"bg-gray-50 px-4 py-3 border-t\">\n                  <Link\n                    href={`/radio/legisladores/${legislator.id}`}\n                    className=\"text-[#3b0764] font-medium hover:underline\"\n                  >\n                    Ver participaciones →\n                  </Link>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}\n","size_bytes":2244},"components/channel-bar.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport Image from 'next/image'\n\ninterface ChannelConfig {\n  id: string\n  name: string\n  number: string\n  logo: string\n  backgroundColor: string\n  textColor: string\n  transmisionesLink: string\n  isActive: boolean\n  order: number\n}\n\nexport default function ChannelBar() {\n  const [channels, setChannels] = useState<ChannelConfig[]>([])\n\n  useEffect(() => {\n    const fetchChannels = async () => {\n      try {\n        const response = await fetch('/api/channels')\n        if (response.ok) {\n          const channelData = await response.json()\n          setChannels(channelData.filter((ch: ChannelConfig) => ch.isActive).sort((a: ChannelConfig, b: ChannelConfig) => a.order - b.order))\n        }\n      } catch (error) {\n        console.error('Error fetching channels:', error)\n      }\n    }\n\n    fetchChannels()\n  }, [])\n\n  return (\n    <div className=\"bg-[#2e1a47] py-3\">\n      <div className=\"container mx-auto px-4 flex flex-wrap items-center justify-center gap-4\">\n        {/* Noticias Congreso Logo */}\n        <div className=\"flex items-center\">\n          <span>\n            <img src=\"/images/noticias-congreso-logo.png\" className=\"h-10\" alt=\"Noticias Congreso\" />\n          </span>\n        </div>\n\n        {/* Channel Buttons - Dynamic from CMS */}\n        <div className=\"flex items-center space-x-3\">\n          {channels.map((channel) => (\n            <a \n              key={channel.id}\n              href={channel.transmisionesLink} \n              className=\"flex items-center hover:opacity-80 transition-opacity\"\n            >\n              <span>\n                <Image \n                  src={channel.logo || '/images/placeholder-logo.png'} \n                  alt={`Logo ${channel.name}`}\n                  width={32}\n                  height={32}\n                  className=\"h-8 w-8\" \n                />\n              </span>\n              <div \n                className=\"text-white rounded px-2 py-1 text-xs font-medium ml-1 hidden md:inline\"\n                style={{ backgroundColor: channel.backgroundColor, color: channel.textColor }}\n              >\n                CANAL <span className=\"font-bold\">{channel.number}</span>\n              </div>\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2297},"components/expanded-program-navigation.tsx":{"content":"\n\"use client\"\n\nimport { useState, useCallback, useMemo } from \"react\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// Tipos definidos con claridad\ninterface NavigationItem {\n  id: string\n  title: string\n  subtitle?: string\n  image: string\n  link: string\n}\n\n// Datos extraídos fuera del componente para mejor mantenibilidad\nconst NAVIGATION_ITEMS: NavigationItem[] = [\n  {\n    id: \"radio\",\n    title: \"RADIO\",\n    subtitle: \"CONGRESO\",\n    image: \"/images/radio-congreso.png\",\n    link: \"/radio\",\n  },\n  {\n    id: \"programacion\",\n    title: \"NUESTRA\",\n    subtitle: \"PROGRAMACIÓN\",\n    image: \"/images/nuestra-programacion.png\",\n    link: \"/programacion\",\n  },\n  {\n    id: \"noticias\",\n    title: \"NOTICIAS\",\n    subtitle: \"CONGRESO\",\n    image: \"/images/noticias-congreso.png\",\n    link: \"/noticias\",\n  },\n  {\n    id: \"transparencia\",\n    title: \"TRANSPARENCIA\",\n    image: \"/images/transparencia.png\",\n    link: \"/transparencia\",\n  },\n  {\n    id: \"contacto\",\n    title: \"CONTACTO\",\n    image: \"/images/contacto.png\",\n    link: \"/contacto\",\n  },\n]\n\nexport default function ExpandedProgramNavigation() {\n  const [activeIndex, setActiveIndex] = useState(2) // Inicialmente el elemento del centro está activo\n\n  // Funciones memoizadas para evitar recreaciones innecesarias\n  const handlePrev = useCallback(() => {\n    setActiveIndex((prev) => (prev === 0 ? NAVIGATION_ITEMS.length - 1 : prev - 1))\n  }, [])\n\n  const handleNext = useCallback(() => {\n    setActiveIndex((prev) => (prev === NAVIGATION_ITEMS.length - 1 ? 0 : prev + 1))\n  }, [])\n\n  const handleDotClick = useCallback((index: number) => {\n    setActiveIndex(index)\n  }, [])\n\n  // Componente de elemento de navegación extraído para mejor legibilidad\n  const NavigationCard = useMemo(() => {\n    return function NavigationCard({\n      item,\n      index,\n      isActive,\n      distance,\n    }: {\n      item: NavigationItem\n      index: number\n      isActive: boolean\n      distance: number\n    }) {\n      // Clases calculadas basadas en el estado - DIMENSIONES AMPLIADAS (3x ancho, 2x alto)\n      const cardClasses = cn(\n        \"relative flex-shrink-0 rounded-3xl overflow-hidden transition-all duration-500 transform\",\n        // Tamaños responsivos ampliados para móvil y escritorio - WIDER CARDS\n        isActive\n          ? \"w-92.4 h-80 sm:w-104.4 sm:h-88 md:w-116.4 md:h-96 z-20 scale-100 shadow-lg\" // Incrementado 20% más en ancho\n          : distance === 1\n            ? \"w-69.6 h-64 sm:w-81.6 sm:h-72 md:w-92.4 md:h-80 z-10 scale-90 opacity-80\" // Incrementado 20% más en ancho\n            : \"hidden sm:block w-57.6 h-48 sm:w-63.6 sm:h-56 md:w-69.6 md:h-64 scale-75 opacity-60\", // Incrementado 20% más en ancho\n        \"hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50\",\n      )\n\n      // Tamaño de texto ampliado para mantener proporciones\n      const textClasses =\n        \"text-3xl sm:text-4xl md:text-5xl font-bold text-white absolute bottom-6 left-6 right-6 text-center drop-shadow-lg\"\n\n      return (\n        <Link\n          href={item.link}\n          className={cardClasses}\n          onClick={(e) => {\n            if (!isActive) {\n              e.preventDefault()\n              setActiveIndex(index)\n            }\n          }}\n          aria-label={`${item.title}${item.subtitle ? ` ${item.subtitle}` : \"\"}`}\n        >\n          {/* Imagen de fondo con overlay */}\n          <div className=\"absolute inset-0\">\n            <Image\n              src={item.image || \"/placeholder.svg\"}\n              alt=\"\"\n              fill\n              className=\"object-cover scale-98\"\n              sizes=\"(max-width: 640px) 240vw, (max-width: 768px) 120vw, 100vw\"\n              priority={isActive}\n            />\n          </div>\n\n          {/* Texto ampliado con más padding */}\n          <div className=\"absolute bottom-0 left-0 right-0 p-8 text-center\">\n            <div className=\"text-white font-bold drop-shadow-lg\">\n              <div className=\"text-2xl sm:text-3xl md:text-4xl\">{item.title}</div>\n              {item.subtitle && <div className=\"text-2xl sm:text-3xl md:text-4xl mt-2\">{item.subtitle}</div>}\n            </div>\n          </div>\n\n          {/* Efecto de brillo para el elemento activo */}\n          {isActive && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer\"></div>\n          )}\n        </Link>\n      )\n    }\n  }, [setActiveIndex])\n\n  return (\n    <section className=\"relative py-12 md:py-16 bg-[#fdf2f8]\" aria-label=\"Navegación de programas ampliada\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"relative max-w-full mx-auto px-8\">\n          {\" \"}\n          {/* Contenedor de ancho completo */}\n          {/* Botones de navegación ampliados */}\n          <button\n            onClick={handlePrev}\n            className=\"absolute -left-24 top-1/2 -translate-y-1/2 z-10 bg-white rounded-full p-3 sm:p-6 hover:bg-gray-100 transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-[#3b0764]\"\n            aria-label=\"Elemento anterior\"\n          >\n            <ChevronLeft className=\"w-12 h-12 sm:w-15 sm:h-15 md:w-18 md:h-18 text-[#3b0764]\" />{\" \"}\n            {/* Iconos más grandes */}\n          </button>\n          <button\n            onClick={handleNext}\n            className=\"absolute -right-24 top-1/2 -translate-y-1/2 z-10 bg-white rounded-full p-3 sm:p-6 hover:bg-gray-100 transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-[#3b0764]\"\n            aria-label=\"Elemento siguiente\"\n          >\n            <ChevronRight className=\"w-12 h-12 sm:w-15 sm:h-15 md:w-18 md:h-18 text-[#3b0764]\" />{\" \"}\n            {/* Iconos más grandes */}\n          </button>\n          {/* Contenedor de elementos con espaciado ampliado */}\n          <div className=\"flex justify-center items-center space-x-12 sm:space-x-18 md:space-x-24 py-8 overflow-hidden\">\n            {NAVIGATION_ITEMS.map((item, index) => {\n              // Calcular la distancia desde el elemento activo de manera más eficiente\n              const distance = Math.min(\n                Math.abs(index - activeIndex),\n                Math.abs(index - activeIndex - NAVIGATION_ITEMS.length),\n                Math.abs(index - activeIndex + NAVIGATION_ITEMS.length),\n              )\n\n              return (\n                <NavigationCard\n                  key={item.id}\n                  item={item}\n                  index={index}\n                  isActive={index === activeIndex}\n                  distance={distance}\n                />\n              )\n            })}\n          </div>\n          {/* Indicadores ampliados */}\n          <div className=\"flex justify-center mt-4 sm:mt-6 md:mt-8 space-x-3 sm:space-x-6\" role=\"tablist\">\n            {NAVIGATION_ITEMS.map((item, index) => (\n              <button\n                key={index}\n                onClick={() => handleDotClick(index)}\n                className={cn(\n                  \"h-3 sm:h-4 rounded-full transition-all\",\n                  index === activeIndex ? \"bg-[#3b0764] w-12 sm:w-18\" : \"bg-gray-300 w-4.5 sm:w-6\",\n                )}\n                aria-selected={index === activeIndex}\n                aria-label={`Ir a ${item.title}`}\n                role=\"tab\"\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n","size_bytes":7497},"app/api/video-news/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getVideoNewsFromDB, createVideoNewsInDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const videoNews = await getVideoNewsFromDB()\n    console.log('API: Video news fetched from DB:', videoNews.length, 'items')\n\n    return new Response(JSON.stringify(videoNews), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'Last-Modified': new Date().toUTCString(),\n        'Vary': 'Accept-Encoding',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching video news:', error)\n    return NextResponse.json({ error: 'Failed to fetch video news' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n\n    // Determine status based on publish date\n    const publishDate = new Date(data.publishedAt)\n    const now = new Date()\n    const status = data.status || (publishDate <= now ? 'published' : 'scheduled')\n\n    const videoNews = await createVideoNewsInDB({\n      ...data,\n      status\n    })\n    return NextResponse.json(videoNews)\n  } catch (error) {\n    console.error('Error creating video news:', error)\n    return NextResponse.json({ error: 'Failed to create video news' }, { status: 500 })\n  }\n}","size_bytes":1450},"app/api/radio/carousel/[id]/route.ts":{"content":"import { NextResponse, NextRequest } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const resolvedParams = await params\n    const categoryId = resolvedParams.id\n    console.log('Carousel API: Updating category with ID:', categoryId)\n    const data = await request.json()\n    console.log('Carousel API: Update data received:', data)\n\n    // Validate required fields\n    if (!data.title) {\n      return NextResponse.json(\n        { error: 'Title is required' },\n        { status: 400 }\n      )\n    }\n\n    // Try to update in database first\n    try {\n      const pool = createDatabaseConnectionFromEnv()\n\n      if (pool) {\n        console.log('Carousel API: Updating in database')\n\n        // First check if the category exists\n        const existingResult = await pool.query(`\n          SELECT * FROM radio_categories WHERE slug = $1\n        `, [categoryId])\n\n        if (existingResult.rows && existingResult.rows.length > 0) {\n          // Update the existing category with the new image URL\n          const imageUrl = data.image && data.image.startsWith('/uploads/') \n            ? data.image \n            : existingResult.rows[0].image_url\n\n          const updateResult = await pool.query(`\n            UPDATE radio_categories \n            SET name = $1, image_url = $2, link_url = $3, updated_at = NOW()\n            WHERE slug = $4\n            RETURNING *\n          `, [\n            data.title,\n            imageUrl,\n            data.link || `/radio/${categoryId}`,\n            categoryId\n          ])\n\n          if (updateResult.rows && updateResult.rows.length > 0) {\n            const updatedCategory = {\n              id: updateResult.rows[0].slug,\n              title: updateResult.rows[0].name.toUpperCase(),\n              image: updateResult.rows[0].image_url,\n              link: updateResult.rows[0].link_url || `/radio/${updateResult.rows[0].slug}`\n            }\n            console.log('Carousel API: Category updated in database:', updatedCategory)\n            return NextResponse.json(updatedCategory)\n          }\n        } else {\n          console.log('Carousel API: Category not found in database, creating new one')\n          // Create new category if it doesn't exist\n          const createResult = await pool.query(`\n            INSERT INTO radio_categories (name, slug, description, image_url, link_url, display_order, active)\n            VALUES ($1, $2, $3, $4, $5, $6, $7)\n            RETURNING *\n          `, [\n            data.title,\n            categoryId,\n            '',\n            data.image || '/images/placeholder.jpg',\n            data.link || `/radio/${categoryId}`,\n            0,\n            true\n          ])\n\n          if (createResult.rows && createResult.rows.length > 0) {\n            const newCategory = {\n              id: createResult.rows[0].slug,\n              title: createResult.rows[0].name.toUpperCase(),\n              image: createResult.rows[0].image_url,\n              link: createResult.rows[0].link_url || `/radio/${createResult.rows[0].slug}`\n            }\n            console.log('Carousel API: Category created in database:', newCategory)\n            return NextResponse.json(newCategory)\n          }\n        }\n      }\n    } catch (dbError) {\n      console.warn('Carousel API: Database update failed:', dbError)\n    }\n\n    // Return error if database operations fail\n    return NextResponse.json(\n      { error: 'Failed to update category in database' },\n      { status: 500 }\n    )\n\n  } catch (error) {\n    console.error('Carousel API: Error updating category:', error)\n    return NextResponse.json(\n      { error: 'Failed to update category' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const resolvedParams = await params\n    const categoryId = resolvedParams.id\n\n    console.log('Carousel API: Deleting category:', categoryId)\n\n    const pool = createDatabaseConnectionFromEnv()\n\n    if (!pool) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      )\n    }\n\n    // Delete the category from the database\n    const result = await pool.query(`\n      DELETE FROM radio_categories \n      WHERE slug = $1 OR id::text = $1\n      RETURNING id\n    `, [categoryId])\n\n    if (result.rowCount === 0) {\n      return NextResponse.json(\n        { error: 'Category not found' },\n        { status: 404 }\n      )\n    }\n\n    console.log('Carousel API: Category deleted successfully')\n    return NextResponse.json({ success: true })\n\n  } catch (error) {\n    console.error('Carousel API: Error deleting category:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete category' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":4911},"app/transparencia/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport Link from \"next/link\"\nimport Footer from \"@/components/footer\"\nimport TransparencyCard from \"@/components/transparency/TransparencyCard\"\n\ninterface TransparencyFileItem {\n  label: string\n  fileUrl?: string\n  fileType?: string\n}\n\ninterface TransparencyCard {\n  title: string\n  description: string\n  linkUrl?: string\n  hasButton?: boolean\n  items?: TransparencyFileItem[]\n}\n\ninterface TransparencySection {\n  id: string\n  sectionKey: string\n  sectionTitle: string\n  iconType?: string\n  cardsData: TransparencyCard[]\n  displayOrder: number\n  isActive: boolean\n}\n\nexport default function TransparenciaPage() {\n  const [sections, setSections] = useState<TransparencySection[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadSections()\n  }, [])\n\n  const loadSections = async () => {\n    try {\n      const response = await fetch('/api/transparency-sections', {\n        cache: 'no-store'\n      })\n      if (response.ok) {\n        const data = await response.json()\n        setSections(data)\n      }\n    } catch (error) {\n      console.error('Error loading transparency sections:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getSectionByKey = (key: string) => {\n    return sections.find(s => s.sectionKey === key)\n  }\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId)\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'start' })\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-700 via-purple-600 to-pink-500 flex items-center justify-center\">\n        <p className=\"text-white text-xl\">Cargando...</p>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <main className=\"min-h-screen bg-gradient-to-br from-purple-700 via-purple-600 to-pink-500\">\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"absolute top-20 left-10 w-96 h-96 bg-purple-400/20 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-10 right-10 w-96 h-96 bg-pink-400/20 rounded-full blur-3xl\"></div>\n        </div>\n\n        <section className=\"relative z-10 pt-0 pb-0 mt-8\">\n          <div className=\"w-full h-[150px] overflow-hidden relative\">\n            <div \n              className=\"absolute inset-0 w-full h-full bg-cover bg-center\"\n              style={{\n                backgroundImage: `url('/images/transparency/purple-gradient-bg.png')`\n              }}\n            />\n            <img \n              src=\"/images/transparency/transparencia-banner.png\" \n              alt=\"Transparencia\" \n              className=\"relative w-full h-full object-contain z-10\"\n            />\n          </div>\n        </section>\n\n        <section className=\"relative z-10 py-12 pb-24\">\n          <div \n            className=\"absolute inset-0 w-full h-full bg-cover bg-center opacity-50\"\n            style={{\n              backgroundImage: `url('/images/transparency/purple-gradient-bg.png')`,\n              top: '-150px',\n              height: 'calc(100% + 150px)'\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"relative w-full max-w-4xl\" style={{ height: '600px' }}>\n\n                <button onClick={() => scrollToSection('acerca')} className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-20 cursor-pointer\">\n                  <div className=\"w-48 h-48 rounded-full border-4 border-white/50 bg-purple-600/80 backdrop-blur-sm flex items-center justify-center hover:bg-purple-500 transition-all\">\n                    <div className=\"text-center\">\n                      <h2 className=\"text-2xl font-bold text-white\">Acerca de</h2>\n                      <h2 className=\"text-2xl font-bold text-white\">nosotros</h2>\n                    </div>\n                  </div>\n                </button>\n\n                <svg className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-full max-w-[500px] max-h-[500px]\" viewBox=\"0 0 500 500\">\n                  <circle cx=\"250\" cy=\"250\" r=\"180\" fill=\"none\" stroke=\"white\" strokeWidth=\"2\" opacity=\"0.3\" />\n                </svg>\n\n                <button onClick={() => scrollToSection('informacion')} className=\"absolute top-0 left-1/2 -translate-x-1/2 group cursor-pointer\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-28 h-28 rounded-full border-4 border-white bg-purple-600/80 backdrop-blur-sm flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:bg-purple-500\">\n                      <svg className=\"w-14 h-14 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                      </svg>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-white font-semibold text-xs max-w-[120px]\">Información de utilidad pública</p>\n                    </div>\n                  </div>\n                </button>\n\n                <button onClick={() => scrollToSection('compromisos')} className=\"absolute top-16 right-8 group cursor-pointer\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-28 h-28 rounded-full border-4 border-white bg-purple-600/80 backdrop-blur-sm flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:bg-purple-500\">\n                      <svg className=\"w-14 h-14 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\" />\n                      </svg>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-white font-semibold text-xs max-w-[120px]\">Compromisos con la Transparencia</p>\n                    </div>\n                  </div>\n                </button>\n\n                <button onClick={() => scrollToSection('focalizada')} className=\"absolute bottom-16 right-8 group cursor-pointer\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-28 h-28 rounded-full border-4 border-white bg-purple-600/80 backdrop-blur-sm flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:bg-purple-500\">\n                      <svg className=\"w-14 h-14 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\" />\n                      </svg>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-white font-semibold text-xs max-w-[120px]\">Transparencia Focalizada</p>\n                    </div>\n                  </div>\n                </button>\n\n                <button onClick={() => scrollToSection('datos-abiertos')} className=\"absolute bottom-0 left-1/2 -translate-x-1/2 group cursor-pointer\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-28 h-28 rounded-full border-4 border-white bg-purple-600/80 backdrop-blur-sm flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:bg-purple-500\">\n                      <svg className=\"w-14 h-14 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4\" />\n                      </svg>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-white font-semibold text-xs max-w-[120px]\">Datos Abiertos</p>\n                    </div>\n                  </div>\n                </button>\n\n                <button onClick={() => scrollToSection('normatividad')} className=\"absolute bottom-16 left-8 group cursor-pointer\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-28 h-28 rounded-full border-4 border-white bg-purple-600/80 backdrop-blur-sm flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:bg-purple-500\">\n                      <svg className=\"w-14 h-14 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3\" />\n                      </svg>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-white font-semibold text-xs max-w-[120px]\">Normatividad</p>\n                    </div>\n                  </div>\n                </button>\n\n                <button onClick={() => scrollToSection('estructura')} className=\"absolute top-16 left-8 group cursor-pointer\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-28 h-28 rounded-full border-4 border-white bg-purple-600/80 backdrop-blur-sm flex items-center justify-center transform transition-all duration-300 hover:scale-110 hover:bg-purple-500\">\n                      <svg className=\"w-14 h-14 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                      </svg>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-white font-semibold text-xs max-w-[120px]\">Estructura y Presupuesto</p>\n                    </div>\n                  </div>\n                </button>\n\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section id=\"informacion\" className=\"relative py-16 scroll-mt-20 overflow-hidden\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('/images/transparency/hexagonal-pattern-bg.png')`\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            {(() => {\n              const section = getSectionByKey('informacion-utilidad')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/informacion-banner.png\" \n                      alt=\"Información de Utilidad Pública\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n\n        <section id=\"estructura\" className=\"relative py-16 scroll-mt-20 overflow-hidden\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('/images/transparency/hexagonal-pattern-bg.png')`\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            {(() => {\n              const section = getSectionByKey('estructura-presupuesto')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/estructura-banner.png\" \n                      alt=\"Estructura y Presupuesto\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n\n        <section id=\"normatividad\" className=\"relative py-16 scroll-mt-20 overflow-hidden\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('/images/transparency/hexagonal-pattern-bg.png')`\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            {(() => {\n              const section = getSectionByKey('normatividad')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/normatividad-banner.png\" \n                      alt=\"Normatividad\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n\n        <section id=\"compromisos\" className=\"relative py-16 scroll-mt-20 overflow-hidden\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('/images/transparency/hexagonal-pattern-bg.png')`\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            {(() => {\n              const section = getSectionByKey('compromisos-transparencia')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/compromisos-banner.png\" \n                      alt=\"Compromisos con la Transparencia\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n\n        <section id=\"focalizada\" className=\"relative py-16 scroll-mt-20 overflow-hidden\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('/images/transparency/hexagonal-pattern-bg.png')`\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            {(() => {\n              const section = getSectionByKey('transparencia-focalizada')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/focalizada-banner.png\" \n                      alt=\"Transparencia Focalizada\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                        items={card.items}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n\n        <section id=\"datos-abiertos\" className=\"relative py-16 scroll-mt-20 overflow-hidden\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('/images/transparency/hexagonal-pattern-bg.png')`\n            }}\n          />\n          <div className=\"container mx-auto px-6 relative z-10\">\n            {(() => {\n              const section = getSectionByKey('datos-abiertos')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/datos-abiertos-banner.png\" \n                      alt=\"Datos Abiertos\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                        items={card.items}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n\n        <section id=\"acerca\" className=\"bg-white py-16 scroll-mt-20\">\n          <div className=\"container mx-auto px-6\">\n            {(() => {\n              const section = getSectionByKey('acerca-nosotros')\n              if (!section) return null\n\n              return (\n                <>\n                  <div className=\"w-full mb-12\">\n                    <img \n                      src=\"/images/transparency/acerca-nosotros-banner.png\" \n                      alt=\"Acerca de Nosotros\" \n                      className=\"w-full h-auto object-contain\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    {section.cardsData.map((card, index) => (\n                      <TransparencyCard\n                        key={index}\n                        title={card.title}\n                        description={card.description}\n                        linkUrl={card.linkUrl}\n                        hasButton={card.hasButton}\n                      />\n                    ))}\n                  </div>\n                </>\n              )\n            })()}\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </>\n  )\n}","size_bytes":20880},"components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1656},"lib/auth.ts":{"content":"\nimport bcrypt from 'bcryptjs'\nimport { getDatabaseConnection } from './database'\n\ninterface User {\n  id: number\n  username: string\n  password_hash: string\n  role: string\n  is_active: boolean\n}\n\nexport async function validateUser(username: string, password: string): Promise<boolean> {\n  try {\n    console.log('Validating user:', username)\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      console.error('Environment variables check:', {\n        hasDatabaseUrl: !!process.env.DATABASE_URL,\n        hasPgHost: !!process.env.PGHOST,\n        hasPgDatabase: !!process.env.PGDATABASE,\n        hasPgUser: !!process.env.PGUSER,\n        hasPgPassword: !!process.env.PGPASSWORD\n      })\n      return false\n    }\n\n    const result = await pool.query(\n      'SELECT password_hash FROM users WHERE username = $1 AND is_active = true',\n      [username]\n    )\n\n    if (result.rows.length === 0) {\n      return false\n    }\n\n    const user = result.rows[0]\n    return await bcrypt.compare(password, user.password_hash)\n  } catch (error) {\n    console.error('Error validating user:', error)\n    return false\n  }\n}\n\nexport async function getUserByUsername(username: string): Promise<User | null> {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      return null\n    }\n\n    const result = await pool.query(\n      'SELECT id, username, password_hash, role, is_active FROM users WHERE username = $1 AND is_active = true',\n      [username]\n    )\n\n    if (result.rows.length === 0) {\n      return null\n    }\n\n    return result.rows[0]\n  } catch (error) {\n    console.error('Error fetching user:', error)\n    return null\n  }\n}\n\nexport async function createUser(username: string, password: string, role: string = 'admin'): Promise<boolean> {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      return false\n    }\n\n    const passwordHash = await bcrypt.hash(password, 10)\n    \n    await pool.query(\n      'INSERT INTO users (username, password_hash, role) VALUES ($1, $2, $3)',\n      [username, passwordHash, role]\n    )\n\n    return true\n  } catch (error) {\n    console.error('Error creating user:', error)\n    return false\n  }\n}\n\nexport async function updateUserPassword(username: string, newPassword: string): Promise<boolean> {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      return false\n    }\n\n    const passwordHash = await bcrypt.hash(newPassword, 10)\n    \n    await pool.query(\n      'UPDATE users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP WHERE username = $2',\n      [passwordHash, username]\n    )\n\n    return true\n  } catch (error) {\n    console.error('Error updating user password:', error)\n    return false\n  }\n}\n\nexport async function getAllUsers(): Promise<User[]> {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      return []\n    }\n\n    const result = await pool.query(\n      'SELECT id, username, role, is_active FROM users ORDER BY created_at DESC'\n    )\n\n    return result.rows\n  } catch (error) {\n    console.error('Error fetching users:', error)\n    return []\n  }\n}\n\nexport async function deactivateUser(username: string): Promise<boolean> {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      return false\n    }\n\n    await pool.query(\n      'UPDATE users SET is_active = false, updated_at = CURRENT_TIMESTAMP WHERE username = $1',\n      [username]\n    )\n\n    return true\n  } catch (error) {\n    console.error('Error deactivating user:', error)\n    return false\n  }\n}\n\nexport function generatePasswordHash(password: string): Promise<string> {\n  return bcrypt.hash(password, 10)\n}\n\n// Initialize default admin user if no users exist\nexport async function initializeDefaultUsers(): Promise<void> {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      console.error('Database connection not available')\n      return\n    }\n\n    // Check if any users exist\n    const result = await pool.query('SELECT COUNT(*) FROM users')\n    const userCount = parseInt(result.rows[0].count)\n\n    if (userCount === 0) {\n      console.log('No users found, creating default admin users...')\n      \n      // Create default admin users\n      await createUser('admin', 'admin123', 'admin')\n      await createUser('cmscanal', 'hgqV&d3FJ!eDv#2Ji7v!kA', 'admin')\n      \n      console.log('Default admin users created successfully')\n    }\n  } catch (error) {\n    console.error('Error initializing default users:', error)\n  }\n}\n","size_bytes":4785},"components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white p-1 text-gray-900 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7421},"app/admin/organs/page.tsx":{"content":"\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Trash2, Edit3, Plus, Eye } from \"lucide-react\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport Image from \"next/image\"\n\ninterface Organ {\n  id: string\n  title: string\n  description: string\n  imageUrl: string\n  url?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport default function OrgansAdmin() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [organs, setOrgans] = useState<Organ[]>([])\n  const [loading, setLoading] = useState(true)\n  const [isUploading, setIsUploading] = useState(false)\n  const [editingOrgan, setEditingOrgan] = useState<Organ | null>(null)\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [imagePreview, setImagePreview] = useState<string>(\"\")\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    imageUrl: '',\n    url: ''\n  })\n  const [error, setError] = useState('')\n  const [editingId, setEditingId] = useState<string | null>(null)\n\n  useEffect(() => {\n    fetchOrgans()\n  }, [])\n\n  const fetchOrgans = async () => {\n    try {\n      const response = await fetch('/api/organs')\n      if (response.ok) {\n        const data = await response.json()\n        setOrgans(data)\n      }\n    } catch (error) {\n      console.error('Error fetching organs:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleFileUpload = async (file: File): Promise<string> => {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', 'organs')\n\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: formData,\n    })\n\n    if (!response.ok) {\n      throw new Error('Error al subir la imagen')\n    }\n\n    const data = await response.json()\n    return data.imageUrl\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!formData.title.trim() || !formData.description.trim()) {\n      setError('Título y descripción son requeridos')\n      return\n    }\n\n    // Check if we have either an image URL or a file to upload\n    if (!formData.imageUrl.trim() && !selectedFile) {\n      setError('Debe proporcionar una imagen (URL o archivo)')\n      return\n    }\n\n    setLoading(true)\n    try {\n      setIsUploading(true)\n\n      let finalImageUrl = formData.imageUrl.trim()\n\n      // If a file is selected, upload it first\n      if (selectedFile) {\n        finalImageUrl = await handleFileUpload(selectedFile)\n      }\n\n      const method = editingOrgan ? 'PUT' : 'POST'\n      const url = editingOrgan ? `/api/organs/${editingOrgan.id}` : '/api/organs'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: formData.title.trim(),\n          description: formData.description.trim(),\n          imageUrl: finalImageUrl,\n          url: formData.url.trim() || null,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Error al ${editingOrgan ? 'actualizar' : 'crear'} el órgano`)\n      }\n\n      setFormData({ title: '', description: '', imageUrl: '', url: '' })\n      setSelectedFile(null)\n      setError('')\n      setEditingOrgan(null)\n      setIsDialogOpen(false)\n      fetchOrgans()\n    } catch (error) {\n      setError(`Error al ${editingOrgan ? 'actualizar' : 'crear'} el órgano`)\n    } finally {\n      setLoading(false)\n      setIsUploading(false)\n    }\n  }\n\n  const handleEdit = (organ: Organ) => {\n    setFormData({\n      title: organ.title,\n      description: organ.description,\n      imageUrl: organ.imageUrl,\n      url: organ.url || ''\n    })\n    setSelectedFile(null)\n    setEditingOrgan(organ)\n    setIsDialogOpen(true)\n    setImagePreview(organ.imageUrl)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que deseas eliminar este órgano?')) {\n      try {\n        const response = await fetch(`/api/organs/${id}`, {\n          method: 'DELETE',\n        })\n\n        if (response.ok) {\n          await fetchOrgans()\n        }\n      } catch (error) {\n        console.error('Error deleting organ:', error)\n      }\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      imageUrl: '',\n      url: '',\n    })\n    setEditingOrgan(null)\n    setSelectedFile(null)\n    setImagePreview(\"\")\n  }\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false)\n    resetForm()\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setSelectedFile(file)\n      // Create preview URL\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string)\n      }\n      reader.readAsDataURL(file)\n      // Clear URL field when file is selected\n      setFormData(prev => ({ ...prev, imageUrl: \"\" }))\n    }\n  }\n\n  const uploadImage = async (file: File): Promise<string> => {\n    const uploadFormData = new FormData()\n    uploadFormData.append('file', file)\n    uploadFormData.append('type', 'organs')\n\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: uploadFormData,\n    })\n\n    if (!response.ok) {\n      throw new Error('Error uploading image')\n    }\n\n    const result = await response.json()\n    return result.imageUrl\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-lg\">Cargando órganos...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestión de Órganos</h1>\n          <p className=\"text-gray-600\">Administrar órganos del Canal del Congreso</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsDialogOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Órgano\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingOrgan ? 'Editar Órgano' : 'Crear Nuevo Órgano'}\n              </DialogTitle>\n              <DialogDescription>\n                {editingOrgan ? 'Modifica los datos del órgano' : 'Completa la información del nuevo órgano'}\n              </DialogDescription>\n            </DialogHeader>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Título</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Descripción</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"url\">URL (opcional)</Label>\n                <Input\n                  id=\"url\"\n                  type=\"url\"\n                  value={formData.url}\n                  onChange={(e) => setFormData({ ...formData, url: e.target.value })}\n                  placeholder=\"https://ejemplo.com\"\n                />\n              </div>\n\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Imagen\n              </label>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"text-sm text-gray-600\">Subir archivo:</label>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  {selectedFile && (\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      Archivo seleccionado: {selectedFile.name}\n                    </p>\n                  )}\n                </div>\n                <div className=\"text-center text-gray-500 text-sm\">— O —</div>\n                <div>\n                  <Label htmlFor=\"imageUrl\">URL de imagen</Label>\n                  <Input\n                    id=\"imageUrl\"\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"Opcional - URL de la imagen\"\n                  />\n                </div>\n\n                {/* Image Preview */}\n                {(imagePreview || formData.imageUrl) && (\n                  <div className=\"mt-3\">\n                    <label className=\"text-sm text-gray-600\">Vista previa:</label>\n                    <div className=\"mt-2 p-2 border border-gray-200 rounded-md\">\n                      <img\n                        src={imagePreview || formData.imageUrl}\n                        alt=\"Vista previa\"\n                        className=\"max-w-full h-32 object-contain rounded\"\n                        onError={() => {\n                          console.log(\"Error loading preview image\")\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-3\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleDialogClose} disabled={isUploading}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isUploading}>\n                  {isUploading ? \"Subiendo...\" : (editingOrgan ? 'Actualizar' : 'Crear')} Órgano\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {organs.map((organ) => (\n          <Card key={organ.id}>\n            <CardHeader>\n              <div className=\"relative aspect-video mb-4\">\n                <Image\n                  src={organ.imageUrl || \"/placeholder.svg\"}\n                  alt={organ.title}\n                  fill\n                  className=\"object-cover rounded-lg\"\n                />\n              </div>\n              <CardTitle className=\"text-lg\">{organ.title}</CardTitle>\n              <CardDescription>\n                {organ.description.length > 100\n                  ? `${organ.description.substring(0, 100)}...`\n                  : organ.description\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-between items-center\">\n                <div className=\"text-sm text-gray-500\">\n                  Creado: {new Date(organ.createdAt).toLocaleDateString()}\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(organ)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(organ.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {organs.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <Eye className=\"h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No hay órganos</h3>\n            <p className=\"text-gray-600 text-center mb-4\">\n              Aún no se han creado órganos. Crea el primer órgano para comenzar.\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Crear Primer Órgano\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}","size_bytes":12954},"app/api/defensoria-audiencia/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { query } from '@/lib/database'\n\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n\n    const result = await query(`\n      SELECT * FROM defensoria_content WHERE id = $1\n    `, [id])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Content not found' }, \n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error fetching defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Error fetching content' }, \n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n    const body = await request.json()\n    const { section, title, content, file_url, metadata } = body\n\n    const result = await query(`\n      UPDATE defensoria_content \n      SET section = $1, title = $2, content = $3, file_url = $4, metadata = $5, updated_at = NOW()\n      WHERE id = $6\n      RETURNING *\n    `, [section, title, content, file_url || null, JSON.stringify(metadata || {}), id])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Content not found' }, \n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Error updating content' }, \n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n\n    await query('DELETE FROM defensoria_content WHERE id = $1', [id])\n    \n    return NextResponse.json({ message: 'Content deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting defensoria content:', error)\n    return NextResponse.json(\n      { error: 'Error deleting content' }, \n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2236},"app/admin/radio-programs/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Plus, Edit, Trash2, Upload } from \"lucide-react\"\nimport Image from \"next/image\"\n\ninterface RadioProgram {\n  id: string\n  title: string\n  description: string\n  imageUrl: string\n  latestEpisode: {\n    title: string\n    date: string\n    duration: string\n    description: string\n  }\n  programLink: string\n  episodesLink: string\n  category?: string\n  displayOrder?: number\n  featured?: boolean\n}\n\nexport default function RadioProgramsAdmin() {\n  const [programs, setPrograms] = useState<RadioProgram[]>([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [editingProgram, setEditingProgram] = useState<RadioProgram | null>(null)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    imageUrl: '',\n    episodeTitle: '',\n    episodeDate: '',\n    episodeDuration: '',\n    episodeDescription: '',\n    \n    category: '',\n    displayOrder: 0,\n    featured: false\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [isUploading, setIsUploading] = useState(false)\n\n  useEffect(() => {\n    loadPrograms()\n  }, [])\n\n  const loadPrograms = async () => {\n    try {\n      const response = await fetch('/api/radio/programs')\n      if (!response.ok) throw new Error('Failed to fetch programs')\n      const data = await response.json()\n      setPrograms(data)\n    } catch (error) {\n      console.error('Error loading programs:', error)\n      setPrograms([])\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsUploading(true)\n\n    try {\n      let imageUrl = formData.imageUrl\n\n      // If there's a selected file, upload it first\n      if (selectedFile) {\n        const uploadFormData = new FormData()\n        uploadFormData.append('file', selectedFile)\n\n        const uploadResponse = await fetch('/api/upload', {\n          method: 'POST',\n          body: uploadFormData\n        })\n\n        if (!uploadResponse.ok) {\n          const errorData = await uploadResponse.json()\n          throw new Error(errorData.error || 'Failed to upload image')\n        }\n\n        const uploadResult = await uploadResponse.json()\n        imageUrl = uploadResult.imageUrl\n      }\n\n      const programData = {\n        title: formData.title,\n        description: formData.description,\n        imageUrl,\n        latestEpisode: {\n          title: formData.episodeTitle,\n          date: formData.episodeDate,\n          duration: formData.episodeDuration,\n          description: formData.episodeDescription\n        },\n        \n        category: formData.category,\n        displayOrder: formData.displayOrder,\n        featured: formData.featured\n      }\n\n      const method = editingProgram ? 'PUT' : 'POST'\n      const url = editingProgram ? `/api/radio/programs/${editingProgram.id}` : '/api/radio/programs'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to save program')\n      }\n\n      setIsDialogOpen(false)\n      resetForm()\n      loadPrograms()\n    } catch (error) {\n      console.error('Error saving program:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'\n      alert(`Error al guardar el programa: ${errorMessage}`)\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      imageUrl: '',\n      episodeTitle: '',\n      episodeDate: '',\n      episodeDuration: '',\n      episodeDescription: '',\n      \n      category: '',\n      displayOrder: 0,\n      featured: false\n    })\n    setSelectedFile(null)\n    setEditingProgram(null)\n  }\n\n  const handleEdit = (program: RadioProgram) => {\n    setEditingProgram(program)\n    setFormData({\n      title: program.title,\n      description: program.description,\n      imageUrl: program.imageUrl,\n      episodeTitle: program.latestEpisode.title,\n      episodeDate: program.latestEpisode.date,\n      episodeDuration: program.latestEpisode.duration,\n      episodeDescription: program.latestEpisode.description,\n      \n      category: program.category || '',\n      displayOrder: program.displayOrder || 0,\n      featured: program.featured || false\n    })\n    setSelectedFile(null)\n    setIsDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar este programa de radio?')) {\n      try {\n        const response = await fetch(`/api/radio/programs/${id}`, {\n          method: 'DELETE'\n        })\n\n        if (!response.ok) {\n          throw new Error('Failed to delete program')\n        }\n\n        loadPrograms()\n      } catch (error) {\n        console.error('Error deleting program:', error)\n        alert('Error al eliminar el programa')\n      }\n    }\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setSelectedFile(file)\n      // Create preview URL\n      const previewUrl = URL.createObjectURL(file)\n      setFormData({ ...formData, imageUrl: previewUrl })\n    }\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Programas de Radio</h1>\n          <p className=\"text-gray-600\">Gestiona los programas de Radio Congreso</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Programa\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"sm:max-w-[600px] bg-white max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProgram ? 'Editar Programa' : 'Nuevo Programa'}\n              </DialogTitle>\n              <DialogDescription>\n                Completa la información del programa de radio.\n              </DialogDescription>\n            </DialogHeader>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Título del Programa</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Descripción</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"imageFile\">Imagen del Programa</Label>\n                <div className=\"space-y-2\">\n                  <Input\n                    id=\"imageFile\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                    required={!editingProgram && !formData.imageUrl}\n                  />\n                  {formData.imageUrl && (\n                    <div className=\"mt-2\">\n                      <p className=\"text-sm text-gray-600 mb-2\">Vista previa:</p>\n                      <Image\n                        src={formData.imageUrl}\n                        alt=\"Vista previa\"\n                        width={100}\n                        height={60}\n                        className=\"rounded object-cover border\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-semibold mb-3\">Último Episodio</h4>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"episodeTitle\">Título del Episodio</Label>\n                    <Input\n                      id=\"episodeTitle\"\n                      value={formData.episodeTitle}\n                      onChange={(e) => setFormData({ ...formData, episodeTitle: e.target.value })}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"episodeDate\">Fecha</Label>\n                      <Input\n                        id=\"episodeDate\"\n                        value={formData.episodeDate}\n                        onChange={(e) => setFormData({ ...formData, episodeDate: e.target.value })}\n                        placeholder=\"ej: martes, 25 de marzo de 2025\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"episodeDuration\">Duración</Label>\n                      <Input\n                        id=\"episodeDuration\"\n                        value={formData.episodeDuration}\n                        onChange={(e) => setFormData({ ...formData, episodeDuration: e.target.value })}\n                        placeholder=\"ej: 60MIN\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"episodeDescription\">Descripción del Episodio</Label>\n                    <Textarea\n                      id=\"episodeDescription\"\n                      value={formData.episodeDescription}\n                      onChange={(e) => setFormData({ ...formData, episodeDescription: e.target.value })}\n                      required\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-semibold mb-3\">Configuración del Programa</h4>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"featured\"\n                      checked={formData.featured || false}\n                      onChange={(e) => setFormData({ ...formData, featured: e.target.checked })}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor=\"featured\" className=\"text-sm font-medium\">\n                      Programa Destacado\n                    </Label>\n                    <span className=\"text-xs text-gray-500 ml-2\">\n                      (Aparecerá en la sección \"Programas Destacados\")\n                    </span>\n                  </div>\n\n                  \n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isUploading}>\n                  {isUploading ? (\n                    <>\n                      <Upload className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Guardando...\n                    </>\n                  ) : (\n                    editingProgram ? 'Actualizar' : 'Crear'\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Programas de Radio</CardTitle>\n          <CardDescription>\n            {programs.length} programas configurados\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Imagen</TableHead>\n                <TableHead>Programa</TableHead>\n                <TableHead>Último Episodio</TableHead>\n                <TableHead>Destacado</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {programs.map((program) => (\n                <TableRow key={program.id}>\n                  <TableCell>\n                    <Image\n                      src={program.imageUrl}\n                      alt={program.title}\n                      width={60}\n                      height={40}\n                      className=\"rounded object-cover\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{program.title}</p>\n                      <p className=\"text-sm text-gray-600\">{program.description}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium text-sm\">{program.latestEpisode.title}</p>\n                      <p className=\"text-xs text-gray-500\">{program.latestEpisode.date}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={program.featured || false}\n                        onChange={async (e) => {\n                          try {\n                            const response = await fetch(`/api/radio/programs/${program.id}`, {\n                              method: 'PATCH',\n                              headers: {\n                                'Content-Type': 'application/json',\n                              },\n                              body: JSON.stringify({\n                                featured: e.target.checked\n                              }),\n                            })\n                            if (response.ok) {\n                              // Update the local state instead of reloading\n                              setPrograms(prevPrograms => \n                                prevPrograms.map(p => \n                                  p.id === program.id \n                                    ? { ...p, featured: e.target.checked }\n                                    : p\n                                )\n                              )\n                            } else {\n                              throw new Error('Failed to update featured status')\n                            }\n                          } catch (error) {\n                            console.error('Error updating featured status:', error)\n                            alert('Error al actualizar el estado destacado')\n                            // Revert the checkbox state\n                            e.target.checked = !e.target.checked\n                          }\n                        }}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm text-gray-600\">\n                        {program.featured ? 'Sí' : 'No'}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(program)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(program.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":16657},"app/api/parliamentary-groups/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getParliamentaryGroupsFromDB, createParliamentaryGroupInDB } from '@/lib/api-database'\nimport { getParliamentaryGroups, createParliamentaryGroup } from '@/lib/api'\n\nexport async function GET() {\n  try {\n    // Try database first, fallback to mock data\n    if (typeof window === 'undefined') {\n      try {\n        const dbGroups = await getParliamentaryGroupsFromDB()\n        return NextResponse.json(dbGroups)\n      } catch (error) {\n        console.error('Failed to fetch from database, using mock data:', error)\n        const mockGroups = await getParliamentaryGroups()\n        return NextResponse.json(mockGroups)\n      }\n    } else {\n      const mockGroups = await getParliamentaryGroups()\n      return NextResponse.json(mockGroups)\n    }\n  } catch (error) {\n    console.error('Error fetching parliamentary groups:', error)\n    return NextResponse.json({ error: 'Failed to fetch parliamentary groups' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n    \n    // Try database first, fallback to mock data\n    if (typeof window === 'undefined') {\n      try {\n        const newGroup = await createParliamentaryGroupInDB(data)\n        return NextResponse.json(newGroup, { status: 201 })\n      } catch (error) {\n        console.error('Failed to create in database, using mock data:', error)\n        const newGroup = await createParliamentaryGroup(data)\n        return NextResponse.json(newGroup, { status: 201 })\n      }\n    } else {\n      const newGroup = await createParliamentaryGroup(data)\n      return NextResponse.json(newGroup, { status: 201 })\n    }\n  } catch (error) {\n    console.error('Error creating parliamentary group:', error)\n    return NextResponse.json({ error: 'Failed to create parliamentary group' }, { status: 500 })\n  }\n}\n","size_bytes":1885},"components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"app/radio/page.tsx":{"content":"\"use client\";\n\nexport const dynamic = \"force-dynamic\";\n\nimport { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport ProgramCarousel, {\n  type CarouselItem,\n} from \"@/components/program-carousel\";\nimport { useFloatingPlayer } from \"@/components/floating-player-context\";\nimport ProgramBannerHtml from \"@/components/program-banner-html\";\nimport Footer from \"@/components/footer\";\n\nimport ChannelBar from \"@/components/channel-bar\";\n\n// Types for our CMS data\ninterface RadioProgram {\n  id: string;\n  title: string;\n  description: string;\n  imageUrl: string;\n  latestEpisode: {\n    title: string;\n    date: string;\n    duration: string;\n    description: string;\n  };\n  programLink: string;\n  episodesLink: string;\n  featured?: boolean;\n}\n\ninterface RadioConfig {\n  streamUrl: string;\n  heroImage: string;\n  channels: Array<{\n    id: string;\n    img: string;\n    name: string;\n    color: string;\n    active: boolean;\n  }>;\n  navigation: Array<{\n    name: string;\n    href: string;\n  }>;\n  categoryImages: {\n    [key: string]: string;\n  };\n  carousel: Array<{\n    id: string;\n    title: string;\n    image: string;\n    link: string;\n  }>;\n}\n\n// Default fallback data\nconst DEFAULT_CONFIG: RadioConfig = {\n  streamUrl:\n    \"https://ccstreaming.packet.mx/LiveApp/streams/Radio_kd5oiNTTWO0gEOFc23dr762145.m3u8\",\n  heroImage: \"/images/radio-hero-banner.png\",\n  channels: [\n    {\n      id: \"radio-congreso\",\n      name: \"Radio Congreso\",\n      color: \"transparent\",\n      img: \"\",\n      active: false,\n    },\n    {\n      id: \"canal-45-1\",\n      img: \"/images/channel-c-logo.png\",\n      name: \"CANAL 45.1\",\n      color: \"#4a4a4a\",\n      active: false,\n    },\n    {\n      id: \"canal-45-2\",\n      img: \"/images/channel-g-logo.png\",\n      name: \"CANAL 45.2\",\n      color: \"#b91c1c\",\n      active: false,\n    },\n    {\n      id: \"canal-45-3\",\n      img: \"/images/channel-d-logo.png\",\n      name: \"CANAL 45.3\",\n      color: \"#15803d\",\n      active: false,\n    },\n  ],\n  navigation: [\n    { name: \"Toma Tribuna\", href: \"/radio/toma-tribuna\" },\n    { name: \"Entrevistas\", href: \"/radio/entrevistas\" },\n    { name: \"Sitio Abierto\", href: \"/radio/sitio-abierto\" },\n    { name: \"Noticias del Congreso\", href: \"/radio/noticias\" },\n  ],\n  categoryImages: {},\n  carousel: [],\n};\n\nconst DEFAULT_CAROUSEL_ITEMS: CarouselItem[] = [\n  {\n    id: \"programas\",\n    title: \"\",\n    image: \"/images/placeholder.jpg\",\n    link: \"/radio/programas\",\n  },\n  {\n    id: \"sitio-abierto\",\n    title: \"\",\n    image: \"/images/placeholder.jpg\",\n    link: \"/radio/sitio-abierto\",\n  },\n  {\n    id: \"entrevistas\",\n    title: \"\",\n    image: \"/images/placeholder.jpg\",\n    link: \"/radio/entrevistas\",\n  },\n  {\n    id: \"noticias-congreso\",\n    title: \"\",\n    image: \"/images/placeholder.jpg\",\n    link: \"/radio/noticias-congreso\",\n  },\n];\n\n// Streaming Player Button Component (for HLS streams)\nfunction StreamingPlayerButton({ streamUrl }: { streamUrl: string }) {\n  const { showPlayer } = useFloatingPlayer();\n  const [isMobileDevice, setIsMobileDevice] = useState(false);\n  const [isHydrated, setIsHydrated] = useState(false);\n\n  useEffect(() => {\n    setIsHydrated(true);\n    setIsMobileDevice(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent));\n  }, []);\n\n  const handleStreamClick = () => {\n    // Show floating player only for desktop\n    showPlayer(streamUrl, \"Radio Congreso - EN VIVO\");\n  };\n\n  return (\n    <div className=\"bg-black text-white py-3 px-4\">\n      <div className=\"container mx-auto flex items-center justify-center\">\n        {!isHydrated ? (\n          // Show button during SSR and initial hydration\n          <button\n            onClick={handleStreamClick}\n            className=\"bg-[#e11d48] hover:bg-[#be185d] text-white rounded-full p-3 flex items-center space-x-2 transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M8 5v14l11-7z\" />\n            </svg>\n            <span className=\"font-medium\">Radio en Vivo</span>\n          </button>\n        ) : isMobileDevice ? (\n          // HTML5 Audio Player for Mobile\n          <div className=\"w-full max-w-md\">\n            <div className=\"bg-[#1f2937] rounded-lg p-4\">\n              <div className=\"flex items-center justify-center mb-3\">\n                <div className=\"flex items-center space-x-2 text-green-400\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm font-medium\">\n                    EN VIVO - Radio Congreso\n                  </span>\n                </div>\n              </div>\n\n              <audio\n                src={streamUrl}\n                controls\n                playsInline\n                crossOrigin=\"anonymous\"\n                webkit-playsinline=\"true\"\n                preload=\"none\"\n                className=\"w-full h-12 bg-gray-800 rounded\"\n                style={{\n                  backgroundColor: \"#374151\",\n                  borderRadius: \"6px\",\n                }}\n              />\n\n              <div className=\"text-center mt-2 text-xs text-gray-400\">\n                Toca play para escuchar la transmisión en vivo\n              </div>\n            </div>\n          </div>\n        ) : (\n          // Button for Desktop (shows floating player)\n          <button\n            onClick={handleStreamClick}\n            className=\"bg-[#e11d48] hover:bg-[#be185d] text-white rounded-full p-3 flex items-center space-x-2 transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M8 5v14l11-7z\" />\n            </svg>\n            <span className=\"font-medium\">Radio en Vivo</span>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function RadioPage() {\n  const [radioPrograms, setRadioPrograms] = useState<RadioProgram[]>([]);\n  const [carouselItems, setCarouselItems] = useState<CarouselItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [radioConfig, setRadioConfig] = useState<RadioConfig>(DEFAULT_CONFIG);\n  const [isHydrated, setIsHydrated] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  useEffect(() => {\n    setIsHydrated(true);\n  }, []);\n\n  useEffect(() => {\n    if (!isHydrated) return;\n\n    async function loadRadioData() {\n      try {\n        const baseUrl =\n          typeof window !== \"undefined\"\n            ? window.location.origin\n            : \"http://localhost:3000\";\n\n        // Load config and carousel data in parallel\n        const [configResult, carouselResult, programsResult] =\n          await Promise.allSettled([\n            fetch(`${baseUrl}/api/radio/config`, {\n              cache: \"no-store\",\n            }).then((res) => (res.ok ? res.json() : null)),\n\n            fetch(`${baseUrl}/api/radio/carousel`, {\n              cache: \"no-store\",\n            }).then((res) => (res.ok ? res.json() : DEFAULT_CAROUSEL_ITEMS)),\n\n            fetch(`${baseUrl}/api/radio/programs`, {\n              cache: \"no-store\",\n            }).then((res) => (res.ok ? res.json() : [])),\n          ]);\n\n        // Handle config\n        const config =\n          configResult.status === \"fulfilled\" ? configResult.value : null;\n        const mergedConfig = {\n          ...DEFAULT_CONFIG,\n          ...config,\n          streamUrl: config?.streamUrl || DEFAULT_CONFIG.streamUrl,\n          heroImage: config?.heroImage || DEFAULT_CONFIG.heroImage,\n          channels: config?.channels || DEFAULT_CONFIG.channels,\n          navigation: config?.navigation || DEFAULT_CONFIG.navigation,\n          categoryImages: config?.categoryImages || {},\n        };\n        setRadioConfig(mergedConfig);\n\n        // Handle carousel - prioritize API data over defaults\n        const carousel =\n          carouselResult.status === \"fulfilled\" ? carouselResult.value : null;\n        console.log(\"Carousel data from API:\", carousel);\n\n        if (carousel && Array.isArray(carousel) && carousel.length > 0) {\n          const validCarousel = carousel\n            .filter((item) => item && item.id && item.title && item.link)\n            .map((item) => ({\n              ...item,\n              // Ensure image URL is properly handled - don't add timestamp if already present\n              image:\n                item.image && item.image !== \"/images/placeholder.jpg\"\n                  ? item.image.includes(\"?t=\")\n                    ? item.image\n                    : `${item.image}?t=${Date.now()}`\n                  : item.image,\n            }));\n\n          if (validCarousel.length > 0) {\n            console.log(\"Using CMS carousel data:\", validCarousel);\n            setCarouselItems(validCarousel);\n          } else {\n            console.log(\"No valid CMS carousel items, using defaults\");\n            setCarouselItems(DEFAULT_CAROUSEL_ITEMS);\n          }\n        } else {\n          console.log(\"No carousel data from API, using defaults\");\n          setCarouselItems(DEFAULT_CAROUSEL_ITEMS);\n        }\n\n        // Handle programs\n        const programs =\n          programsResult.status === \"fulfilled\" ? programsResult.value : [];\n        const validPrograms = Array.isArray(programs)\n          ? programs.filter(\n              (program) =>\n                program &&\n                program.id &&\n                program.title &&\n                program.programLink &&\n                program.episodesLink,\n            )\n          : [];\n        setRadioPrograms(validPrograms);\n      } catch (error) {\n        console.error(\"Error loading radio data:\", error);\n        // Use defaults on error\n        setRadioConfig(DEFAULT_CONFIG);\n        setCarouselItems(DEFAULT_CAROUSEL_ITEMS);\n        setRadioPrograms([]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    loadRadioData();\n  }, [isHydrated]);\n\n  const programSlug = (title: string) => {\n    return title\n      .toLowerCase()\n      .replace(/\\s+/g, \"-\")\n      .replace(/[áéíóú]/g, (match: string) => {\n        const accents: { [key: string]: string } = {\n          á: \"a\",\n          é: \"e\",\n          í: \"i\",\n          ó: \"o\",\n          ú: \"u\",\n        };\n        return accents[match] || match;\n      })\n      .replace(/[^a-z0-9-]/g, \"\");\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-white\">\n      <main className=\"flex-grow\">\n        <div className=\"bg-[#3b0764] text-white py-2\">\n          <div className=\"container mx-auto px-4 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-1 md:space-x-2 overflow-x-auto scrollbar-hide min-w-0 flex-1\">\n              {radioConfig.channels.map((channel) => {\n                // Map channel IDs to transmisiones routes\n                const getChannelLink = (channelId: string) => {\n                  switch (channelId) {\n                    case \"canal-45-1\":\n                      return \"/transmisiones?stream=1\";\n                    case \"canal-45-2\":\n                      return \"/transmisiones?stream=3\";\n                    case \"canal-45-3\":\n                      return \"/transmisiones?stream=2\";\n                    case \"canal-45-4\":\n                      return \"/transmisiones?stream=4\";\n                    default:\n                      return \"/radio\"; // Stay on radio for Radio Congreso\n                  }\n                };\n\n                const channelLink = getChannelLink(channel.id);\n                const isRadio = channel.id === \"radio-congreso\";\n\n                if (isRadio) {\n                  return (\n                    <div\n                      key={channel.id}\n                      className={`rounded-full px-4 py-0.5 flex items-center whitespace-nowrap flex-shrink-0 ${\n                        channel.active && false ? \"ring-2 ring-white/50\" : \"\"\n                      }`}\n                      style={{\n                        backgroundColor:\n                          channel.id === \"radio-congreso\"\n                            ? \"transparent\"\n                            : channel.color,\n                      }}\n                    >\n                      <Image\n                        src=\"/images/radio-congreso-logo.png\"\n                        alt={channel.name}\n                        width={120}\n                        height={120}\n                        className=\"h-30 w-30 object-contain\"\n                      />\n                    </div>\n                  );\n                }\n\n                return (\n                  <Link\n                    key={channel.id}\n                    href={channelLink}\n                    className={`rounded-full p-1.5 flex items-center whitespace-nowrap flex-shrink-0 hover:opacity-80 transition-opacity ${\n                      channel.active ? \"ring-2 ring-white/50\" : \"\"\n                    }`}\n                    style={{ backgroundColor: channel.color }}\n                  >\n                    <Image\n                      src={channel.img}\n                      alt={channel.name}\n                      width={20}\n                      height={20}\n                      className=\"rounded-full\"\n                    />\n                    <span className=\"text-xs font-medium ml-1 mr-1 hidden md:inline\">\n                      {channel.name}\n                    </span>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Dynamic Navigation Bar with Created Programs */}\n        <div className=\"bg-black text-white py-2\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex justify-start\">\n              <div className=\"flex justify-start space-x-2 md:space-x-4 overflow-x-auto scrollbar-hide min-w-0\">\n                {radioPrograms.map((program) => (\n                  <Link\n                    key={program.id}\n                    href={`/radio/${programSlug(program.title)}/episodios`}\n                    className=\"text-sm hover:text-gray-300 transition-colors whitespace-nowrap flex-shrink-0\"\n                  >\n                    {program.title}\n                  </Link>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"relative\">\n          <div className=\"w-full relative overflow-hidden\">\n            <Image\n              src={radioConfig.heroImage}\n              alt=\"Radio Congreso\"\n              width={1200}\n              height={300}\n              className=\"w-full object-cover h-48 md:h-64 lg:h-80\"\n              priority\n            />\n            <div className=\"absolute top-2 right-2 md:top-4 md:right-4 bg-red-600 text-white px-2 py-1 md:px-3 md:py-1 rounded-full flex items-center space-x-1 md:space-x-2\">\n              <div className=\"w-1.5 h-1.5 md:w-2 md:h-2 bg-white rounded-full animate-pulse\"></div>\n              <span className=\"text-xs md:text-sm font-medium\">EN VIVO</span>\n            </div>\n          </div>\n          <StreamingPlayerButton streamUrl={radioConfig.streamUrl} />\n        </section>\n\n        <section\n          className=\"py-12\"\n          style={{\n            backgroundImage: \"url('/images/light-hexagon-pattern.png')\",\n          }}\n        >\n          <div className=\"container mx-auto px-4\">\n            <ProgramCarousel items={carouselItems} />\n          </div>\n        </section>\n\n        <section\n          className=\"py-4 md:py-8\"\n          style={{\n            backgroundImage: \"url('/images/light-hexagon-pattern.png')\",\n          }}\n        >\n          <div className=\"container mx-auto px-2 md:px-4\">\n            <div className=\"mb-4 md:mb-8\">\n              <h2 className=\"text-2xl md:text-3xl font-bold text-[#3b0764]\">\n                Programas Destacados\n              </h2>\n              <div className=\"h-1 w-16 md:w-20 bg-[#e11d48] mt-2\"></div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-24 h-24 mx-auto mb-4 bg-gray-200 rounded-full flex items-center justify-center\">\n                  <svg\n                    className=\"w-12 h-12 text-gray-400 animate-spin\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                    />\n                  </svg>\n                </div>\n                <p className=\"text-gray-500\">Cargando programas...</p>\n              </div>\n            ) : radioPrograms.filter((program) => program.featured).length >\n              0 ? (\n              <div className=\"space-y-12\">\n                {radioPrograms\n                  .filter((program) => program.featured)\n                  .map((program) => (\n                    <div key={program.id} className=\"w-full overflow-hidden\">\n                      <div className=\"block md:hidden\">\n                        <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                          <Link\n                            href={`/radio/${programSlug(program.title)}/episodios`}\n                          >\n                            <div className=\"relative h-48 w-full cursor-pointer hover:opacity-90 transition-opacity\">\n                              <Image\n                                src={\n                                  program.imageUrl ||\n                                  \"/placeholder.svg?height=192&width=384\"\n                                }\n                                alt={program.title}\n                                fill\n                                className=\"object-cover\"\n                              />\n                            </div>\n                          </Link>\n\n                          <div className=\"p-4\">\n                            <h3 className=\"text-xl font-bold text-[#3b0764] mb-2\">\n                              {program.title}\n                            </h3>\n\n                            <div className=\"border-t pt-3 mt-3\">\n                              <h4 className=\"font-semibold text-gray-800 mb-2 text-sm\">\n                                Último episodio:\n                              </h4>\n                              <h5 className=\"font-bold text-gray-900 mb-2 text-base leading-tight\">\n                                {program.latestEpisode?.title || \"Sin título\"}\n                              </h5>\n\n                              <div className=\"flex flex-wrap gap-2 mb-3 text-xs text-gray-600\">\n                                <span className=\"bg-gray-100 px-2 py-1 rounded\">\n                                  {program.latestEpisode?.date || \"\"}\n                                </span>\n                                <span className=\"bg-purple-100 px-2 py-1 rounded text-purple-700\">\n                                  {program.latestEpisode?.duration || \"\"}\n                                </span>\n                              </div>\n\n                              <p className=\"text-gray-700 text-sm mb-4 line-clamp-6\">\n                                {program.latestEpisode?.description ||\n                                  \"No hay descripción disponible\"}\n                              </p>\n\n                              <div className=\"flex flex-col gap-2\">\n                                <Link\n                                  href={`/radio/${programSlug(program.title)}/episodios`}\n                                  className=\"border border-[#3b0764] text-[#3b0764] py-2 px-4 rounded text-center text-sm font-medium hover:bg-[#3b0764] hover:text-white transition-colors\"\n                                >\n                                  Todos los Episodios\n                                </Link>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"hidden md:block\">\n                        <ProgramBannerHtml\n                          title={program.title}\n                          leftImageUrl={program.imageUrl}\n                          episodeTitle={\n                            program.latestEpisode?.title || \"Sin título\"\n                          }\n                          episodeDate={program.latestEpisode?.date || \"\"}\n                          episodeLength={program.latestEpisode?.duration || \"\"}\n                          episodeDescription={\n                            program.latestEpisode?.description ||\n                            \"No hay descripción disponible\"\n                          }\n                          programLink={`/radio/${programSlug(program.title)}/episodios`}\n                          episodesLink={`/radio/${programSlug(program.title)}/episodios`}\n                        />\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"w-24 h-24 mx-auto mb-4 bg-gray-200 rounded-full flex items-center justify-center\">\n                  <svg\n                    className=\"w-12 h-12 text-gray-400\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n                    />\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">\n                  No hay programas disponibles\n                </h3>\n                <p className=\"text-gray-500\">\n                  Los programas destacados aparecerán aquí cuando estén\n                  disponibles.\n                </p>\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":22258},"app/admin/page.tsx":{"content":"\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Database, Users, Settings, FileText, Radio, Tv } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function AdminDashboard() {\n  const [user, setUser] = useState<any>(null)\n\n  useEffect(() => {\n    // Check if user is authenticated\n    fetch('/api/auth/verify')\n      .then(res => res.json())\n      .then(data => {\n        if (data.user) {\n          setUser(data.user)\n        }\n      })\n      .catch(err => console.error('Auth check failed:', err))\n  }, [])\n\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/auth/logout', { method: 'POST' })\n      window.location.href = '/login'\n    } catch (error) {\n      console.error('Logout failed:', error)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-3 sm:p-4 md:p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 md:mb-8 gap-4\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Panel de Administración</h1>\n            <p className=\"text-sm sm:text-base text-gray-600\">Canal del Congreso - CMS</p>\n          </div>\n          <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4\">\n            {user && (\n              <span className=\"text-xs sm:text-sm text-gray-600\">\n                Bienvenido, {user.username}\n              </span>\n            )}\n            <Button onClick={handleLogout} variant=\"outline\" className=\"w-full sm:w-auto min-h-[44px]\">\n              Cerrar Sesión\n            </Button>\n          </div>\n        </div>\n\n        {/* Dashboard Cards */}\n        <div className=\"grid gap-4 sm:gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n          {/* Database Configuration */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Configuración de Base de Datos\n              </CardTitle>\n              <CardDescription>\n                Configurar y gestionar la conexión a la base de datos\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/admin/database-config\">\n                <Button className=\"w-full min-h-[44px] text-sm sm:text-base\">\n                  Configurar Base de Datos\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Programs Management */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Tv className=\"h-5 w-5\" />\n                Gestión de Programas\n              </CardTitle>\n              <CardDescription>\n                Administrar programas de televisión y contenido\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/admin/programs\">\n                <Button className=\"w-full min-h-[44px] text-sm sm:text-base\">\n                  Gestionar Programas\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Live Streams */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Radio className=\"h-5 w-5\" />\n                Transmisiones en Vivo\n              </CardTitle>\n              <CardDescription>\n                Gestionar señales y transmisiones en directo\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/admin/live-streams\">\n                <Button className=\"w-full min-h-[44px] text-sm sm:text-base\">\n                  Gestionar Transmisiones\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* News Management */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Gestión de Noticias\n              </CardTitle>\n              <CardDescription>\n                Administrar noticias y artículos del congreso\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/admin/news\">\n                <Button className=\"w-full min-h-[44px] text-sm sm:text-base\">\n                  Gestionar Noticias\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Transparency Sections */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Secciones de Transparencia\n              </CardTitle>\n              <CardDescription>\n                Administrar contenido de transparencia\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/admin/transparency-sections\">\n                <Button className=\"w-full min-h-[44px] text-sm sm:text-base\">\n                  Gestionar Transparencia\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Configuración\n              </CardTitle>\n              <CardDescription>\n                Configuraciones generales del sistema\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button className=\"w-full min-h-[44px] text-sm sm:text-base\" variant=\"outline\">\n                Configuración\n              </Button>\n            </CardContent>\n          </Card>\n\n\n\n\n          <Card>\n          <CardHeader>\n            <CardTitle>Gestión de Radio</CardTitle>\n            <CardDescription>\n              Administra contenido de Radio Congreso\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 sm:space-y-3\">\n              <Link \n                href=\"/admin/radio-programs\" \n                className=\"block p-3 border rounded hover:bg-gray-50 min-h-[44px] flex flex-col justify-center touch-manipulation\"\n              >\n                <div className=\"font-medium text-sm sm:text-base\">Programas de Radio</div>\n                <div className=\"text-xs sm:text-sm text-gray-600\">Gestionar programas destacados y episodios</div>\n              </Link>\n               <Link \n                href=\"/admin/radio-categories\" \n                className=\"block p-3 border rounded hover:bg-gray-50 min-h-[44px] flex flex-col justify-center touch-manipulation\"\n              >\n                <div className=\"font-medium text-sm sm:text-base\">Categorías del Carrusel</div>\n                <div className=\"text-xs sm:text-sm text-gray-600\">Gestionar imágenes de categorías</div>\n              </Link>\n\n              <Link \n                href=\"/admin/radio-episodes\" \n                className=\"block p-3 border rounded hover:bg-gray-50 min-h-[44px] flex flex-col justify-center touch-manipulation\"\n              >\n                <div className=\"font-medium text-sm sm:text-base\">Radio Episodes</div>\n                <div className=\"text-xs sm:text-sm text-gray-600\">Gestionar episodios de audio MP3</div>\n              </Link>\n\n              <Link \n                href=\"/admin/radio-live\" \n                className=\"block p-3 border rounded hover:bg-gray-50 min-h-[44px] flex flex-col justify-center touch-manipulation\"\n              >\n                <div className=\"font-medium text-sm sm:text-base\">Radio en Vivo</div>\n                <div className=\"text-xs sm:text-sm text-gray-600\">Configurar transmisión en vivo</div>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n\n        {/* Status Section */}\n        <div className=\"mt-6 md:mt-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg sm:text-xl\">Estado del Sistema</CardTitle>\n              <CardDescription className=\"text-sm sm:text-base\">\n                Información sobre el estado actual del CMS\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-3 sm:gap-4 sm:grid-cols-2 md:grid-cols-3\">\n                <div className=\"flex items-center gap-2 p-2 sm:p-3 bg-green-50 rounded-lg\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full flex-shrink-0\"></div>\n                  <span className=\"text-xs sm:text-sm font-medium\">Sistema Operativo</span>\n                </div>\n                <div className=\"flex items-center gap-2 p-2 sm:p-3 bg-green-50 rounded-lg\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full flex-shrink-0\"></div>\n                  <span className=\"text-xs sm:text-sm font-medium\">Autenticación Activa</span>\n                </div>\n                <div className=\"flex items-center gap-2 p-2 sm:p-3 bg-yellow-50 rounded-lg sm:col-span-2 md:col-span-1\">\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full flex-shrink-0\"></div>\n                  <span className=\"text-xs sm:text-sm font-medium\">Base de Datos</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":9664},"app/transparencia/datos-abiertos/page.tsx":{"content":"\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\nimport TransparencySubmenu from \"@/components/transparency/submenu\"\nimport { Download, FileText, Calendar } from \"lucide-react\"\n\ninterface Dataset {\n  id: string\n  title: string\n  description: string\n  category: string\n  update_frequency: string\n  last_updated: string\n  formats: string\n  file_url: string\n  file_name: string\n  file_size: number\n  file_type: string\n}\n\ninterface TransparencySection {\n  sectionKey: string\n  sectionTitle: string\n  cardsData: Array<{\n    title: string\n    description: string\n    linkUrl: string\n    hasButton: boolean\n  }>\n}\n\nexport default function DatosAbiertosPage() {\n  const [datasets, setDatasets] = useState<Dataset[]>([])\n  const [sectionData, setSectionData] = useState<TransparencySection | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadDatasets()\n    loadSectionData()\n  }, [])\n\n  const loadDatasets = async () => {\n    try {\n      const response = await fetch('/api/datasets')\n      if (response.ok) {\n        const data = await response.json()\n        setDatasets(data)\n      }\n    } catch (error) {\n      console.error('Error loading datasets:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadSectionData = async () => {\n    try {\n      const response = await fetch('/api/transparency-sections/datos-abiertos')\n      if (response.ok) {\n        const data = await response.json()\n        setSectionData(data)\n      }\n    } catch (error) {\n      console.error('Error loading section data:', error)\n    }\n  }\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    if (bytes === 0) return '0 Bytes'\n    const i = Math.floor(Math.log(bytes) / Math.log(1024))\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]\n  }\n\n  const getFileIcon = (fileType: string) => {\n    const iconClass = \"h-8 w-8\"\n    switch (fileType?.toLowerCase()) {\n      case 'pdf':\n        return <FileText className={`${iconClass} text-red-600`} />\n      case 'xlsx':\n      case 'xls':\n      case 'csv':\n        return <FileText className={`${iconClass} text-green-600`} />\n      case 'doc':\n      case 'docx':\n        return <FileText className={`${iconClass} text-blue-600`} />\n      default:\n        return <FileText className={`${iconClass} text-gray-600`} />\n    }\n  }\n\n  return (\n    <>\n      <Navbar />\n      <TransparencySubmenu />\n      <main className=\"container mx-auto px-4 py-12 min-h-screen\">\n        <h1 className=\"text-3xl font-bold mb-6\">\n          {sectionData?.sectionTitle || 'Datos Abiertos'}\n        </h1>\n\n        {sectionData?.cardsData && sectionData.cardsData.length > 0 && (\n          <div className=\"prose max-w-none mb-8\">\n            {sectionData.cardsData.map((card, index) => (\n              <div key={index} className=\"mb-6\">\n                <h3 className=\"text-xl font-semibold mb-2\">{card.title}</h3>\n                <p className=\"text-lg text-gray-700\">{card.description}</p>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {loading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-600\">Cargando datasets...</p>\n          </div>\n        ) : datasets.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-600\">No hay datasets disponibles en este momento.</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            {datasets.map((dataset) => (\n              <div key={dataset.id} className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow\">\n                <div className=\"p-5\">\n                  <div className=\"flex items-start gap-3 mb-3\">\n                    {getFileIcon(dataset.file_type)}\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold mb-2\">{dataset.title}</h3>\n                      <span className=\"inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded\">\n                        {dataset.category}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      <span>Actualizado: {new Date(dataset.last_updated).toLocaleDateString('es-MX', {\n                        day: 'numeric',\n                        month: 'long',\n                        year: 'numeric'\n                      })}</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">\n                      Frecuencia: {dataset.update_frequency}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      Formatos: {dataset.formats}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      Tamaño: {formatFileSize(dataset.file_size)}\n                    </p>\n                  </div>\n\n                  {dataset.description && (\n                    <p className=\"text-gray-700 mb-4 text-sm line-clamp-3\">\n                      {dataset.description}\n                    </p>\n                  )}\n\n                  <div className=\"flex space-x-3\">\n                    <a\n                      href={dataset.file_url}\n                      download={dataset.file_name}\n                      className=\"flex-1 inline-flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded text-sm transition-colors\"\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Descargar\n                    </a>\n                    <a\n                      href={dataset.file_url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-flex items-center justify-center bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded text-sm transition-colors\"\n                    >\n                      Ver\n                    </a>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </main>\n      <Footer />\n    </>\n  )\n}\n","size_bytes":6483},"components/defensoria/recent-requests-section.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport useEmblaCarousel from 'embla-carousel-react'\n\ninterface DefensoriaContent {\n  id: number\n  section: string\n  title?: string\n  content?: string\n  image_url?: string\n  file_url?: string\n  metadata?: any\n  display_order: number\n  is_active: boolean\n  created_at: string\n  updated_at: string\n}\n\ninterface RequestItem {\n  id: string\n  pregunta: string\n  respuesta: string\n  fecha: string\n}\n\nexport default function RecentRequestsSection() {\n  const [requests, setRequests] = useState<RequestItem[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [emblaRef, emblaApi] = useEmblaCarousel({\n    loop: true,\n    align: 'start',\n    slidesToScroll: 1\n  })\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(false)\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(false)\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev()\n  }, [emblaApi])\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext()\n  }, [emblaApi])\n\n  const onSelect = useCallback((emblaApi: any) => {\n    setPrevBtnDisabled(!emblaApi.canScrollPrev())\n    setNextBtnDisabled(!emblaApi.canScrollNext())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onSelect])\n\n  useEffect(() => {\n    const fetchRequestsData = async () => {\n      try {\n        const response = await fetch('/api/defensoria-audiencia?section=recent_requests')\n        if (response.ok) {\n          const data = await response.json()\n          if (data && data.length > 0) {\n            const items = data.slice(0, 6).map((item: DefensoriaContent, index: number) => {\n              const metadata = item.metadata || {}\n              return {\n                id: item.id.toString(),\n                pregunta: item.title || `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.`,\n                respuesta: item.content || `Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.`,\n                fecha: metadata.date || '2025-09-15'\n              }\n            })\n            setRequests(items)\n          } else {\n            // Fallback data if no database content\n            setRequests([\n              {\n                id: '1',\n                pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n                respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n                fecha: '2025-09-15'\n              },\n              {\n                id: '2',\n                pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n                respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n                fecha: '2025-09-10'\n              },\n              {\n                id: '3',\n                pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n                respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n                fecha: '2025-09-05'\n              },\n              {\n                id: '4',\n                pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n                respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n                fecha: '2025-08-30'\n              },\n              {\n                id: '5',\n                pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n                respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n                fecha: '2025-08-25'\n              },\n              {\n                id: '6',\n                pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n                respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n                fecha: '2025-08-20'\n              }\n            ])\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching requests data:', error)\n        // Set fallback data on error with the same structure as above\n        setRequests([\n          {\n            id: '1',\n            pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n            respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n            fecha: '2025-09-15'\n          },\n          {\n            id: '2',\n            pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n            respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n            fecha: '2025-09-10'\n          },\n          {\n            id: '3',\n            pregunta: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',\n            respuesta: 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',\n            fecha: '2025-09-05'\n          }\n        ])\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchRequestsData()\n  }, [])\n\n  if (isLoading) {\n    return (\n      <section\n        className=\"py-12 md:py-14\"\n        style={{\n          backgroundImage: \"url('/images/defensoria-micrositio-fondo-new.png')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }}\n      >\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <h2 className=\"text-center font-black text-[#1f1f1f] tracking-tight uppercase leading-tight text-[26px] sm:text-[30px] md:text-[36px] mb-8 md:mb-10\">\n            RECIENTES SOLICITUDES ATENDIDAS\n          </h2>\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600\"></div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n\n  if (requests.length === 0) {\n    return null\n  }\n\n  return (\n    <section\n      className=\"py-12 md:py-14\"\n      style={{\n        backgroundImage: \"url('/images/defensoria-micrositio-fondo-new.png')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n      }}\n    >\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <h2 className=\"text-center font-black text-[#4f148c] tracking-tight uppercase leading-tight text-[26px] sm:text-[30px] md:text-[36px] mb-8 md:mb-10\">\n          RECIENTES SOLICITUDES ATENDIDAS\n        </h2>\n\n        <div className=\"relative mx-auto max-w-7xl\">\n          {/* Navigation Buttons - Purple circular arrows */}\n          <button\n            className=\"absolute left-0 top-1/2 -translate-y-1/2 z-10 flex items-center justify-center w-20 h-20 rounded-full bg-[#8b5cdf] hover:bg-[#7746d6] text-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed shadow-lg -ml-10\"\n            onClick={scrollPrev}\n            disabled={prevBtnDisabled}\n          >\n            <ChevronLeft className=\"w-10 h-10\" strokeWidth={3} />\n          </button>\n\n          <button\n            className=\"absolute right-0 top-1/2 -translate-y-1/2 z-10 flex items-center justify-center w-20 h-20 rounded-full bg-[#8b5cdf] hover:bg-[#7746d6] text-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed shadow-lg -mr-10\"\n            onClick={scrollNext}\n            disabled={nextBtnDisabled}\n          >\n            <ChevronRight className=\"w-10 h-10\" strokeWidth={3} />\n          </button>\n\n          {/* Carousel Container */}\n          <div className=\"overflow-hidden\" ref={emblaRef}>\n            <div className=\"flex\">\n              {requests.map((request) => (\n                <div key={request.id} className=\"flex-[0_0_100%] md:flex-[0_0_50%] lg:flex-[0_0_33.333%] min-w-0 pl-6\">\n                  <div className=\"bg-white overflow-visible mr-6 shadow-[0_6px_20px_rgba(0,0,0,0.07)] relative\">\n                    {/* Light gray spacer for checkmark */}\n                    <div className=\"h-5 bg-gray-200 relative\">\n                      {/* Checkmark icon positioned in the spacer */}\n                      <div className=\"absolute top-0 left-4 z-10\">\n                        <img src=\"/images/custom-checkmark.png\" alt=\"Completed\" className=\"w-20 h-20\" />\n                      </div>\n                    </div>\n\n                    {/* Purple header with \"PREGUNTA:\" and question text */}\n                    <div className=\"bg-[#5b199a] text-white px-6 py-4 relative\">\n                      <h3 className=\"text-sm font-black tracking-wide uppercase mb-3 text-center\">\n                        PREGUNTA:\n                      </h3>\n                      {/* Question text */}\n                      <p className=\"text-[14px] font-medium text-white leading-relaxed text-center\">\n                        {request.pregunta}\n                      </p>\n                    </div>\n\n                    {/* Light grey content area */}\n                    <div className=\"p-6 bg-gray-200\">\n\n                      {/* Purple \"RESPUESTA:\" label */}\n                      <div className=\"text-[#5b199a] px-4 py-2 mb-4\">\n                        <h4 className=\"text-sm font-black tracking-wide uppercase\">\n                          RESPUESTA:\n                        </h4>\n                      </div>\n\n                      {/* Answer text */}\n                      <p className=\"text-[13px] text-[#5b199a] leading-relaxed\">\n                        {request.respuesta}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}","size_bytes":12791},"app/api/live-streams/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { updateLiveStreamInDB, deleteLiveStreamFromDB } from '@/lib/api-database'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n\n    const updatedStream = await updateLiveStreamInDB(id, data)\n    \n    if (!updatedStream) {\n      return NextResponse.json({ error: 'Live stream not found' }, { status: 404 })\n    }\n\n    return NextResponse.json(updatedStream)\n  } catch (error) {\n    console.error('Error updating live stream:', error)\n    return NextResponse.json({ error: 'Failed to update live stream' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const deleted = await deleteLiveStreamFromDB(id)\n    \n    if (!deleted) {\n      return NextResponse.json({ error: 'Live stream not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({ message: 'Live stream deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting live stream:', error)\n    return NextResponse.json({ error: 'Failed to delete live stream' }, { status: 500 })\n  }\n}\n","size_bytes":1291},"app/api/radio/live-status/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const { isLive } = await request.json()\n    \n    // Get current config\n    const configResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/radio/live-config`)\n    const currentConfig = await configResponse.json()\n    \n    // Update the live status\n    const updatedConfig = {\n      ...currentConfig,\n      isLive: Boolean(isLive)\n    }\n    \n    // Save the updated config\n    await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/radio/live-config`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updatedConfig)\n    })\n    \n    return NextResponse.json({ success: true, isLive: updatedConfig.isLive })\n  } catch (error) {\n    console.error('Error updating live status:', error)\n    return NextResponse.json({ error: 'Failed to update live status' }, { status: 500 })\n  }\n}\n","size_bytes":1016},"app/login/page.tsx":{"content":"\"use client\"\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Lock, User } from \"lucide-react\"\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Login successful:', data)\n        setError('✅ Login exitoso, redirigiendo...')\n        // Add small delay to ensure cookie is set before redirect\n        setTimeout(() => {\n          window.location.href = '/admin'\n        }, 500)\n      } else {\n        const data = await response.json()\n        setError(data.error || 'Error de autenticación')\n      }\n    } catch (error) {\n      setError('Error de conexión')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Panel de Administración</CardTitle>\n          <CardDescription>Canal del Congreso - Iniciar Sesión</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Usuario</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"Ingresa tu usuario\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Contraseña</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"Ingresa tu contraseña\"\n                  required\n                />\n              </div>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? 'Iniciando sesión...' : 'Iniciar Sesión'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":3738},"components/audio-player.tsx":{"content":"\"use client\"\n\nimport React, { useState, useRef, useEffect } from \"react\"\nimport { Play, Pause, Volume2, VolumeX, Loader2 } from \"lucide-react\"\n\ninterface AudioPlayerProps {\n  audioSrc?: string\n  title?: string\n}\n\nexport default function AudioPlayer({ audioSrc, title = \"Audio\" }: AudioPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [duration, setDuration] = useState(0)\n  const [volume, setVolume] = useState(0.8)\n  const [isMuted, setIsMuted] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n  const progressRef = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    const audio = audioRef.current\n    if (!audio || !audioSrc) return\n\n    // This component is specifically for MP3 files, not HLS streams\n    if (audioSrc.includes('.m3u8')) {\n      setError(\"HLS streams not supported in this player. Use the live radio player instead.\")\n      return\n    }\n\n    // Ensure absolute URLs for production and route through our file API\n    let resolvedAudioSrc = audioSrc\n    if (audioSrc.startsWith('/uploads/')) {\n      // Route through our file serving API for uploaded files\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || window.location.origin\n      resolvedAudioSrc = `${baseUrl}/api/files${audioSrc}`\n    } else if (audioSrc.startsWith('/')) {\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || window.location.origin\n      resolvedAudioSrc = `${baseUrl}${audioSrc}`\n    }\n\n    console.log(\"Audio source:\", resolvedAudioSrc)\n\n    // Set the audio source\n    audio.src = resolvedAudioSrc\n    audio.volume = volume\n\n    const setAudioData = () => {\n      if (!isNaN(audio.duration)) {\n        setDuration(audio.duration)\n      }\n      setError(null)\n      setIsLoading(false)\n    }\n\n    const setAudioTime = () => {\n      setCurrentTime(audio.currentTime)\n    }\n\n    const handleLoadStart = () => {\n      setIsLoading(true)\n      setError(null)\n    }\n\n    const handleCanPlay = () => {\n      setIsLoading(false)\n      setError(null)\n    }\n\n    const handleError = (e: Event) => {\n      console.error(\"Audio error:\", e)\n      const audioElement = e.target as HTMLAudioElement\n      let errorMessage = \"Error loading audio\"\n\n      if (audioElement.error) {\n        switch (audioElement.error.code) {\n          case MediaError.MEDIA_ERR_ABORTED:\n            errorMessage = \"Audio loading was aborted\"\n            break\n          case MediaError.MEDIA_ERR_NETWORK:\n            errorMessage = \"Network error occurred\"\n            break\n          case MediaError.MEDIA_ERR_DECODE:\n            errorMessage = \"Audio decoding error\"\n            break\n          case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n            errorMessage = \"Audio format not supported\"\n            break\n        }\n      }\n\n      setError(errorMessage)\n      setIsPlaying(false)\n      setIsLoading(false)\n    }\n\n    const handleWaiting = () => {\n      setIsLoading(true)\n    }\n\n    const handlePlaying = () => {\n      setIsLoading(false)\n    }\n\n    const handleEnded = () => {\n      setIsPlaying(false)\n    }\n\n    // Add event listeners\n    audio.addEventListener(\"loadstart\", handleLoadStart)\n    audio.addEventListener(\"loadeddata\", setAudioData)\n    audio.addEventListener(\"canplay\", handleCanPlay)\n    audio.addEventListener(\"timeupdate\", setAudioTime)\n    audio.addEventListener(\"ended\", handleEnded)\n    audio.addEventListener(\"error\", handleError)\n    audio.addEventListener(\"waiting\", handleWaiting)\n    audio.addEventListener(\"playing\", handlePlaying)\n\n    return () => {\n      // Cleanup\n      audio.removeEventListener(\"loadstart\", handleLoadStart)\n      audio.removeEventListener(\"loadeddata\", setAudioData)\n      audio.removeEventListener(\"canplay\", handleCanPlay)\n      audio.removeEventListener(\"timeupdate\", setAudioTime)\n      audio.removeEventListener(\"ended\", handleEnded)\n      audio.removeEventListener(\"error\", handleError)\n      audio.removeEventListener(\"waiting\", handleWaiting)\n      audio.removeEventListener(\"playing\", handlePlaying)\n    }\n  }, [audioSrc, volume])\n\n  // Handle play/pause\n  const togglePlay = async () => {\n    if (!audioRef.current) return\n\n    try {\n      if (isPlaying) {\n        audioRef.current.pause()\n        setIsPlaying(false)\n      } else {\n        setIsLoading(true)\n        const audio = audioRef.current\n        \n        // Mobile-specific audio handling\n        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\n          console.log(\"Mobile device detected - preparing audio\")\n          \n          // Ensure audio is loaded\n          if (audio.readyState === 0) {\n            audio.load()\n          }\n          \n          // Set volume for mobile\n          audio.volume = volume\n        }\n\n        await audioRef.current.play()\n        setIsPlaying(true)\n        setError(null)\n        setIsLoading(false)\n      }\n    } catch (err) {\n      console.error(\"Error toggling play:\", err)\n      \n      // Better mobile error messages\n      if ((err as any).name === \"NotAllowedError\") {\n        setError(\"Toca el botón de reproducir (requerido en dispositivos móviles)\")\n      } else if ((err as any).name === \"NotSupportedError\") {\n        setError(\"Formato de audio no compatible con este dispositivo\")\n      } else {\n        setError(\"No se puede reproducir el audio en este momento\")\n      }\n      \n      setIsPlaying(false)\n      setIsLoading(false)\n    }\n  }\n\n  // Handle volume\n  const toggleMute = () => {\n    if (!audioRef.current) return\n\n    if (isMuted) {\n      audioRef.current.volume = volume\n      setIsMuted(false)\n    } else {\n      audioRef.current.volume = 0\n      setIsMuted(true)\n    }\n  }\n\n  // Handle progress bar click\n  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!progressRef.current || !audioRef.current) return\n\n    const progressRect = progressRef.current.getBoundingClientRect()\n    const percent = (e.clientX - progressRect.left) / progressRect.width\n    audioRef.current.currentTime = percent * duration\n  }\n\n  // Format time\n  const formatTime = (time: number) => {\n    if (isNaN(time)) return \"00:00\"\n\n    const minutes = Math.floor(time / 60)\n    const seconds = Math.floor(time % 60)\n    return `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`\n  }\n\n  if (!audioSrc) {\n    return (\n      <div className=\"bg-gray-100 text-gray-600 py-2 px-4 rounded-lg w-full text-center\">\n        <p className=\"text-sm\">Audio no disponible para este episodio</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"bg-black text-white py-3 px-4 rounded-lg w-full\">\n      <audio \n        ref={audioRef} \n        preload=\"none\"\n        playsInline\n        controls={false}\n        webkit-playsinline=\"true\"\n        muted={false}\n        autoPlay={false}\n        style={{ display: 'none' }}\n      >\n        Your browser does not support the audio element.\n      </audio>\n\n      {/* Progress Bar */}\n      <div className=\"w-full flex items-center mb-3\">\n        <div className=\"text-xs mr-2 min-w-[36px] text-center\">\n          {formatTime(currentTime)}\n        </div>\n        <div\n          ref={progressRef}\n          className=\"h-2 bg-gray-700 flex-grow relative cursor-pointer rounded-full mx-1\"\n          onClick={handleProgressClick}\n        >\n          <div\n            className=\"absolute h-2 bg-[#e11d48] rounded-full\"\n            style={{\n              width: duration > 0 ? `${(currentTime / duration) * 100}%` : '0%',\n            }}\n          ></div>\n        </div>\n        <div className=\"text-xs ml-2 min-w-[36px] text-center\">\n          {formatTime(duration)}\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        {/* Left side - Volume */}\n        <div className=\"flex items-center space-x-2 flex-1\">\n          <button \n            className=\"text-white p-2 hover:bg-gray-700 rounded transition-colors\" \n            onClick={toggleMute}\n          >\n            {isMuted ? <VolumeX size={16} /> : <Volume2 size={16} />}\n          </button>\n          <div className=\"text-xs text-gray-300 truncate max-w-[120px]\">\n            {title}\n          </div>\n        </div>\n\n        {/* Center - Play Button */}\n        <div className=\"flex items-center space-x-2\">\n          <button\n            className=\"text-white bg-[#e11d48] rounded-full p-3 flex items-center justify-center hover:bg-[#be185d] active:bg-[#9f1239] transition-colors touch-manipulation\"\n            onClick={togglePlay}\n            onTouchStart={(e) => e.stopPropagation()}\n            disabled={isLoading}\n            aria-label={isPlaying ? \"Pause\" : \"Play\"}\n            style={{ WebkitTapHighlightColor: 'transparent' }}\n          >\n            {isLoading ? (\n              <Loader2 size={20} className=\"animate-spin\" />\n            ) : isPlaying ? (\n              <Pause size={20} fill=\"white\" />\n            ) : (\n              <Play size={20} fill=\"white\" />\n            )}\n          </button>\n        </div>\n\n        {/* Right side - Spacer */}\n        <div className=\"flex-1\"></div>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-500 border border-red-600 text-white px-3 py-2 rounded mt-3\">\n          <span className=\"text-sm\">{error}</span>\n        </div>\n      )}\n\n      {isLoading && !error && (\n        <div className=\"text-gray-400 text-xs text-center mt-2\">\n          Cargando audio...\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":9535},"app/api/documents/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { query } from '@/lib/database'\n\nexport async function GET() {\n  try {\n    const result = await query(`\n      SELECT * FROM documents \n      ORDER BY created_at DESC\n    `)\n    \n    return NextResponse.json(result.rows || [])\n  } catch (error) {\n    console.error('Error fetching documents:', error)\n    return NextResponse.json(\n      { error: 'Error fetching documents' }, \n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { title, description, fileName, fileUrl, fileSize, category } = body\n\n    const result = await query(`\n      INSERT INTO documents (title, description, file_name, file_url, file_size, category)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `, [title, description, fileName, fileUrl, fileSize, category])\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error saving document:', error)\n    return NextResponse.json(\n      { error: 'Error saving document' }, \n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1124},"app/api/pages/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\n// Mock data for page content\nconst pageContent = [\n  {\n    id: '1',\n    page: 'transparencia',\n    section: 'main',\n    title: 'Transparencia - Página Principal',\n    content: `<section className=\"relative w-full h-[500px] flex items-center\">\n  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-cyan-700 z-0\">\n    <img src=\"/images/transparency/hero-bg.png\" alt=\"Transparencia\" className=\"w-full h-full object-cover mix-blend-overlay\" />\n  </div>\n  <div className=\"container mx-auto px-4 z-10 flex flex-col md:flex-row items-center\">\n    <div className=\"w-full md:w-1/2 text-white\">\n      <h1 className=\"text-6xl font-bold mb-4\">INFORME<br />ANUAL</h1>\n      <h2 className=\"text-4xl mb-8\">Canal del <span className=\"text-orange-500\">Congreso</span></h2>\n      <div className=\"h-1 w-full bg-orange-500 mb-8\"></div>\n      <a href=\"/transparencia/informes\" className=\"inline-block bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-6 rounded-lg transition duration-300\">\n        Consulta aquí\n      </a>\n    </div>\n  </div>\n</section>`,\n    metadata: { hero: true },\n    updated_at: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    page: 'transparencia',\n    section: 'sections',\n    title: 'Explora nuestras Secciones',\n    content: `<section className=\"py-16 bg-white\">\n  <div className=\"container mx-auto px-4\">\n    <h2 className=\"text-3xl font-bold text-center mb-12\">Explora nuestras Secciones</h2>\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <div className=\"bg-white rounded-lg overflow-hidden shadow-lg\">\n        <div className=\"h-48 relative\">\n          <img src=\"/images/transparency/compromiso.png\" alt=\"Compromisos con la Transparencia\" className=\"w-full h-full object-cover\" />\n        </div>\n        <div className=\"p-4 bg-blue-100\">\n          <h3 className=\"text-lg font-semibold text-center\">Compromisos con la Transparencia</h3>\n        </div>\n      </div>\n      <div className=\"bg-white rounded-lg overflow-hidden shadow-lg\">\n        <div className=\"h-48 relative\">\n          <img src=\"/images/transparency/contacto.png\" alt=\"Contacto\" className=\"w-full h-full object-cover\" />\n        </div>\n        <div className=\"p-4 bg-blue-100\">\n          <h3 className=\"text-lg font-semibold text-center\">Contacto</h3>\n        </div>\n      </div>\n      <div className=\"bg-white rounded-lg overflow-hidden shadow-lg\">\n        <div className=\"h-48 relative\">\n          <img src=\"/images/transparency/transparencia-focalizada.png\" alt=\"Transparencia Focalizada\" className=\"w-full h-full object-cover\" />\n        </div>\n        <div className=\"p-4 bg-blue-100\">\n          <h3 className=\"text-lg font-semibold text-center\">Transparencia Focalizada</h3>\n        </div>\n      </div>\n      <div className=\"bg-white rounded-lg overflow-hidden shadow-lg\">\n        <div className=\"h-48 relative\">\n          <img src=\"/images/transparency/datos-abiertos.png\" alt=\"Datos Abiertos\" className=\"w-full h-full object-cover\" />\n        </div>\n        <div className=\"p-4 bg-blue-100\">\n          <h3 className=\"text-lg font-semibold text-center\">Datos Abiertos</h3>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>`,\n    metadata: { sections: true },\n    updated_at: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    page: 'transparencia',\n    section: 'defensoria',\n    title: 'Defensoría de Audiencia',\n    content: `<section className=\"py-16 bg-purple-900 text-white\">\n  <div className=\"container mx-auto px-4 text-center\">\n    <div className=\"flex justify-center mb-6\">\n      <div className=\"relative w-32 h-32\">\n        <img src=\"/images/defensoria-audiencia.png\" alt=\"Defensoría de Audiencia\" className=\"w-full h-full object-contain\" />\n      </div>\n    </div>\n    <h2 className=\"text-4xl font-bold mb-2\">DEFENSORÍA</h2>\n    <h3 className=\"text-4xl font-bold mb-2\">DE AUDIENCIA</h3>\n    <p className=\"text-xl mb-8\">CANAL DEL CONGRESO</p>\n    <h4 className=\"text-3xl font-bold mb-4\">CONTÁCTANOS:</h4>\n    <p className=\"text-2xl mb-6\">defensoria.audiencia@canaldelcongreso.gob.mx</p>\n    <div className=\"flex justify-center\">\n      <div className=\"w-16 h-16 border-2 border-white flex items-center justify-center\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" className=\"w-10 h-10\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n        </svg>\n      </div>\n    </div>\n  </div>\n</section>`,\n    metadata: { contact: true },\n    updated_at: new Date().toISOString(),\n  },\n  {\n    id: '4',\n    page: 'contacto',\n    section: 'hero',\n    title: 'Contacto - Sección Hero',\n    content: `<section className=\"bg-purple-900 text-white py-8\">\n  <div className=\"container mx-auto px-4\">\n    <h1 className=\"text-4xl font-bold mb-4 text-center\">CONTACTO</h1>\n    <p className=\"text-xl max-w-3xl mx-auto text-center mb-8\">\n      Estamos para servirte, contáctanos para cualquier consulta o sugerencia\n    </p>\n  </div>\n</section>`,\n    metadata: { hero: true },\n    updated_at: new Date().toISOString(),\n  },\n  {\n    id: '5',\n    page: 'contacto',\n    section: 'info',\n    title: 'Información de Contacto',\n    content: `<div className=\"space-y-6\">\n  <div className=\"flex items-start space-x-3\">\n    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n      </svg>\n    </div>\n    <div>\n      <h3 className=\"font-bold text-lg\">Dirección</h3>\n      <p className=\"text-gray-600\">\n        Av. Congreso de la Unión 66, El Parque,<br />\n        Venustiano Carranza, 15960<br />\n        Ciudad de México, CDMX\n      </p>\n    </div>\n  </div>\n  \n  <div className=\"flex items-start space-x-3\">\n    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n      </svg>\n    </div>\n    <div>\n      <h3 className=\"font-bold text-lg\">Teléfono</h3>\n      <p className=\"text-gray-600\">\n        +52 (55) 5036-0000<br />\n        Lunes a Viernes: 9:00 - 18:00\n      </p>\n    </div>\n  </div>\n  \n  <div className=\"flex items-start space-x-3\">\n    <div className=\"bg-purple-900 rounded-full p-2 text-white mt-1\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\" />\n        <path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\" />\n      </svg>\n    </div>\n    <div>\n      <h3 className=\"font-bold text-lg\">Correo Electrónico</h3>\n      <p className=\"text-gray-600\">\n        contacto@canaldelcongreso.gob.mx<br />\n        comentarios@canaldelcongreso.gob.mx\n      </p>\n    </div>\n  </div>\n</div>`,\n    metadata: { contactInfo: true },\n    updated_at: new Date().toISOString(),\n  }\n]\n\nexport async function GET() {\n  try {\n    return NextResponse.json(pageContent)\n  } catch (error) {\n    console.error('Error fetching pages:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n    \n    const newPage = {\n      id: String(pageContent.length + 1),\n      ...data,\n      updated_at: new Date().toISOString(),\n    }\n    \n    pageContent.push(newPage)\n    \n    return NextResponse.json(newPage, { status: 201 })\n  } catch (error) {\n    console.error('Error creating page:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n","size_bytes":8188},"app/admin/smtp-config/page.tsx":{"content":"\nimport { SmtpConfigClient } from \"./smtp-config-client\"\nimport { Mail, Settings } from \"lucide-react\"\n\nexport default function SmtpConfigPage() {\n  return (\n    <main className=\"flex-1 p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Mail className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Configuración SMTP</h1>\n            <p className=\"text-gray-600\">Gestiona la configuración del servidor de correo para el formulario de contacto</p>\n          </div>\n        </div>\n\n        <SmtpConfigClient />\n      </div>\n    </main>\n  )\n}\n","size_bytes":668},"generate-hashes.js":{"content":"\nconst bcrypt = require('bcryptjs');\n\nasync function generateHashes() {\n  try {\n    const adminHash = await bcrypt.hash('admin123', 10);\n    const cmsHash = await bcrypt.hash('hgqV&d3FJ!eDv#2Ji7v!kA', 10);\n    \n    console.log('Copy these hashes to your lib/auth.ts file:');\n    console.log('');\n    console.log('admin hash:', adminHash);\n    console.log('cmscanal hash:', cmsHash);\n    console.log('');\n    console.log('Updated ADMIN_USERS array:');\n    console.log(`const ADMIN_USERS = [\n  {\n    username: 'admin',\n    passwordHash: '${adminHash}',\n  },\n  {\n    username: 'cmscanal', \n    passwordHash: '${cmsHash}',\n  }\n]`);\n  } catch (error) {\n    console.error('Error generating hashes:', error);\n  }\n}\n\ngenerateHashes();\n","size_bytes":727},"app/api/admin/cleanup-streams/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { createDatabaseConnectionFromEnv } from '@/lib/database-env'\n\nexport async function POST() {\n  try {\n    const pool = createDatabaseConnectionFromEnv()\n    \n    // Get all streams\n    const result = await pool.query(`\n      SELECT id, title, stream_url, created_at \n      FROM live_streams \n      ORDER BY created_at DESC\n    `)\n    \n    console.log('=== CLEANUP OPERATION ===')\n    console.log('All streams found:', result.rows.length)\n    \n    console.log('All streams found:', result.rows.length)\n    \n    if (result.rows.length > 0) {\n      console.log('Deleting ALL streams:')\n      \n      // Delete ALL streams\n      await pool.query(`DELETE FROM live_streams`)\n      \n      for (const stream of result.rows) {\n        console.log(`✓ Deleted: ${stream.id} - ${stream.title} (${stream.stream_url})`)\n      }\n      \n      console.log('All streams have been deleted')\n      \n      return NextResponse.json({\n        success: true,\n        message: `Deleted all ${result.rows.length} streams`,\n        deleted: result.rows.length,\n        remaining: 0,\n        remainingStreams: []\n      })\n    } else {\n      return NextResponse.json({\n        success: true,\n        message: 'No streams found to delete',\n        totalStreams: 0\n      })\n    }\n    \n  } catch (error) {\n    console.error('Error cleaning up streams:', error)\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to cleanup streams'\n    }, { status: 500 })\n  }\n}\n","size_bytes":1506},"app/api/legislators/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getLegislatorsFromDB, createLegislatorInDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const legislators = await getLegislatorsFromDB()\n    return NextResponse.json(legislators)\n  } catch (error) {\n    console.error('Error fetching legislators:', error)\n    \n    // Fallback to mock data\n    const { getLegislators } = await import('@/lib/api')\n    const mockLegislators = await getLegislators()\n    return NextResponse.json(mockLegislators)\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n    const legislator = await createLegislatorInDB(data)\n    return NextResponse.json(legislator, { status: 201 })\n  } catch (error) {\n    console.error('Error creating legislator:', error)\n    return NextResponse.json(\n      { error: 'Failed to create legislator' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":940},"components/contact-form.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport type { ContactFormData } from \"@/lib/email\"\n\nexport default function ContactForm() {\n  const [formData, setFormData] = useState<ContactFormData>({\n    nombre: \"\",\n    email: \"\",\n    telefono: \"\",\n    asunto: \"\",\n    empresa: \"\",\n    puesto: \"\",\n    ciudad: \"\",\n    estado: \"\",\n    mensaje: \"\",\n  })\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [submitStatus, setSubmitStatus] = useState<{\n    success?: boolean\n    message?: string\n  }>({})\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setFormData((prev) => ({ ...prev, [name]: value }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    setSubmitStatus({})\n\n    try {\n      const response = await fetch(\"/api/contact\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        setSubmitStatus({\n          success: true,\n          message: \"Mensaje enviado correctamente. Gracias por contactarnos.\",\n        })\n        // Reset form on success\n        setFormData({\n          nombre: \"\",\n          email: \"\",\n          telefono: \"\",\n          asunto: \"\",\n          empresa: \"\",\n          puesto: \"\",\n          ciudad: \"\",\n          estado: \"\",\n          mensaje: \"\",\n        })\n      } else {\n        setSubmitStatus({\n          success: false,\n          message: result.message || \"Error al enviar el mensaje. Por favor intente nuevamente.\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error submitting form:\", error)\n      setSubmitStatus({\n        success: false,\n        message: \"Error al enviar el mensaje. Por favor intente nuevamente.\",\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"nombre\" className=\"block text-sm font-medium text-gray-200\">\n            Nombre*\n          </label>\n          <input\n            type=\"text\"\n            id=\"nombre\"\n            name=\"nombre\"\n            value={formData.nombre}\n            onChange={handleChange}\n            required\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200\">\n            Email*\n          </label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"telefono\" className=\"block text-sm font-medium text-gray-200\">\n            Teléfono\n          </label>\n          <input\n            type=\"tel\"\n            id=\"telefono\"\n            name=\"telefono\"\n            value={formData.telefono}\n            onChange={handleChange}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"asunto\" className=\"block text-sm font-medium text-gray-200\">\n            Asunto*\n          </label>\n          <input\n            type=\"text\"\n            id=\"asunto\"\n            name=\"asunto\"\n            value={formData.asunto}\n            onChange={handleChange}\n            required\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"empresa\" className=\"block text-sm font-medium text-gray-200\">\n            Empresa\n          </label>\n          <input\n            type=\"text\"\n            id=\"empresa\"\n            name=\"empresa\"\n            value={formData.empresa}\n            onChange={handleChange}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"puesto\" className=\"block text-sm font-medium text-gray-200\">\n            Puesto\n          </label>\n          <input\n            type=\"text\"\n            id=\"puesto\"\n            name=\"puesto\"\n            value={formData.puesto}\n            onChange={handleChange}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"ciudad\" className=\"block text-sm font-medium text-gray-200\">\n            Ciudad\n          </label>\n          <input\n            type=\"text\"\n            id=\"ciudad\"\n            name=\"ciudad\"\n            value={formData.ciudad}\n            onChange={handleChange}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"estado\" className=\"block text-sm font-medium text-gray-200\">\n            Estado\n          </label>\n          <input\n            type=\"text\"\n            id=\"estado\"\n            name=\"estado\"\n            value={formData.estado}\n            onChange={handleChange}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n          />\n        </div>\n      </div>\n      <div>\n        <label htmlFor=\"mensaje\" className=\"block text-sm font-medium text-gray-200\">\n          Mensaje\n        </label>\n        <textarea\n          id=\"mensaje\"\n          name=\"mensaje\"\n          rows={4}\n          value={formData.mensaje}\n          onChange={handleChange}\n          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-gray-900\"\n        ></textarea>\n      </div>\n\n      {submitStatus.message && (\n        <div\n          className={`p-3 rounded ${submitStatus.success ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}`}\n        >\n          {submitStatus.message}\n        </div>\n      )}\n\n      <div className=\"flex justify-end\">\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50\"\n        >\n          {isSubmitting ? \"Enviando...\" : \"Enviar Mensaje\"}\n        </button>\n      </div>\n    </form>\n  )\n}\n","size_bytes":7499},"scripts/create-db-dump.js":{"content":"\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nasync function createDatabaseDump() {\n  // Check if DATABASE_URL is set\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL environment variable is not set');\n    process.exit(1);\n  }\n\n  const databaseUrl = process.env.DATABASE_URL;\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const dumpFileName = `database-dump-${timestamp}.sql`;\n  const dumpPath = path.join(process.cwd(), dumpFileName);\n\n  console.log('Creating database dump...');\n  console.log(`Output file: ${dumpFileName}`);\n\n  // Use pg_dump with the DATABASE_URL\n  const command = `pg_dump \"${databaseUrl}\" > \"${dumpPath}\"`;\n\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error('Error creating dump:', error);\n      console.error('Make sure pg_dump is installed and accessible');\n      return;\n    }\n\n    if (stderr) {\n      console.warn('Warnings:', stderr);\n    }\n\n    // Check if file was created and has content\n    try {\n      const stats = fs.statSync(dumpPath);\n      if (stats.size > 0) {\n        console.log(`✅ Database dump created successfully!`);\n        console.log(`📁 File: ${dumpFileName}`);\n        console.log(`📊 Size: ${(stats.size / 1024).toFixed(2)} KB`);\n        console.log('\\nTo restore this dump to another database:');\n        console.log(`psql \"your_database_url\" < ${dumpFileName}`);\n      } else {\n        console.error('❌ Dump file was created but is empty');\n      }\n    } catch (err) {\n      console.error('❌ Error checking dump file:', err);\n    }\n  });\n}\n\n// Run the dump creation\ncreateDatabaseDump();\n","size_bytes":1680},"components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"app/api/radio/test-stream/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { streamUrl } = await request.json()\n    \n    if (!streamUrl) {\n      return NextResponse.json({\n        success: false,\n        message: 'URL de stream requerida'\n      })\n    }\n    \n    // Basic URL validation\n    if (!streamUrl.includes('.m3u8')) {\n      return NextResponse.json({\n        success: false,\n        message: 'URL debe ser un archivo .m3u8 para HLS'\n      })\n    }\n    \n    try {\n      // Make a HEAD request to test if the stream is accessible\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 second timeout\n      \n      const response = await fetch(streamUrl, {\n        method: 'HEAD',\n        signal: controller.signal\n      })\n      \n      clearTimeout(timeoutId)\n      \n      if (response.ok) {\n        return NextResponse.json({\n          success: true,\n          message: 'Stream URL es accesible y válida',\n          details: {\n            status: response.status,\n            contentType: response.headers.get('content-type'),\n            server: response.headers.get('server')\n          }\n        })\n      } else {\n        return NextResponse.json({\n          success: false,\n          message: `Stream no accesible: ${response.status} ${response.statusText}`\n        })\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        return NextResponse.json({\n          success: false,\n          message: 'Timeout: No se pudo conectar al stream en 10 segundos'\n        })\n      }\n      \n      return NextResponse.json({\n        success: false,\n        message: `Error de conexión: ${error instanceof Error ? error.message : 'Unknown error'}`\n      })\n    }\n  } catch (error) {\n    console.error('Error testing stream:', error)\n    return NextResponse.json({\n      success: false,\n      message: 'Error interno del servidor'\n    }, { status: 500 })\n  }\n}\n","size_bytes":2025},"components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1159},"app/radio/[programSlug]/page.tsx":{"content":"import Link from \"next/link\";\nimport Image from \"next/image\";\nimport { Play } from \"lucide-react\";\nimport Footer from \"@/components/footer\";\nimport AudioPlayer from \"@/components/audio-player\";\n\nexport const dynamic = \"force-dynamic\";\n\nasync function getProgram(slug: string) {\n  try {\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\";\n    const response = await fetch(`${baseUrl}/api/radio/programs`, {\n      cache: \"no-store\",\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch programs\");\n    }\n    const programs = await response.json();\n\n    // Find program by slug\n    const program = programs.find(\n      (p: any) =>\n        p.title\n          .toLowerCase()\n          .replace(/\\s+/g, \"-\")\n          .replace(/[áéíóú]/g, (match: string) => {\n            const accents: { [key: string]: string } = {\n              á: \"a\",\n              é: \"e\",\n              í: \"i\",\n              ó: \"o\",\n              ú: \"u\",\n            };\n            return accents[match] || match;\n          })\n          .replace(/[^a-z0-9-]/g, \"\") === slug,\n    );\n\n    return program;\n  } catch (error) {\n    console.error(\"Error fetching program:\", error);\n    return null;\n  }\n}\n\nasync function getEpisodesByProgram(programTitle: string) {\n  try {\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\";\n    const response = await fetch(\n      `${baseUrl}/api/radio/episodes?program=${encodeURIComponent(programTitle)}`,\n      {\n        cache: \"no-store\",\n      },\n    );\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch episodes\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching episodes:\", error);\n    return [];\n  }\n}\n\nexport default async function ProgramPage({\n  params,\n}: {\n  params: Promise<{ programSlug: string }>;\n}) {\n  const { programSlug } = await params;\n  const program = await getProgram(programSlug);\n  const episodes = program ? await getEpisodesByProgram(program.title) : [];\n\n  if (!program) {\n    return (\n      <div className=\"flex flex-col min-h-screen bg-white\">\n        <main className=\"flex-grow flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-gray-800 mb-4\">\n              Programa no encontrado\n            </h1>\n            <p className=\"text-gray-600 mb-8\">\n              El programa que buscas no existe.\n            </p>\n            <Link\n              href=\"/radio\"\n              className=\"bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700\"\n            >\n              Volver a Radio\n            </Link>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-white\">\n      <main className=\"flex-grow\">\n        {/* Program Header */}\n        <section className=\"bg-purple-900 text-white py-14\">\n          <div className=\"container mx-auto px-2\">\n            <div className=\"flex items-center mb-2\">\n              <div className=\"w-18 h-auto relative mr-3\">\n                <Image\n                  src=\"/images/radio-congreso-logo.png\"\n                  alt=\"Radio Congreso Logo\"\n                  width={0}\n                  height={0}\n                  className=\"h-16 w-auto\"\n                />\n              </div>\n            </div>\n            <div>\n              <div>\n                <h2 className=\"text-5xl font-bold mb-6\">{program.title}</h2>\n                <div className=\"prose prose-lg max-w-none rich-text-content\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: program.description || \"\",\n                    }}\n                  />\n                </div>\n\n                {program.latestEpisode?.title && (\n                  <div className=\"bg-purple-800 rounded-lg p-6 mb-6\">\n                    <h3 className=\"text-lg font-semibold mb-2\">\n                      Último episodio:\n                    </h3>\n                    <p className=\"text-purple-200 mb-1\">\n                      {program.latestEpisode.title}\n                    </p>\n                    <p className=\"text-purple-300 text-sm\">\n                      {program.latestEpisode.date} •{\" \"}\n                      {program.latestEpisode.duration}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              \n            </div>\n          </div>\n        </section>\n\n        {/* Navigation Breadcrumb */}\n        <section className=\"bg-gray-100 py-4\">\n          <div className=\"container mx-auto px-4\">\n            <nav className=\"text-sm\">\n              <Link href=\"/radio\" className=\"text-purple-900 hover:underline\">\n                Radio\n              </Link>\n              <span className=\"mx-2\">/</span>\n              <span className=\"text-gray-600\">{program.title}</span>\n            </nav>\n          </div>\n        </section>\n\n        {/* Episodes List */}\n        <section className=\"py-12 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h3 className=\"text-3xl font-bold mb-8 text-center\">\n              Todos los episodios\n            </h3>\n\n            {episodes.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {episodes.map((episode: any) => (\n                  <div\n                    key={episode.id}\n                    className=\"bg-white rounded-lg shadow-md overflow-hidden\"\n                  >\n                    <div className=\"relative h-48\">\n                      <Image\n                        src={\n                          episode.imageUrl ||\n                          program.imageUrl ||\n                          \"/images/radio-hero-banner.png\"\n                        }\n                        alt={episode.title}\n                        width={384}\n                        height={192}\n                        className=\"object-cover w-full h-full\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end\">\n                        <div className=\"p-4 w-full\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-white text-sm\">\n                              {episode.duration}\n                            </span>\n                            <button className=\"bg-purple-600 text-white rounded-full p-2 hover:bg-purple-700\">\n                              <Play className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"p-4\">\n                      <h4 className=\"font-bold text-lg mb-2\">\n                        {episode.title}\n                      </h4>\n                      <p className=\"text-gray-600 text-sm mb-3 line-clamp-3\">\n                        {episode.description}\n                      </p>\n                      <div className=\"flex justify-between items-center mb-3\">\n                        <span className=\"text-gray-500 text-xs\">\n                          {new Date(episode.publishDate).toLocaleDateString(\n                            \"es-ES\",\n                          )}\n                        </span>\n                        <span className=\"text-purple-600 text-sm font-medium\">\n                          {episode.category}\n                        </span>\n                      </div>\n                      \n                      {/* Audio Player */}\n                      {episode.audioUrl && (\n                        <div className=\"mt-3\">\n                          <AudioPlayer \n                            audioSrc={episode.audioUrl} \n                            title={episode.title}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h4 className=\"text-2xl font-bold text-gray-800 mb-4\">\n                  El programa no tiene episodios\n                </h4>\n                <p className=\"text-gray-600 mb-4\">\n                  Próximamente encontrarás aquí todos los episodios de{\" \"}\n                  {program.title}.\n                </p>\n                <Link\n                  href=\"/radio\"\n                  className=\"bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 inline-block\"\n                >\n                  Volver a Radio\n                </Link>\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8817},"components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7988},"app/sitemap.ts":{"content":"\nimport { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'\n  \n  return [\n    {\n      url: baseUrl,\n      lastModified: new Date(),\n      changeFrequency: 'daily',\n      priority: 1,\n    },\n    {\n      url: `${baseUrl}/noticias`,\n      lastModified: new Date(),\n      changeFrequency: 'daily',\n      priority: 0.9,\n    },\n    {\n      url: `${baseUrl}/radio`,\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.9,\n    },\n    {\n      url: `${baseUrl}/transmisiones`,\n      lastModified: new Date(),\n      changeFrequency: 'daily',\n      priority: 0.8,\n    },\n    {\n      url: `${baseUrl}/transparencia`,\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: `${baseUrl}/programacion`,\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/contacto`,\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.6,\n    },\n  ]\n}\n","size_bytes":1120},"components/news-grid.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport { useState } from \"react\"\nimport { Search } from \"lucide-react\";\n\ninterface NewsItem {\n  id: string\n  title: string\n  summary: string\n  content: string\n  imageUrl: string\n  category?: string\n  publishedAt: Date\n  createdAt: Date\n}\n\ninterface NewsGridProps {\n  newsItems: NewsItem[]\n  hideSearch?: boolean\n  // Pagination props\n  currentPage?: number\n  totalPages?: number\n  total?: number\n  onPageChange?: (page: number) => void\n}\n\nexport default function NewsGrid({ \n  newsItems, \n  hideSearch = false, \n  currentPage = 1, \n  totalPages = 1, \n  total = 0, \n  onPageChange \n}: NewsGridProps) {\n  const [imageErrors, setImageErrors] = useState(new Set<string>());\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleImageError = (id: string) => {\n    setImageErrors((prevErrors) => new Set(prevErrors.add(id)));\n  };\n\n  // Filter news items based on search term\n  const filteredNewsItems = newsItems.filter(item => {\n    if (!searchTerm.trim()) return true;\n    \n    const searchLower = searchTerm.toLowerCase();\n    return (\n      item.title.toLowerCase().includes(searchLower) ||\n      item.summary.toLowerCase().includes(searchLower) ||\n      item.content.toLowerCase().includes(searchLower) ||\n      (item.category && item.category.toLowerCase().includes(searchLower))\n    );\n  });\n\n  if (newsItems.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">No hay noticias disponibles</h2>\n        <p className=\"text-gray-600\">Las noticias aparecerán aquí cuando sean publicadas desde el panel administrativo.</p>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      {/* Search Bar */}\n      {!hideSearch && (\n        <div className=\"mb-8\">\n          <div className=\"relative max-w-md mx-auto\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Buscar noticias...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Search Results Info */}\n      {searchTerm.trim() && (\n        <div className=\"mb-6 text-center\">\n          <p className=\"text-gray-600\">\n            {filteredNewsItems.length > 0 \n              ? `Se encontraron ${filteredNewsItems.length} resultado${filteredNewsItems.length !== 1 ? 's' : ''} para \"${searchTerm}\"`\n              : `No se encontraron resultados para \"${searchTerm}\"`\n            }\n          </p>\n        </div>\n      )}\n\n      {filteredNewsItems.length === 0 && searchTerm.trim() ? (\n        <div className=\"text-center py-12\">\n          <div className=\"w-24 h-24 mx-auto mb-4 bg-gray-200 rounded-full flex items-center justify-center\">\n            <svg\n              className=\"w-12 h-12 text-gray-400\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n              />\n            </svg>\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">\n            No se encontraron noticias\n          </h3>\n          <p className=\"text-gray-500 mb-4\">\n            Intenta con diferentes palabras clave o revisa la ortografía.\n          </p>\n          <button\n            onClick={() => setSearchTerm(\"\")}\n            className=\"text-purple-600 hover:text-purple-800 font-medium\"\n          >\n            Limpiar búsqueda\n          </button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n          {filteredNewsItems.map((item, index) => (\n          <Link href={`/noticias/${item.id}`} key={`${item.id}-${index}`} className=\"block\">\n            <div className=\"relative overflow-hidden rounded-lg shadow-md group h-[338px] bg-gray-200\">\n              <Image\n                src={imageErrors.has(item.id) ? \"/placeholder.svg?height=338&width=400&text=Noticia\" : (item.imageUrl || \"/placeholder.svg?height=338&width=400&text=Noticia\")}\n                alt={item.title}\n                fill\n                className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                unoptimized={true}\n                onError={() => handleImageError(item.id)}\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent\"></div>\n              <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white\">\n                <h3 className=\"text-base font-bold line-clamp-2\">{item.title}</h3>\n                {item.category && (\n                  <span className=\"inline-block mt-2 px-2 py-1 bg-purple-600 text-xs rounded\">\n                    {item.category}\n                  </span>\n                )}\n              </div>\n            </div>\n          </Link>\n        ))}\n        </div>\n      )}\n\n      {/* Pagination Controls */}\n      {!searchTerm.trim() && totalPages > 1 && onPageChange && (\n        <div className=\"flex flex-col items-center space-y-4 mt-8\">\n          {/* Results info */}\n          <p className=\"text-gray-600\">\n            Mostrando {newsItems.length} de {total} noticias (Página {currentPage} de {totalPages})\n          </p>\n          \n          {/* Pagination buttons */}\n          <div className=\"flex items-center space-x-2\">\n            {/* Previous button */}\n            <button\n              onClick={() => onPageChange(currentPage - 1)}\n              disabled={currentPage <= 1}\n              className=\"px-3 py-2 rounded-lg border border-gray-300 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Anterior\n            </button>\n\n            {/* Page numbers */}\n            {Array.from({ length: totalPages }, (_, i) => i + 1)\n              .filter(pageNum => {\n                // Show first page, last page, current page, and pages around current\n                return pageNum === 1 || \n                       pageNum === totalPages || \n                       Math.abs(pageNum - currentPage) <= 1;\n              })\n              .map((pageNum, index, filteredPages) => {\n                const prevPageNum = filteredPages[index - 1];\n                const showEllipsis = prevPageNum && pageNum - prevPageNum > 1;\n                \n                return (\n                  <div key={pageNum} className=\"flex items-center\">\n                    {showEllipsis && (\n                      <span className=\"px-2 text-gray-500\">...</span>\n                    )}\n                    <button\n                      onClick={() => onPageChange(pageNum)}\n                      className={`px-3 py-2 rounded-lg text-sm font-medium ${\n                        pageNum === currentPage\n                          ? 'bg-purple-600 text-white'\n                          : 'border border-gray-300 text-gray-700 hover:bg-gray-50'\n                      }`}\n                    >\n                      {pageNum}\n                    </button>\n                  </div>\n                );\n              })}\n\n            {/* Next button */}\n            <button\n              onClick={() => onPageChange(currentPage + 1)}\n              disabled={currentPage >= totalPages}\n              className=\"px-3 py-2 rounded-lg border border-gray-300 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Siguiente\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Search results info */}\n      {filteredNewsItems.length > 0 && searchTerm.trim() && (\n        <div className=\"flex justify-center mt-8\">\n          <p className=\"text-gray-600\">\n            Mostrando {filteredNewsItems.length} de {newsItems.length} noticias\n          </p>\n        </div>\n      )}\n    </>\n  )\n}","size_bytes":8263},"components/program-carousel.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport Link from \"next/link\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { useMobile } from \"@/hooks/use-mobile\"\nimport Image from \"next/image\"\n\nexport interface CarouselItem {\n  id: string\n  title: string\n  image: string\n  link: string\n}\n\ninterface ProgramCarouselProps {\n  items: CarouselItem[]\n}\n\nexport default function ProgramCarousel({ items }: ProgramCarouselProps) {\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [touchStart, setTouchStart] = useState<number | null>(null)\n  const [touchEnd, setTouchEnd] = useState<number | null>(null)\n  const [isHydrated, setIsHydrated] = useState(false)\n  const carouselRef = useRef<HTMLDivElement>(null)\n  const [itemsToShow, setItemsToShow] = useState(4)\n\n  // Always call useMobile hook consistently\n  const isMobile = useMobile()\n\n  // Hydration effect - always called\n  useEffect(() => {\n    setIsHydrated(true)\n  }, [])\n\n  // Items to show effect - always called\n  useEffect(() => {\n    const updateItemsToShow = () => {\n      if (!isHydrated) {\n        setItemsToShow(4)\n        return\n      }\n      if (isMobile) {\n        setItemsToShow(1)\n        return\n      }\n      if (typeof window !== \"undefined\") {\n        if (window.innerWidth < 768) {\n          setItemsToShow(1)\n        } else if (window.innerWidth < 1024) {\n          setItemsToShow(2)\n        } else {\n          setItemsToShow(4)\n        }\n      } else {\n        setItemsToShow(4)\n      }\n    }\n\n    updateItemsToShow()\n\n    if (typeof window !== \"undefined\") {\n      window.addEventListener('resize', updateItemsToShow)\n      return () => window.removeEventListener('resize', updateItemsToShow)\n    }\n  }, [isHydrated, isMobile])\n\n  // Filter out invalid items with more defensive checks\n  const validItems = Array.isArray(items) ? items.filter(item => \n    item && \n    typeof item === 'object' && \n    item.id && \n    item.title && \n    item.image && \n    item.link &&\n    typeof item.id === 'string' &&\n    typeof item.title === 'string' &&\n    typeof item.image === 'string' &&\n    typeof item.link === 'string'\n  ) : []\n\n  // Minimum swipe distance (in px)\n  const minSwipeDistance = 50\n\n  const handlePrevious = () => {\n    setCurrentIndex((prevIndex) => (prevIndex > 0 ? prevIndex - 1 : validItems.length - 1))\n  }\n\n  const handleNext = () => {\n    setCurrentIndex((prevIndex) => (prevIndex < validItems.length - 1 ? prevIndex + 1 : 0))\n  }\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    setTouchEnd(null)\n    setTouchStart(e.targetTouches[0].clientX)\n  }\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    setTouchEnd(e.targetTouches[0].clientX)\n  }\n\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return\n\n    const distance = touchStart - touchEnd\n    const isLeftSwipe = distance > minSwipeDistance\n    const isRightSwipe = distance < -minSwipeDistance\n\n    if (isLeftSwipe) {\n      handleNext()\n    } else if (isRightSwipe) {\n      handlePrevious()\n    }\n\n    // Reset touch states\n    setTouchStart(null)\n    setTouchEnd(null)\n  }\n\n  // Calculate visible items\n  const visibleItems = () => {\n    const result = []\n    const itemsToDisplay = Math.min(itemsToShow, validItems.length)\n    for (let i = 0; i < itemsToDisplay; i++) {\n      const index = (currentIndex + i) % validItems.length\n      result.push(validItems[index])\n    }\n    return result\n  }\n\n  // Auto-slide effect - always called, no conditional logic\n  useEffect(() => {\n    if (validItems.length <= 1) {\n      return // Do nothing if no items or only one item, but still call the hook\n    }\n\n    const autoSlide = setInterval(() => {\n      handleNext()\n    }, 5000)\n\n    return () => clearInterval(autoSlide)\n  }, [validItems.length]) // Add dependency to ensure it works with dynamic items\n\n  // Don't render if no valid items - moved after all hooks\n  if (validItems.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500\">No hay programas disponibles</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"relative\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-3xl font-bold text-[#3b0764]\">Categorías</h2>\n        {validItems.length > 1 && (\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handlePrevious}\n              className=\"p-2 rounded-full bg-[#3b0764] text-white hover:bg-[#4c0a80] transition-colors\"\n              aria-label=\"Anterior categoría\"\n            >\n              <ChevronLeft className=\"h-6 w-6\" />\n            </button>\n            <button\n              onClick={handleNext}\n              className=\"p-2 rounded-full bg-[#3b0764] text-white hover:bg-[#4c0a80] transition-colors\"\n              aria-label=\"Siguiente categoría\"\n            >\n              <ChevronRight className=\"h-6 w-6\" />\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div\n        ref={carouselRef}\n        className=\"overflow-hidden\"\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        <div className=\"flex transition-transform duration-500 ease-in-out gap-4 justify-center\">\n          {visibleItems().map((item, index) => (\n            <div\n              key={`${item.id}-${index}`}\n              className=\"w-72 h-96 flex-shrink-0 transition-all duration-300\"\n            >\n              <Link href={item.link} className=\"block h-full\">\n                <div className=\"relative h-full w-full rounded-2xl overflow-hidden group cursor-pointer\">\n                  <Image\n                    src={item.image}\n                    alt={item.title}\n                    fill\n                    className=\"object-cover transition-transform duration-500 group-hover:scale-110 rounded-2xl\"\n                    sizes=\"(max-width: 768px) 100vw, 288px\"\n                    unoptimized={true}\n                  />\n                  <div className=\"absolute inset-0 bg-black bg-opacity-30 group-hover:bg-opacity-40 transition-all duration-300 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-0 left-0 right-0 p-6 text-white\">\n                    <h1 className=\"text-4xl font-extrabold mb-2 drop-shadow-lg text-center\">\n                      {item.title}\n                    </h1>\n                  </div>\n                </div>\n              </Link>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":6544},"lib/mock-data.ts":{"content":"// This file previously contained mock data but has been cleaned up\n// All data is now sourced from the database\n\nexport const newsCategories = [\n  { id: \"trabajo-en-comisiones\", name: \"Trabajo en Comisiones\" },\n  { id: \"relaciones-exteriores\", name: \"Relaciones Exteriores\" },\n  { id: \"temas-de-actualidad\", name: \"Temas de Actualidad\" },\n  { id: \"reformas-aprobadas\", name: \"Reformas Aprobadas\" },\n  { id: \"trabajo-en-pleno\", name: \"Trabajo en Pleno\" },\n  { id: \"foros-y-seminarios\", name: \"Foros y Seminarios\" },\n]","size_bytes":517},"app/api/admin/cleanup-broken-images/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getDatabaseConnection } from '@/lib/database'\nimport { existsSync, readdirSync } from 'fs'\nimport { join } from 'path'\n\nexport async function POST() {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n    }\n\n    // Get all news items with image URLs\n    const newsResult = await pool.query(`\n      SELECT id, title, image_url, image_url2, image_url3, image_url4, image_url5\n      FROM news \n      WHERE image_url IS NOT NULL OR image_url2 IS NOT NULL OR image_url3 IS NOT NULL OR image_url4 IS NOT NULL OR image_url5 IS NOT NULL\n    `)\n\n    const brokenImages = []\n    const fixedItems = []\n\n    for (const item of newsResult.rows) {\n      const imageFields = ['image_url', 'image_url2', 'image_url3', 'image_url4', 'image_url5']\n      const updates: Record<string, any> = {}\n      let hasUpdates = false\n\n      for (const field of imageFields) {\n        const imageUrl = item[field]\n        if (imageUrl && imageUrl.startsWith('/uploads/')) {\n          const imagePath = join(process.cwd(), 'public', imageUrl)\n          if (!existsSync(imagePath)) {\n            brokenImages.push({ id: item.id, title: item.title, field, url: imageUrl })\n            updates[field] = null\n            hasUpdates = true\n          }\n        }\n      }\n\n      // Update the database if there are broken images\n      if (hasUpdates) {\n        const updateFields = Object.keys(updates).map(field => `${field} = $${Object.keys(updates).indexOf(field) + 2}`).join(', ')\n        const values = [item.id, ...Object.values(updates)]\n        \n        await pool.query(\n          `UPDATE news SET ${updateFields} WHERE id = $1`,\n          values\n        )\n        \n        fixedItems.push({ id: item.id, title: item.title, updates })\n      }\n    }\n\n    // Check programs\n    const programsResult = await pool.query(`\n      SELECT id, title, image_url \n      FROM programs \n      WHERE image_url IS NOT NULL\n    `)\n\n    for (const item of programsResult.rows) {\n      if (item.image_url && item.image_url.startsWith('/uploads/')) {\n        const imagePath = join(process.cwd(), 'public', item.image_url)\n        if (!existsSync(imagePath)) {\n          brokenImages.push({ id: item.id, title: item.title, field: 'image_url', url: item.image_url })\n          \n          await pool.query(\n            'UPDATE programs SET image_url = NULL WHERE id = $1',\n            [item.id]\n          )\n          \n          fixedItems.push({ id: item.id, title: item.title, updates: { image_url: null } })\n        }\n      }\n    }\n\n    // Check organs\n    const organsResult = await pool.query(`\n      SELECT id, title, image_url \n      FROM organs \n      WHERE image_url IS NOT NULL\n    `)\n\n    for (const item of organsResult.rows) {\n      if (item.image_url && item.image_url.startsWith('/uploads/')) {\n        const imagePath = join(process.cwd(), 'public', item.image_url)\n        if (!existsSync(imagePath)) {\n          brokenImages.push({ id: item.id, title: item.title, field: 'image_url', url: item.image_url })\n          \n          await pool.query(\n            'UPDATE organs SET image_url = NULL WHERE id = $1',\n            [item.id]\n          )\n          \n          fixedItems.push({ id: item.id, title: item.title, updates: { image_url: null } })\n        }\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      brokenImages: brokenImages.length,\n      fixedItems: fixedItems.length,\n      details: {\n        brokenImages,\n        fixedItems\n      }\n    })\n\n  } catch (error) {\n    console.error('Error cleaning up broken images:', error)\n    return NextResponse.json({ error: 'Failed to cleanup broken images' }, { status: 500 })\n  }\n}\n\nexport async function GET() {\n  try {\n    const pool = getDatabaseConnection()\n    if (!pool) {\n      return NextResponse.json({ error: 'Database connection not available' }, { status: 500 })\n    }\n\n    // Just check for broken images without fixing them\n    const newsResult = await pool.query(`\n      SELECT id, title, image_url, image_url2, image_url3, image_url4, image_url5\n      FROM news \n      WHERE image_url IS NOT NULL OR image_url2 IS NOT NULL OR image_url3 IS NOT NULL OR image_url4 IS NOT NULL OR image_url5 IS NOT NULL\n    `)\n\n    const brokenImages = []\n\n    for (const item of newsResult.rows) {\n      const imageFields = ['image_url', 'image_url2', 'image_url3', 'image_url4', 'image_url5']\n      \n      for (const field of imageFields) {\n        const imageUrl = item[field]\n        if (imageUrl && imageUrl.startsWith('/uploads/')) {\n          const imagePath = join(process.cwd(), 'public', imageUrl)\n          if (!existsSync(imagePath)) {\n            brokenImages.push({ id: item.id, title: item.title, field, url: imageUrl })\n          }\n        }\n      }\n    }\n\n    // Auto-fix broken images by finding similar files\n    const fixedImages = []\n    \n    for (const brokenImage of brokenImages) {\n      const dirPath = join(process.cwd(), 'public', brokenImage.url.split('/').slice(0, -1).join('/'))\n      const fileName = brokenImage.url.split('/').pop()?.split('.')[0]\n      \n      if (existsSync(dirPath) && fileName) {\n        const files = readdirSync(dirPath)\n        const similarFile = files.find(f => f.startsWith(fileName))\n        \n        if (similarFile) {\n          const newUrl = brokenImage.url.replace(brokenImage.url.split('/').pop()!, similarFile)\n          \n          try {\n            // Update the database with the corrected URL\n            await pool.query(\n              `UPDATE news SET ${brokenImage.field} = $1 WHERE id = $2`,\n              [newUrl, brokenImage.id]\n            )\n            \n            fixedImages.push({\n              id: brokenImage.id,\n              title: brokenImage.title,\n              oldUrl: brokenImage.url,\n              newUrl: newUrl\n            })\n          } catch (error) {\n            console.error('Error fixing image URL:', error)\n          }\n        }\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      brokenImages: brokenImages.length,\n      fixedImages: fixedImages.length,\n      details: brokenImages,\n      fixes: fixedImages\n    })\n\n  } catch (error) {\n    console.error('Error checking broken images:', error)\n    return NextResponse.json({ error: 'Failed to check broken images' }, { status: 500 })\n  }\n}\n","size_bytes":6413},"app/programacion/programas/page.tsx":{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\nimport { getPrograms } from \"@/lib/api\"\nimport Navbar from \"@/components/navbar\"\nimport Footer from \"@/components/footer\"\n\nexport default async function ProgramasPage() {\n  const programs = await getPrograms()\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Navbar />\n\n      <main className=\"flex-grow bg-black\">\n        {/* Hero Section */}\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4\">\n            <h1 className=\"text-5xl font-bold mb-6 text-center text-[#e91e63]\">NUESTROS PROGRAMAS</h1>\n            <p className=\"text-xl max-w-3xl mx-auto text-center text-white mb-12\">\n              Descubre nuestra programación exclusiva del Canal del Congreso\n            </p>\n          </div>\n        </section>\n\n        {/* Programs Grid */}\n        <section className=\"pb-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {programs.map((program) => (\n                <Link\n                  key={program.id}\n                  href={`/programacion/programas/${program.id}`}\n                  className=\"rounded-2xl overflow-hidden shadow-lg transform transition-transform duration-300 hover:scale-105\"\n                >\n                  <div className=\"relative aspect-[16/9]\">\n                    <Image\n                      src={program.imageUrl || \"/placeholder.svg?height=192&width=384&text=No+Image\"}\n                      alt={program.title}\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                  <div className=\"p-4 bg-gray-900\">\n                    <h3 className=\"font-bold text-white\">{program.title}</h3>\n                    <p className=\"text-gray-300 text-sm\">{program.description}</p>\n                  </div>\n                </Link>\n              ))}\n            </div>\n\n            {/* Pagination */}\n            <div className=\"flex justify-center mt-12\">\n              <div className=\"inline-flex rounded-md shadow\">\n                <a\n                  href=\"#\"\n                  className=\"relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-700 bg-gray-800 text-sm font-medium text-gray-300 hover:bg-gray-700\"\n                >\n                  Anterior\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"relative inline-flex items-center px-4 py-2 border border-gray-700 bg-[#e91e63] text-sm font-medium text-white\"\n                >\n                  1\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"relative inline-flex items-center px-4 py-2 border border-gray-700 bg-gray-800 text-sm font-medium text-gray-300 hover:bg-gray-700\"\n                >\n                  2\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-700 bg-gray-800 text-sm font-medium text-gray-300 hover:bg-gray-700\"\n                >\n                  Siguiente\n                </a>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}\n","size_bytes":3349},"app/radio-styles.css":{"content":"/* Remove any default browser styling that might cause borders */\n.program-banner-container {\n  box-shadow: none !important;\n  border: none !important;\n  overflow: hidden !important;\n}\n\n.program-banner-container * {\n  box-shadow: none !important;\n  border: none !important;\n}\n\n.program-banner-image {\n  display: block !important;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover !important;\n  margin: 0 !important;\n  padding: 0 !important;\n}\n","size_bytes":466},"app/admin/programacion/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Calendar, Clock, FileSpreadsheet, RefreshCw, Save, Tv, Upload } from 'lucide-react'\n\nexport default function ProgramacionAdmin() {\n  const [file, setFile] = useState<File | null>(null)\n  const [uploading, setUploading] = useState(false)\n  const [message, setMessage] = useState('')\n  const [programmingData, setProgrammingData] = useState<any>(null)\n\n  // Load current programming data on component mount\n  useEffect(() => {\n    loadCurrentProgramming()\n  }, [])\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0]\n    if (selectedFile) {\n      setFile(selectedFile)\n    }\n  }\n\n  const handleUpload = async () => {\n    if (!file) {\n      setMessage('Por favor selecciona un archivo Excel')\n      return\n    }\n\n    setUploading(true)\n    setMessage('')\n\n    try {\n      const formData = new FormData()\n      formData.append('excel', file)\n\n      const response = await fetch('/api/programacion/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      // Check if response is JSON\n      const contentType = response.headers.get('content-type')\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Server returned non-JSON response')\n      }\n\n      const result = await response.json()\n\n      if (response.ok) {\n        setMessage('Excel procesado exitosamente')\n        setProgrammingData(result.data)\n      } else {\n        setMessage(result.error || 'Error al procesar el archivo')\n      }\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        setMessage('Error: El servidor no devolvió una respuesta válida')\n      } else {\n        setMessage('Error al subir el archivo: ' + (error instanceof Error ? error.message : 'Error desconocido'))\n      }\n      console.error('Upload error:', error)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  const handleSaveProgramming = async () => {\n    if (!programmingData) {\n      setMessage('No hay datos de programación para guardar')\n      return\n    }\n\n    try {\n      const response = await fetch('/api/programacion', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          action: 'update_from_excel',\n          data: programmingData\n        })\n      })\n\n      if (response.ok) {\n        setMessage('Programación guardada exitosamente')\n        loadCurrentProgramming()\n      } else {\n        setMessage('Error al guardar la programación')\n      }\n    } catch (error) {\n      setMessage('Error al guardar la programación')\n      console.error('Save error:', error)\n    }\n  }\n\n  const handleClearProgramming = async () => {\n    if (!confirm('¿Estás seguro de que quieres eliminar todos los datos de programación? Esta acción no se puede deshacer.')) {\n      return\n    }\n\n    try {\n      const response = await fetch('/api/programacion', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          action: 'clear_data'\n        })\n      })\n\n      if (response.ok) {\n        setMessage('Datos de programación eliminados exitosamente')\n        setProgrammingData(null)\n        setFile(null)\n        // Reset file input\n        const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement\n        if (fileInput) {\n          fileInput.value = ''\n        }\n      } else {\n        setMessage('Error al eliminar los datos de programación')\n      }\n    } catch (error) {\n      setMessage('Error al eliminar los datos de programación')\n      console.error('Clear error:', error)\n    }\n  }\n\n  const loadCurrentProgramming = async () => {\n    try {\n      const response = await fetch('/api/programacion')\n      const data = await response.json()\n      \n      if (response.ok) {\n        setProgrammingData(data.data)\n      } else {\n        setMessage('Error al cargar la programación')\n      }\n    } catch (error) {\n      setMessage('Error al cargar la programación')\n      console.error('Load error:', error)\n    }\n  }\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6 max-w-7xl mx-auto\">\n      <div className=\"mb-4 md:mb-6\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold flex items-center gap-2\">\n            <Calendar className=\"h-6 w-6 sm:h-8 sm:w-8 text-purple-600\" />\n            Programación Diaria\n          </h1>\n          <p className=\"text-sm sm:text-base text-gray-600 mt-1\">Gestiona la programación diaria de todos los canales</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-4 md:mb-6\">\n        {/* Upload Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              Subir Programación Excel\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Input\n                  type=\"file\"\n                  accept=\".xlsx,.xls\"\n                  onChange={handleFileChange}\n                  className=\"mb-4 text-sm\"\n                />\n                <p className=\"text-xs sm:text-sm text-gray-600 flex items-start sm:items-center gap-2 leading-tight\">\n                  <FileSpreadsheet className=\"h-4 w-4 flex-shrink-0 mt-0.5 sm:mt-0\" />\n                  <span>Archivo Excel con 3 hojas (Canales: 45.1, 45.2, 45.3)</span>\n                </p>\n              </div>\n\n              <Button \n                onClick={handleUpload} \n                disabled={!file || uploading}\n                className=\"w-full h-12 text-sm sm:text-base\"\n              >\n                {uploading ? (\n                  <>\n                    <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Procesando...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Subir y Procesar Excel\n                  </>\n                )}\n              </Button>\n\n              {message && (\n                <Alert>\n                  <AlertDescription>{message}</AlertDescription>\n                </Alert>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Actions Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Tv className=\"h-5 w-5\" />\n              Acciones de Programación\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2 text-sm\">\n                <div className=\"bg-purple-50 p-2 sm:p-3 rounded-lg text-center\">\n                  <div className=\"font-semibold text-purple-700 text-xs sm:text-sm\">Canal 45.1</div>\n                  <div className=\"text-purple-600 text-xs\">Principal</div>\n                </div>\n                <div className=\"bg-blue-50 p-2 sm:p-3 rounded-lg text-center\">\n                  <div className=\"font-semibold text-blue-700 text-xs sm:text-sm\">Canal 45.2</div>\n                  <div className=\"text-blue-600 text-xs\">Secundario</div>\n                </div>\n                <div className=\"bg-green-50 p-2 sm:p-3 rounded-lg text-center\">\n                  <div className=\"font-semibold text-green-700 text-xs sm:text-sm\">Canal 45.3</div>\n                  <div className=\"text-green-600 text-xs\">Tercero</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                {programmingData && (\n                  <Button \n                    onClick={handleSaveProgramming}\n                    className=\"w-full h-12 text-sm sm:text-base\"\n                    variant=\"default\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Guardar Programación\n                  </Button>\n                )}\n\n                {programmingData && (\n                  <Button \n                    onClick={handleClearProgramming}\n                    className=\"w-full h-12 text-sm sm:text-base\"\n                    variant=\"destructive\"\n                  >\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    Eliminar Datos de Programación\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {programmingData && (\n        <Card>\n          <CardHeader className=\"p-4 sm:p-6\">\n            <CardTitle className=\"text-lg sm:text-xl\">Vista Previa de Programación</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4 sm:p-6\">\n            <Tabs defaultValue={Object.keys(programmingData)[0] || \"45.1\"}>\n              <TabsList className={`grid w-full h-auto ${Object.keys(programmingData).length === 3 ? 'grid-cols-3' : Object.keys(programmingData).length === 2 ? 'grid-cols-2' : 'grid-cols-1'}`}>\n                {Object.keys(programmingData).map(channel => (\n                  <TabsTrigger key={channel} value={channel} className=\"text-xs sm:text-sm px-2 py-2\">\n                    <span className=\"hidden sm:inline\">Canal </span>{channel}\n                  </TabsTrigger>\n                ))}\n              </TabsList>\n\n              {Object.keys(programmingData).map(channel => (\n                <TabsContent key={channel} value={channel} className=\"mt-4\">\n                  {/* Mobile View - Cards */}\n                  <div className=\"block md:hidden space-y-3\">\n                    {programmingData[channel]?.map((program: any, index: number) => (\n                      <div key={index} className=\"bg-gray-50 p-3 rounded-lg border\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <span className=\"font-semibold text-purple-600 text-sm\">\n                            {program.hora || program.time || 'N/A'}\n                          </span>\n                        </div>\n                        <h4 className=\"font-medium text-gray-900 mb-1 text-sm break-words line-clamp-2\">\n                          {program.programa || program.program || 'N/A'}\n                        </h4>\n                        <p className=\"text-gray-600 text-xs leading-relaxed break-words line-clamp-3\">\n                          {program.descripcion || program.description || 'N/A'}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Desktop View - Table */}\n                  <div className=\"hidden md:block overflow-x-auto\">\n                    <table className=\"min-w-full border-collapse border border-gray-300 text-sm\">\n                      <thead>\n                        <tr className=\"bg-gray-50\">\n                          <th className=\"border border-gray-300 px-3 py-2 text-left font-medium\">Hora</th>\n                          <th className=\"border border-gray-300 px-3 py-2 text-left font-medium\">Programa</th>\n                          <th className=\"border border-gray-300 px-3 py-2 text-left font-medium\">Descripción</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {programmingData[channel]?.map((program: any, index: number) => (\n                          <tr key={index} className=\"hover:bg-gray-50\">\n                            <td className=\"border border-gray-300 px-3 py-2 font-medium text-purple-600\">\n                              {program.hora || program.time || 'N/A'}\n                            </td>\n                            <td className=\"border border-gray-300 px-3 py-2 font-medium break-words\">\n                              {program.programa || program.program || 'N/A'}\n                            </td>\n                            <td className=\"border border-gray-300 px-3 py-2 text-gray-600 break-words\">\n                              {program.descripcion || program.description || 'N/A'}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </TabsContent>\n              ))}\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}","size_bytes":12816},"app/api/radio/programs/route.ts":{"content":"import { NextResponse, NextRequest } from 'next/server'\nimport { getRadioPrograms, createRadioProgram } from '@/lib/api'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const slug = searchParams.get('slug')\n\n    const { getRadioPrograms } = await import('@/lib/api')\n    const programs = await getRadioPrograms()\n\n    if (slug) {\n      // Convert program title to slug format for matching\n      const programSlug = (title: string) => \n        title.toLowerCase()\n          .replace(/[áàäâ]/g, 'a')\n          .replace(/[éèëê]/g, 'e')\n          .replace(/[íìïî]/g, 'i')\n          .replace(/[óòöô]/g, 'o')\n          .replace(/[úùüû]/g, 'u')\n          .replace(/ñ/g, 'n')\n          .replace(/[^a-z0-9\\s-]/g, '')\n          .replace(/\\s+/g, '-')\n          .replace(/-+/g, '-')\n          .trim()\n\n      const matchingProgram = programs.find((program: any) => \n        programSlug(program.title) === slug\n      )\n\n      if (!matchingProgram) {\n        return NextResponse.json({ error: 'Program not found' }, { status: 404 })\n      }\n\n      // Add additional program information for better matching\n      const enrichedProgram = {\n        ...matchingProgram,\n        slug: programSlug(matchingProgram.title),\n        name: matchingProgram.title, // Add name field for compatibility\n        description: matchingProgram.description || '',\n        image_url: matchingProgram.imageUrl,\n        category: matchingProgram.category || 'General'\n      }\n\n      return NextResponse.json(enrichedProgram)\n    }\n\n    return NextResponse.json(programs)\n  } catch (error) {\n    console.error('Error fetching radio programs:', error)\n    return NextResponse.json({ error: 'Failed to fetch programs' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.json()\n\n    // Validate required fields\n    if (!data.title || !data.description) {\n      return NextResponse.json(\n        { error: 'Title and description are required' },\n        { status: 400 }\n      )\n    }\n\n    const newProgram = await createRadioProgram(data)\n    return NextResponse.json(newProgram, { status: 201 })\n  } catch (error) {\n    console.error('Error creating radio program:', error)\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'\n    return NextResponse.json(\n      { error: `Failed to create radio program: ${errorMessage}` },\n      { status: 500 }\n    )\n  }\n}","size_bytes":2505},"components/auto-publish-scheduler.tsx":{"content":"\"use client\"\n\nimport { useEffect } from 'react'\n\nexport default function AutoPublishScheduler() {\n  useEffect(() => {\n    const autoPublish = async () => {\n      try {\n        // Auto-publish scheduled news\n        try {\n          const newsResponse = await fetch('/api/news/publish-scheduled', {\n            method: 'POST',\n          })\n\n          if (newsResponse.ok) {\n            const newsData = await newsResponse.json()\n            console.log('Auto-publish news successful:', newsData)\n          } else {\n            console.warn(`Auto-publish news failed: ${newsResponse.status} ${newsResponse.statusText}`)\n          }\n        } catch (newsError) {\n          console.warn('Auto-publish news error:', newsError instanceof Error ? newsError.message : 'Unknown error')\n        }\n\n        // Auto-publish scheduled radio episodes\n        try {\n          const radioResponse = await fetch('/api/radio/episodes/publish-scheduled', {\n            method: 'POST',\n          })\n\n          if (radioResponse.ok) {\n            const radioData = await radioResponse.json()\n            console.log('Auto-publish radio episodes successful:', radioData)\n          } else {\n            console.warn(`Auto-publish radio episodes failed: ${radioResponse.status} ${radioResponse.statusText}`)\n          }\n        } catch (radioError) {\n          console.warn('Auto-publish radio episodes error:', radioError instanceof Error ? radioError.message : 'Unknown error')\n        }\n      } catch (error) {\n        console.warn('Error in auto-publish scheduler:', error instanceof Error ? error.message : 'Unknown error')\n      }\n    }\n\n    // Check immediately on mount\n    autoPublish()\n\n    // Set up interval to check every 5 minutes\n    const interval = setInterval(autoPublish, 5 * 60 * 1000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return null // This component doesn't render anything\n}","size_bytes":1890},"components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      label?: React.ReactNode\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n      payload?: any[]\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n      payload?: any[]\n      verticalAlign?: \"top\" | \"bottom\"\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10522},"app/api/live-streams/all/route.ts":{"content":"\nimport { NextResponse } from 'next/server'\nimport { getAllLiveStreamsFromDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const liveStreams = await getAllLiveStreamsFromDB()\n    console.log('API: All live streams fetched from DB:', liveStreams.length, 'items')\n\n    return new Response(JSON.stringify(liveStreams), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'Last-Modified': new Date().toUTCString(),\n        'Vary': 'Accept-Encoding',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching all live streams:', error)\n    return NextResponse.json({ error: 'Failed to fetch live streams' }, { status: 500 })\n  }\n}\n","size_bytes":847},"components/auto-scroll-carousel-giant.tsx":{"content":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport Image from \"next/image\"\nimport type { LiveStream } from \"@/lib/api\"\n\ninterface AutoScrollCarouselProps {\n  items: LiveStream[]\n}\n\nexport default function AutoScrollCarouselGiant({ items }: AutoScrollCarouselProps) {\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  // Auto scroll functionality\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setActiveIndex((prev) => (prev === items.length - 1 ? 0 : prev + 1))\n    }, 5000)\n\n    return () => clearInterval(interval)\n  }, [items.length])\n\n  // Function to handle manual scrolling\n  const scroll = (direction: \"left\" | \"right\") => {\n    if (direction === \"left\") {\n      setActiveIndex((prev) => (prev === 0 ? items.length - 1 : prev - 1))\n    } else {\n      setActiveIndex((prev) => (prev === items.length - 1 ? 0 : prev + 1))\n    }\n  }\n\n  // Custom Play icon at 10x size\n  const GiantPlayIcon = () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"160\"\n      height=\"160\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n    </svg>\n  )\n\n  // Filter only live streams\n  const liveStreams = items.filter(stream => stream.isLive === true)\n\n  // If no live streams, show a message\n  if (liveStreams.length === 0) {\n    return <div className=\"text-center py-80 text-white text-8xl\">No hay transmisiones en vivo en este momento.</div>\n  }\n\n  return (\n    <div className=\"relative w-[3000px] mx-auto px-40\">\n      {/* Channel indicators - 10X SIZE */}\n      <div className=\"flex justify-end space-x-80 mb-80\">\n        <div className=\"flex items-center\">\n          <div className=\"bg-[#6b7280] text-white rounded-[50px] px-60 py-20 flex items-center text-7xl\">\n            <span className=\"mr-20\">CANAL</span>\n            <span className=\"font-bold\">45.1</span>\n          </div>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"bg-[#ef4444] text-white rounded-[50px] px-60 py-20 flex items-center text-7xl\">\n            <span className=\"mr-20\">CANAL</span>\n            <span className=\"font-bold\">45.2</span>\n          </div>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"bg-[#22c55e] text-white rounded-[50px] px-60 py-20 flex items-center text-7xl\">\n            <span className=\"mr-20\">CANAL</span>\n            <span className=\"font-bold\">45.3</span>\n          </div>\n        </div>\n      </div>\n\n      {/* EN VIVO AHORA title - 10X SIZE */}\n      <h2 className=\"text-[200px] font-bold mb-120 text-center flex items-center justify-center text-white\">\n        <span className=\"bg-red-600 w-60 h-60 rounded-full mr-40 animate-pulse\"></span>\n        EN VIVO AHORA\n      </h2>\n\n      {/* Video thumbnails - 10X SIZE */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-80 py-80\">\n        {liveStreams.slice(0, 4).map((stream, index) => (\n          <div key={stream.id} className=\"relative group cursor-pointer\">\n            <div className=\"relative h-[960px] w-full rounded-[50px] overflow-hidden\">\n              <Image\n                src={stream.thumbnailUrl || \"/placeholder.svg?height=960&width=1280\"}\n                alt={stream.title}\n                fill\n                className=\"object-cover\"\n                sizes=\"(max-width: 768px) 100vw, 50vw\"\n              />\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"bg-white bg-opacity-20 rounded-full p-60 group-hover:bg-opacity-40 transition-all\">\n                  <GiantPlayIcon />\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-40 text-center\">\n              <p className=\"text-6xl text-white\">{stream.title}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Navigation arrows - 10X SIZE */}\n      <div className=\"flex justify-center mt-80 space-x-80\">\n        <button onClick={() => scroll(\"left\")} className=\"focus:outline-none\" aria-label=\"Anterior\">\n          <svg width=\"240\" height=\"240\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"white\" />\n            <path d=\"M15 6L9 12L15 18\" stroke=\"#3b0764\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n          </svg>\n        </button>\n        <button onClick={() => scroll(\"right\")} className=\"focus:outline-none\" aria-label=\"Siguiente\">\n          <svg width=\"240\" height=\"240\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"white\" />\n            <path d=\"M9 18L15 12L9 6\" stroke=\"#3b0764\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  )\n}","size_bytes":4990},"app/admin/radio-episodes/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Play, Pencil, Trash2, Plus, Upload } from \"lucide-react\"\nimport Image from \"next/image\"\nimport BulkEpisodeUpload from \"@/components/bulk-episode-upload\"\n\ninterface RadioEpisode {\n  id: string\n  title: string\n  description: string\n  audioUrl: string\n  duration: string\n  publishDate: string\n  imageUrl: string\n  programId: string\n  programTitle?: string\n  programImageUrl?: string\n  createdAt: Date\n  published: boolean\n}\n\ninterface RadioProgram {\n  id: string\n  title: string\n}\n\nexport default function RadioEpisodesPage() {\n  const [episodes, setEpisodes] = useState<RadioEpisode[]>([])\n  const [programs, setPrograms] = useState<RadioProgram[]>([])\n  const [loading, setLoading] = useState(true)\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [editingEpisode, setEditingEpisode] = useState<RadioEpisode | null>(null)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    audioUrl: '',\n    duration: '',\n    publishDate: '',\n    imageUrl: '',\n    programId: '',\n    published: true\n  })\n  const [currentlyPlaying, setCurrentlyPlaying] = useState<string | null>(null)\n  const [audioElement, setAudioElement] = useState<HTMLAudioElement | null>(null)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    fetchEpisodes()\n    fetchPrograms()\n  }, [])\n\n  const fetchEpisodes = async () => {\n    try {\n      const response = await fetch('/api/radio/episodes')\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Fetched episodes:', data)\n        setEpisodes(data)\n      }\n    } catch (error) {\n      console.error('Error fetching episodes:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron cargar los episodios\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch('/api/radio/programs')\n      if (response.ok) {\n        const data = await response.json()\n        setPrograms(data)\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron cargar los programas\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!formData.title || !formData.description || !formData.programId) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor completa todos los campos requeridos\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    try {\n      console.log('Submitting episode data:', formData)\n\n      const url = editingEpisode ? `/api/radio/episodes/${editingEpisode.id}` : '/api/radio/episodes'\n      const method = editingEpisode ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...formData,\n          published: true\n        }),\n      })\n\n      if (response.ok) {\n        const result = await response.json()\n        console.log('Episode saved successfully:', result)\n\n        toast({\n          title: \"Éxito\",\n          description: `Episodio ${editingEpisode ? 'actualizado' : 'creado'} correctamente`\n        })\n        setFormData({\n          title: '',\n          description: '',\n          audioUrl: '',\n          duration: '',\n          publishDate: '',\n          imageUrl: '',\n          programId: '',\n          published: true\n        })\n        setEditingEpisode(null)\n        setDialogOpen(false)\n        fetchEpisodes()\n      } else {\n        const error = await response.text()\n        console.error('Error response:', error)\n        throw new Error(error || 'Error al procesar la solicitud')\n      }\n    } catch (error) {\n      console.error('Error:', error)\n      toast({\n        title: \"Error\",\n        description: \"Hubo un problema al procesar la solicitud\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleEdit = (episode: RadioEpisode) => {\n    setEditingEpisode(episode)\n\n    // Format the publish date for the datetime-local input field\n    let formattedDate = ''\n    if (episode.publishDate) {\n      const date = new Date(episode.publishDate)\n      if (!isNaN(date.getTime())) {\n        // Format for datetime-local input (YYYY-MM-DDTHH:MM)\n        formattedDate = date.toISOString().slice(0, 16)\n      }\n    }\n\n    setFormData({\n      title: episode.title,\n      description: episode.description,\n      audioUrl: episode.audioUrl,\n      duration: episode.duration,\n      publishDate: formattedDate,\n      imageUrl: episode.imageUrl,\n      programId: episode.programId.toString(),\n      published: episode.published !== false\n    })\n    setDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!window.confirm('¿Estás seguro de que quieres eliminar este episodio?')) {\n      return\n    }\n\n    try {\n      const response = await fetch(`/api/radio/episodes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (response.ok) {\n        toast({\n          title: \"Éxito\",\n          description: \"Episodio eliminado correctamente\"\n        })\n        setEpisodes(prevEpisodes => prevEpisodes.filter(episode => episode.id !== id))\n        fetchEpisodes()\n      } else {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(errorData.error || 'Error al eliminar el episodio')\n      }\n    } catch (error) {\n      console.error('Error deleting episode:', error)\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"No se pudo eliminar el episodio\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleAudioUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    // More flexible validation for MP3 files\n    const isValidAudio = file.type.startsWith('audio/') || \n                        file.name.toLowerCase().endsWith('.mp3') ||\n                        file.type === 'audio/mpeg' ||\n                        file.type === 'audio/mp3'\n\n    if (!isValidAudio) {\n      toast({\n        title: \"Error\",\n        description: \"Solo se permiten archivos de audio MP3\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    // Check file size (max 500MB)\n    if (file.size > 500 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"El archivo es demasiado grande. Máximo 500MB.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    const formDataUpload = new FormData()\n    formDataUpload.append('file', file)\n    formDataUpload.append('type', 'audio')\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formDataUpload,\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        console.log('Audio upload response:', data)\n\n        // Try multiple possible URL fields from the response\n        const audioUrl = data.audioUrl || data.url || data.fileUrl\n\n        if (audioUrl) {\n          setFormData(prev => ({ ...prev, audioUrl: audioUrl }))\n          toast({\n            title: \"Éxito\",\n            description: `Audio subido correctamente: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`\n          })\n\n          // Clear the file input\n          event.target.value = ''\n        } else {\n          console.error('Upload response missing URL:', data)\n          throw new Error('No se recibió URL del audio en la respuesta del servidor')\n        }\n      } else {\n        const errorText = await response.text()\n        const errorData = (() => {\n          try {\n            return JSON.parse(errorText)\n          } catch {\n            return { error: errorText || 'Error desconocido' }\n          }\n        })()\n\n        console.error('Upload error response:', response.status, errorData)\n        throw new Error(errorData.error || `Error del servidor: ${response.status}`)\n      }\n    } catch (error) {\n      console.error('Error uploading audio:', error)\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"No se pudo subir el audio\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    const formDataUpload = new FormData()\n    formDataUpload.append('file', file)\n    formDataUpload.append('type', 'radio')\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formDataUpload,\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setFormData(prev => ({ ...prev, imageUrl: data.imageUrl }))\n        toast({\n          title: \"Éxito\",\n          description: \"Imagen subida correctamente\"\n        })\n      } else {\n        throw new Error('Error al subir la imagen')\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudo subir la imagen\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handlePublishScheduled = async () => {\n    try {\n      const response = await fetch('/api/radio/episodes/publish-scheduled', {\n        method: 'POST',\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        toast({\n          title: \"Éxito\",\n          description: `Se publicaron ${data.publishedCount} episodios programados`,\n        })\n        fetchEpisodes() // Refresh the list\n      } else {\n        throw new Error('Error al publicar episodios programados')\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Error al publicar episodios programados\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">Cargando...</div>\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Episodios de Radio</h1>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handlePublishScheduled}\n            className=\"bg-green-50 hover:bg-green-100 text-green-700 border-green-200\"\n          >\n            Publicar Programados\n          </Button>\n          <BulkEpisodeUpload onComplete={fetchEpisodes} />\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => {\n                setEditingEpisode(null)\n                setFormData({\n                  title: '',\n                  description: '',\n                  audioUrl: '',\n                  duration: '',\n                  publishDate: '',\n                  imageUrl: '',\n                  programId: '',\n                  published: true\n                })\n              }}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nuevo Episodio\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingEpisode ? 'Editar Episodio' : 'Nuevo Episodio'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Descripción</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"programId\">Programa</Label>\n                  {editingEpisode && (\n                    <div className=\"mb-3 p-4 bg-blue-50 border-l-4 border-blue-400 rounded-r-lg\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-gray-700\">Programa actual:</span>\n                        <span className=\"text-base font-bold text-blue-900 bg-blue-200 px-3 py-1 rounded-full\">\n                          {editingEpisode.programTitle || \n                           programs.find(p => p.id.toString() === formData.programId)?.title || \n                           'Programa no encontrado'}\n                        </span>\n                      </div>\n                      <div className=\"mt-2 text-xs text-gray-600\">\n                        {editingEpisode.programTitle ? 'Selecciona un programa diferente si necesitas cambiarlo' : 'Selecciona el programa correcto'}\n                      </div>\n                    </div>\n                  )}\n                  <Select\n                    value={formData.programId}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, programId: value }))}\n                    required\n                  >\n                    <SelectTrigger className=\"bg-white\">\n                      <SelectValue placeholder=\"Seleccionar programa...\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white\">\n                      {programs.map((program) => (\n                        <SelectItem key={program.id} value={program.id.toString()}>\n                          {program.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"published\">Estado</Label>\n                  <Select\n                    value={formData.published ? 'published' : 'scheduled'}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, published: value === 'published' }))}\n                    required\n                  >\n                    <SelectTrigger className=\"bg-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white\">\n                      <SelectItem value=\"published\">Publicado</SelectItem>\n                      <SelectItem value=\"scheduled\">Programado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"audioFile\">Audio (MP3)</Label>\n                  <p className=\"text-xs text-gray-500 mb-2\">Tamaño máximo: 500MB</p>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"audioFile\"\n                      type=\"file\"\n                      accept=\"audio/mp3,audio/mpeg\"\n                      onChange={handleAudioUpload}\n                    />\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\">\n                      <Upload className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  {formData.audioUrl && (\n                    <p className=\"text-sm text-green-600 mt-1\">Audio cargado: {formData.audioUrl}</p>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"duration\">Duración</Label>\n                    <Input\n                      id=\"duration\"\n                      value={formData.duration}\n                      onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n                      placeholder=\"ej: 45MIN\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"publishDate\">Fecha y Hora de Publicación</Label>\n                    <Input\n                      id=\"publishDate\"\n                      type=\"datetime-local\"\n                      value={formData.publishDate}\n                      onChange={(e) => setFormData(prev => ({ ...prev, publishDate: e.target.value }))}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"imageFile\">Imagen del Episodio</Label>\n                  <div className=\"space-y-2\">\n                    <Input\n                      id=\"imageFile\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageUpload}\n                    />\n                    {formData.imageUrl && (\n                      <div className=\"mt-2\">\n                        <p className=\"text-sm text-gray-600 mb-2\">Vista previa:</p>\n                        <Image\n                          src={formData.imageUrl}\n                          alt=\"Vista previa\"\n                          width={100}\n                          height={60}\n                          className=\"rounded object-cover border\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\">\n                    {editingEpisode ? 'Actualizar' : 'Crear'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Episodios</CardTitle>\n          <CardDescription>\n            {episodes.length} episodios configurados\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Imagen</TableHead>\n                <TableHead>Título</TableHead>\n                <TableHead>Programa</TableHead>\n                <TableHead>Audio</TableHead>\n                <TableHead>Duración</TableHead>\n                <TableHead>Fecha de Publicación</TableHead>\n                <TableHead>Estado</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {episodes.map((episode) => (\n                <TableRow key={episode.id}>\n                  <TableCell>\n                    <Image\n                      src={(episode.imageUrl && episode.imageUrl.trim() !== '') ? episode.imageUrl : (episode.programImageUrl || '/images/placeholder-logo.png')}\n                      alt={episode.title}\n                      width={60}\n                      height={40}\n                      className=\"rounded object-cover\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{episode.title}</p>\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">{episode.description}</p>\n                      {episode.audioUrl && (\n                        <p className=\"text-xs text-blue-600 mt-1\">\n                          Audio: {episode.audioUrl.split('/').pop()}\n                        </p>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs\">\n                      {episode.programTitle || 'Sin programa'}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    {episode.audioUrl ? (\n                      <div className=\"text-xs\">\n                        <span className=\"text-green-600\">✓ Audio</span>\n                        <br />\n                        <span className=\"text-gray-500 truncate max-w-20 block\">\n                          {episode.audioUrl.split('/').pop()}\n                        </span>\n                      </div>\n                    ) : (\n                      <span className=\"text-red-500 text-xs\">Sin audio</span>\n                    )}\n                  </TableCell>\n                  <TableCell>{episode.duration}</TableCell>\n                  <TableCell>\n                    {episode.publishDate ? new Date(episode.publishDate).toLocaleString('es-ES', {\n                      year: 'numeric',\n                      month: '2-digit',\n                      day: '2-digit',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    }) : ''}\n                  </TableCell>\n                  <TableCell>{episode.published ? 'Publicado' : 'Programado'}</TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(episode)}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(episode.id)}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        title=\"Eliminar episodio\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                      {episode.audioUrl && (\n                        <div className=\"flex gap-1\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => {\n                              // Stop any currently playing audio\n                              if (audioElement) {\n                                audioElement.pause()\n                                audioElement.currentTime = 0\n                              }\n\n                              if (currentlyPlaying === episode.id) {\n                                // Stop current audio\n                                setCurrentlyPlaying(null)\n                                setAudioElement(null)\n                              } else {\n                                // Start new audio\n                                console.log('Playing audio from:', episode.audioUrl)\n                                const audio = new Audio(episode.audioUrl)\n\n                                audio.addEventListener('ended', () => {\n                                  setCurrentlyPlaying(null)\n                                  setAudioElement(null)\n                                })\n\n                                audio.addEventListener('error', (err) => {\n                                  console.error('Error playing audio:', err)\n                                  let errorMessage = \"No se pudo reproducir el audio\"\n\n                                  if (audio.error) {\n                                    switch (audio.error.code) {\n                                      case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n                                        errorMessage = \"Archivo de audio no encontrado o formato no soportado\"\n                                        break\n                                      case MediaError.MEDIA_ERR_NETWORK:\n                                        errorMessage = \"Error de red al cargar el audio\"\n                                        break\n                                      case MediaError.MEDIA_ERR_DECODE:\n                                        errorMessage = \"Error al decodificar el archivo de audio\"\n                                        break\n                                      case MediaError.MEDIA_ERR_ABORTED:\n                                        errorMessage = \"Carga de audio interrumpida\"\n                                        break\n                                      default:\n                                        errorMessage = \"Error desconocido al reproducir audio\"\n                                    }\n                                  }\n\n                                  toast({\n                                    title: \"Error de Audio\",\n                                    description: errorMessage,\n                                    variant: \"destructive\"\n                                  })\n                                  setCurrentlyPlaying(null)\n                                  setAudioElement(null)\n                                })\n\n                                audio.play().then(() => {\n                                  setCurrentlyPlaying(episode.id)\n                                  setAudioElement(audio)\n                                  toast({\n                                    title: \"Reproduciendo\",\n                                    description: `${episode.title}`,\n                                  })\n                                }).catch(err => {\n                                  console.error('Error playing audio:', err)\n                                  toast({\n                                    title: \"Error de Reproducción\",\n                                    description: \"El archivo de audio no existe o no se puede reproducir. Verifique que el archivo esté correctamente subido.\",\n                                    variant: \"destructive\"\n                                  })\n                                  setCurrentlyPlaying(null)\n                                  setAudioElement(null)\n                                })\n                              }\n                            }}\n                            title={currentlyPlaying === episode.id ? \"Detener audio\" : \"Reproducir audio\"}\n                            className={currentlyPlaying === episode.id ? \"bg-green-100 text-green-700\" : \"\"}\n                          >\n                            {currentlyPlaying === episode.id ? (\n                              <div className=\"h-4 w-4 border-2 border-current\" />\n                            ) : (\n                              <Play className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":27723},"app/api/documents/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { query } from '@/lib/database'\n\nexport async function DELETE(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n\n    await query('DELETE FROM documents WHERE id = $1', [id])\n    \n    return NextResponse.json({ message: 'Document deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting document:', error)\n    return NextResponse.json(\n      { error: 'Error deleting document' }, \n      { status: 500 }\n    )\n  }\n}\n","size_bytes":600},"components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"app/admin/parliamentary-groups/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, Edit2, Trash2 } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport type { ParliamentaryGroup } from \"@/lib/api\"\n\nexport default function ParliamentaryGroupsPage() {\n  const [groups, setGroups] = useState<ParliamentaryGroup[]>([])\n  const [loading, setLoading] = useState(true)\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [editingGroup, setEditingGroup] = useState<ParliamentaryGroup | null>(null)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    abbreviation: \"\",\n    colorHex: \"\",\n    description: \"\",\n    imageUrl: \"\"\n  })\n  const { toast } = useToast()\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n\n    try {\n      const formData = new FormData()\n      formData.append('file', file)\n      formData.append('type', 'organs') // Reusing organs upload directory\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setFormData(prev => ({ ...prev, imageUrl: data.imageUrl }))\n        toast({\n          title: \"Éxito\",\n          description: \"Imagen subida correctamente\"\n        })\n      } else {\n        throw new Error('Failed to upload image')\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo subir la imagen\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const fetchGroups = async () => {\n    try {\n      const response = await fetch('/api/parliamentary-groups')\n      if (response.ok) {\n        const data = await response.json()\n        setGroups(data)\n      }\n    } catch (error) {\n      console.error('Error fetching parliamentary groups:', error)\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron cargar los grupos parlamentarios\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchGroups()\n  }, [])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const url = editingGroup ? `/api/parliamentary-groups/${editingGroup.id}` : '/api/parliamentary-groups'\n      const method = editingGroup ? 'PUT' : 'POST'\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n      })\n\n      if (response.ok) {\n        toast({\n          title: \"Éxito\",\n          description: editingGroup ? \"Grupo parlamentario actualizado\" : \"Grupo parlamentario creado\"\n        })\n        setDialogOpen(false)\n        setEditingGroup(null)\n        setFormData({ name: \"\", abbreviation: \"\", colorHex: \"\", description: \"\", imageUrl: \"\" })\n        fetchGroups()\n      } else {\n        throw new Error('Failed to save')\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo guardar el grupo parlamentario\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const handleEdit = (group: ParliamentaryGroup) => {\n    setEditingGroup(group)\n    setFormData({\n      name: group.name,\n      abbreviation: group.abbreviation,\n      colorHex: group.colorHex || \"\",\n      description: group.description || \"\",\n      imageUrl: group.imageUrl\n    })\n    setDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('¿Estás seguro de que quieres eliminar este grupo parlamentario?')) {\n      try {\n        const response = await fetch(`/api/parliamentary-groups/${id}`, {\n          method: 'DELETE'\n        })\n\n        if (response.ok) {\n          toast({\n            title: \"Éxito\",\n            description: \"Grupo parlamentario eliminado\"\n          })\n          fetchGroups()\n        } else {\n          throw new Error('Failed to delete')\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"No se pudo eliminar el grupo parlamentario\",\n          variant: \"destructive\"\n        })\n      }\n    }\n  }\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">Cargando...</div>\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Grupos Parlamentarios</h1>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => {\n              setEditingGroup(null)\n              setFormData({ name: \"\", abbreviation: \"\", colorHex: \"\", description: \"\", imageUrl: \"\" })\n            }}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Grupo Parlamentario\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingGroup ? \"Editar Grupo Parlamentario\" : \"Nuevo Grupo Parlamentario\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nombre</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"abbreviation\">Abreviatura</Label>\n                  <Input\n                    id=\"abbreviation\"\n                    value={formData.abbreviation}\n                    onChange={(e) => setFormData(prev => ({ ...prev, abbreviation: e.target.value }))}\n                    required\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"colorHex\">Color (Hex)</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"colorHex\"\n                    type=\"color\"\n                    value={formData.colorHex || \"#000000\"}\n                    onChange={(e) => setFormData(prev => ({ ...prev, colorHex: e.target.value }))}\n                    className=\"w-20\"\n                  />\n                  <Input\n                    value={formData.colorHex}\n                    onChange={(e) => setFormData(prev => ({ ...prev, colorHex: e.target.value }))}\n                    placeholder=\"#000000\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Descripción</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"imageFile\">Imagen del Grupo</Label>\n                <Input\n                  id=\"imageFile\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                />\n                {formData.imageUrl && (\n                  <div className=\"mt-2\">\n                    <img \n                      src={formData.imageUrl} \n                      alt=\"Preview\" \n                      className=\"w-20 h-20 object-cover rounded border\"\n                    />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\">\n                  {editingGroup ? \"Actualizar\" : \"Crear\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Grupos Parlamentarios</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nombre</TableHead>\n                <TableHead>Abreviatura</TableHead>\n                <TableHead>Legisladores</TableHead>\n                <TableHead>Color</TableHead>\n                <TableHead>Descripción</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {groups.map((group) => (\n                <TableRow key={group.id}>\n                  <TableCell className=\"font-medium\">{group.name}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{group.abbreviation}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"secondary\">\n                      {group.legislatorCount || 0}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {group.colorHex && (\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-6 h-6 rounded border\"\n                          style={{ backgroundColor: group.colorHex }}\n                        ></div>\n                        <span className=\"text-sm text-gray-600\">{group.colorHex}</span>\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {group.description || \"—\"}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(group)}\n                      >\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(group.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":11131},"app/api/programs/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { updateProgramInDB, deleteProgramFromDB } from '@/lib/api-database'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const data = await request.json()\n    const program = await updateProgramInDB(id, data)\n    \n    if (!program) {\n      return NextResponse.json(\n        { error: 'Program not found' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json(program)\n  } catch (error) {\n    console.error('Error updating program:', error)\n    return NextResponse.json(\n      { error: 'Failed to update program' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const success = await deleteProgramFromDB(id)\n    \n    if (!success) {\n      return NextResponse.json(\n        { error: 'Program not found' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting program:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete program' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1298},"scripts/categorize-news.js":{"content":"\nconst { Pool } = require('pg')\n\n// Create a simple script to update news categories\nasync function categorizeNews() {\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL not set')\n    return\n  }\n\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n  })\n\n  try {\n    // Get all news items without categories\n    const result = await pool.query('SELECT id, title FROM news WHERE category IS NULL OR category = \\'\\'')\n    console.log(`Found ${result.rows.length} news items without categories`)\n\n    // Sample categorization - you can modify this logic\n    const categories = [\n      'Trabajo en comisiones',\n      'Trabajo en pleno', \n      'Foros y seminarios',\n      'Reformas aprobadas',\n      'Reformas en DOF',\n      'Temas de actualidad'\n    ]\n\n    for (const newsItem of result.rows) {\n      // Simple logic: assign category based on title keywords\n      let category = 'Temas de actualidad' // default\n      \n      if (newsItem.title.toLowerCase().includes('comisión') || newsItem.title.toLowerCase().includes('comité')) {\n        category = 'Trabajo en comisiones'\n      } else if (newsItem.title.toLowerCase().includes('pleno') || newsItem.title.toLowerCase().includes('sesión')) {\n        category = 'Trabajo en pleno'\n      } else if (newsItem.title.toLowerCase().includes('foro') || newsItem.title.toLowerCase().includes('seminario')) {\n        category = 'Foros y seminarios'\n      } else if (newsItem.title.toLowerCase().includes('reforma') && newsItem.title.toLowerCase().includes('aprob')) {\n        category = 'Reformas aprobadas'\n      } else if (newsItem.title.toLowerCase().includes('dof') || newsItem.title.toLowerCase().includes('diario oficial')) {\n        category = 'Reformas en DOF'\n      }\n\n      await pool.query('UPDATE news SET category = $1 WHERE id = $2', [category, newsItem.id])\n      console.log(`Updated \"${newsItem.title}\" -> ${category}`)\n    }\n\n    console.log('News categorization completed!')\n    \n  } catch (error) {\n    console.error('Error categorizing news:', error)\n  } finally {\n    await pool.end()\n  }\n}\n\n// Run if called directly\nif (require.main === module) {\n  categorizeNews()\n}\n\nmodule.exports = { categorizeNews }\n","size_bytes":2296},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","size_bytes":211},"app/api/radio/navigation/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getDB } from '@/lib/database-env'\n\ninterface NavigationItem {\n  id: string\n  name: string\n  href: string\n  displayOrder: number\n}\n\n// Default navigation items as fallback\nconst defaultNavigation: NavigationItem[] = [\n  { id: 'toma-tribuna', name: 'Toma Tribuna', href: '/radio/toma-tribuna', displayOrder: 0 },\n  { id: 'entrevistas', name: 'Entrevistas', href: '/radio/entrevistas', displayOrder: 1 },\n  { id: 'sitio-abierto', name: 'Sitio Abierto', href: '/radio/sitio-abierto', displayOrder: 2 },\n  { id: 'noticias-congreso', name: 'Noticias del Congreso', href: '/radio/noticias-congreso', displayOrder: 3 }\n]\n\nexport async function GET() {\n  try {\n    const pool = getDB()\n    \n    if (!pool) {\n      console.warn('Database not available, returning default navigation')\n      return NextResponse.json(defaultNavigation)\n    }\n\n    // First, ensure the table exists\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS radio_navigation (\n        id VARCHAR(255) PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        href VARCHAR(255) NOT NULL,\n        display_order INTEGER DEFAULT 0,\n        active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `)\n\n    // Check if we have any navigation items\n    const countResult = await pool.query('SELECT COUNT(*) as count FROM radio_navigation WHERE active = true')\n    const count = parseInt(countResult.rows[0].count)\n\n    // If no items exist, insert defaults\n    if (count === 0) {\n      console.log('No navigation items found, inserting defaults')\n      for (const item of defaultNavigation) {\n        await pool.query(`\n          INSERT INTO radio_navigation (id, name, href, display_order, active)\n          VALUES ($1, $2, $3, $4, $5)\n          ON CONFLICT (id) DO NOTHING\n        `, [item.id, item.name, item.href, item.displayOrder, true])\n      }\n    }\n\n    // Fetch current navigation items\n    const result = await pool.query(`\n      SELECT id, name, href, display_order as \"displayOrder\"\n      FROM radio_navigation \n      WHERE active = true\n      ORDER BY display_order ASC, name ASC\n    `)\n\n    return NextResponse.json(result.rows)\n  } catch (error) {\n    console.error('Error fetching radio navigation:', error)\n    return NextResponse.json(defaultNavigation)\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const navigationItems: NavigationItem[] = await request.json()\n    const pool = getDB()\n\n    if (!pool) {\n      return NextResponse.json({ error: 'Database not available' }, { status: 500 })\n    }\n\n    // Start a transaction\n    await pool.query('BEGIN')\n\n    try {\n      // Mark all existing items as inactive\n      await pool.query('UPDATE radio_navigation SET active = false')\n\n      // Insert or update each navigation item\n      for (const item of navigationItems) {\n        await pool.query(`\n          INSERT INTO radio_navigation (id, name, href, display_order, active, updated_at)\n          VALUES ($1, $2, $3, $4, true, NOW())\n          ON CONFLICT (id) \n          DO UPDATE SET \n            name = EXCLUDED.name,\n            href = EXCLUDED.href,\n            display_order = EXCLUDED.display_order,\n            active = true,\n            updated_at = NOW()\n        `, [item.id, item.name, item.href, item.displayOrder])\n      }\n\n      await pool.query('COMMIT')\n\n      // Fetch updated navigation\n      const result = await pool.query(`\n        SELECT id, name, href, display_order as \"displayOrder\"\n        FROM radio_navigation \n        WHERE active = true\n        ORDER BY display_order ASC\n      `)\n\n      return NextResponse.json(result.rows)\n    } catch (error) {\n      await pool.query('ROLLBACK')\n      throw error\n    }\n  } catch (error) {\n    console.error('Error updating radio navigation:', error)\n    return NextResponse.json({ error: 'Failed to update navigation' }, { status: 500 })\n  }\n}\n","size_bytes":3953},"app/api/news/all/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { getAllNewsFromDB } from '@/lib/api-database'\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '20')\n    \n    const result = await getAllNewsFromDB(page, limit)\n    console.log('API: All news fetched from DB:', result.news.length, 'items', { page, limit, total: result.total })\n\n    // News are already sorted by publishedAt (then createdAt) DESC in database query\n    const response = {\n      ...result,\n      news: result.news\n    }\n\n    return new Response(JSON.stringify(response), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching all news:', error)\n    return NextResponse.json({ error: 'Failed to fetch news' }, { status: 500 })\n  }\n}","size_bytes":1100},"components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1091},"app/admin/radio-podcasts/page.tsx":{"content":"\n\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n\nexport default function RadioPodcastsPage() {\n  return (\n    <div className=\"container mx-auto p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Page Removed</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>This page has been removed. Please navigate to another section.</p>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":456},"app/noticias/layout.tsx":{"content":"import type React from \"react\"\nimport type { Metadata } from \"next\"\n\nexport const metadata: Metadata = {\n  title: \"Noticias | Canal del Congreso\",\n  description: \"Mantente informado sobre las últimas noticias del Congreso de México\",\n}\n\nexport default function NoticiasLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <>{children}</>\n}\n","size_bytes":357},"app/admin/transparency-sections/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { ArrowLeft, Save, Edit, Plus, Trash2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\ninterface TransparencyFileItem {\n  label: string\n  fileUrl?: string\n  fileType?: string\n}\n\ninterface TransparencyCard {\n  title: string\n  description: string\n  linkUrl?: string\n  hasButton?: boolean\n  items?: TransparencyFileItem[]\n}\n\ninterface TransparencySection {\n  id: string\n  sectionKey: string\n  sectionTitle: string\n  iconType?: string\n  cardsData: TransparencyCard[]\n  displayOrder: number\n  isActive: boolean\n}\n\nexport default function TransparencySectionsAdmin() {\n  const [sections, setSections] = useState<TransparencySection[]>([])\n  const [editingSection, setEditingSection] = useState<TransparencySection | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSaving, setIsSaving] = useState(false)\n\n  useEffect(() => {\n    loadSections()\n  }, [])\n\n  const loadSections = async () => {\n    try {\n      setIsLoading(true)\n      const response = await fetch('/api/transparency-sections', {\n        cache: 'no-store'\n      })\n      if (response.ok) {\n        const data = await response.json()\n        setSections(data)\n      }\n    } catch (error) {\n      console.error('Error loading transparency sections:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleEdit = (section: TransparencySection) => {\n    setEditingSection({ ...section })\n  }\n\n  const handleSave = async () => {\n    if (!editingSection) return\n    \n    try {\n      setIsSaving(true)\n      const response = await fetch(`/api/transparency-sections/${editingSection.sectionKey}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          sectionTitle: editingSection.sectionTitle,\n          cardsData: editingSection.cardsData,\n          iconType: editingSection.iconType,\n          displayOrder: editingSection.displayOrder,\n          isActive: editingSection.isActive\n        })\n      })\n\n      if (response.ok) {\n        await loadSections()\n        setEditingSection(null)\n        alert('Sección actualizada exitosamente')\n      } else {\n        alert('Error al actualizar la sección')\n      }\n    } catch (error) {\n      console.error('Error saving section:', error)\n      alert('Error al guardar los cambios')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const updateSectionTitle = (title: string) => {\n    if (!editingSection) return\n    setEditingSection({ ...editingSection, sectionTitle: title })\n  }\n\n  const updateCardField = (cardIndex: number, field: keyof TransparencyCard, value: string | string[] | boolean) => {\n    if (!editingSection) return\n    const newCards = [...editingSection.cardsData]\n    if (field === 'items' && typeof value === 'string') {\n      // Convert comma-separated string to array of file items\n      const items = value.split(',').map(label => ({ label: label.trim() })).filter(item => item.label)\n      newCards[cardIndex] = { ...newCards[cardIndex], items }\n    } else {\n      newCards[cardIndex] = { ...newCards[cardIndex], [field]: value }\n    }\n    setEditingSection({ ...editingSection, cardsData: newCards })\n  }\n\n  const addCard = () => {\n    if (!editingSection) return\n    const newCard: TransparencyCard = {\n      title: 'Nueva Tarjeta',\n      description: 'Descripción de la nueva tarjeta',\n      linkUrl: '',\n      hasButton: false,\n      items: []\n    }\n    setEditingSection({\n      ...editingSection,\n      cardsData: [...editingSection.cardsData, newCard]\n    })\n  }\n\n  const removeCard = (cardIndex: number) => {\n    if (!editingSection) return\n    const newCards = editingSection.cardsData.filter((_, index) => index !== cardIndex)\n    setEditingSection({\n      ...editingSection,\n      cardsData: newCards\n    })\n  }\n\n  const addItemToCard = (cardIndex: number) => {\n    if (!editingSection) return\n    const newCards = [...editingSection.cardsData]\n    const items = newCards[cardIndex].items || []\n    items.push({ label: 'Nuevo elemento', fileUrl: '', fileType: '' })\n    newCards[cardIndex] = { ...newCards[cardIndex], items }\n    setEditingSection({ ...editingSection, cardsData: newCards })\n  }\n\n  const removeItemFromCard = (cardIndex: number, itemIndex: number) => {\n    if (!editingSection) return\n    const newCards = [...editingSection.cardsData]\n    const items = (newCards[cardIndex].items || []).filter((_, index) => index !== itemIndex)\n    newCards[cardIndex] = { ...newCards[cardIndex], items }\n    setEditingSection({ ...editingSection, cardsData: newCards })\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <p>Cargando secciones...</p>\n      </div>\n    )\n  }\n\n  if (editingSection) {\n    return (\n      <div className=\"container mx-auto p-6 max-w-4xl\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setEditingSection(null)}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Editar Sección: {editingSection.sectionKey}</h1>\n        </div>\n\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Título de la Sección</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Input\n              value={editingSection.sectionTitle}\n              onChange={(e) => updateSectionTitle(e.target.value)}\n              placeholder=\"Título de la sección\"\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Tarjetas de Contenido</h2>\n            <Button onClick={addCard} size=\"sm\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Agregar Tarjeta\n            </Button>\n          </div>\n          {editingSection.cardsData.map((card, index) => (\n            <Card key={index}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-sm\">Tarjeta {index + 1}</CardTitle>\n                  <Button \n                    variant=\"destructive\" \n                    size=\"sm\" \n                    onClick={() => removeCard(index)}\n                    disabled={editingSection.cardsData.length === 1}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Eliminar\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Título</Label>\n                  <Input\n                    value={card.title}\n                    onChange={(e) => updateCardField(index, 'title', e.target.value)}\n                    placeholder=\"Título de la tarjeta\"\n                  />\n                </div>\n                <div>\n                  <Label>Descripción</Label>\n                  <Textarea\n                    value={card.description}\n                    onChange={(e) => updateCardField(index, 'description', e.target.value)}\n                    placeholder=\"Descripción de la tarjeta\"\n                    rows={4}\n                  />\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Elementos de Lista con Archivos Descargables</Label>\n                    <Button \n                      onClick={() => addItemToCard(index)} \n                      size=\"sm\" \n                      variant=\"outline\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Agregar Elemento\n                    </Button>\n                  </div>\n                  {card.items && card.items.length > 0 && (\n                    <>\n                      {card.items.map((item, itemIndex) => (\n                        <div key={itemIndex} className=\"border rounded-lg p-4 space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <Label className=\"text-sm font-medium\">Elemento {itemIndex + 1}</Label>\n                            <div className=\"flex items-center gap-2\">\n                              {item.fileUrl && item.fileType && (\n                                <span className=\"text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded\">\n                                  {item.fileType.toUpperCase()}\n                                </span>\n                              )}\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeItemFromCard(index, itemIndex)}\n                              >\n                                <Trash2 className=\"w-4 h-4 text-red-500\" />\n                              </Button>\n                            </div>\n                          </div>\n                        <div>\n                          <Label className=\"text-xs text-gray-600\">Etiqueta</Label>\n                          <Input\n                            value={item.label}\n                            onChange={(e) => {\n                              const newItems = [...card.items!]\n                              newItems[itemIndex] = { ...newItems[itemIndex], label: e.target.value }\n                              const newCards = [...editingSection.cardsData]\n                              newCards[index] = { ...newCards[index], items: newItems }\n                              setEditingSection({ ...editingSection, cardsData: newCards })\n                            }}\n                            placeholder=\"ej: Actividades 2021\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs text-gray-600\">Archivo (PDF, Word, Excel)</Label>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Input\n                              type=\"file\"\n                              accept=\".pdf,.doc,.docx,.xls,.xlsx\"\n                              onChange={async (e) => {\n                                const file = e.target.files?.[0]\n                                if (!file) return\n                                \n                                const formData = new FormData()\n                                formData.append('file', file)\n                                formData.append('type', 'documents')\n                                \n                                try {\n                                  const response = await fetch('/api/upload', {\n                                    method: 'POST',\n                                    body: formData\n                                  })\n                                  \n                                  if (response.ok) {\n                                    const data = await response.json()\n                                    const newItems = [...card.items!]\n                                    newItems[itemIndex] = {\n                                      ...newItems[itemIndex],\n                                      fileUrl: data.url,\n                                      fileType: file.name.split('.').pop() || 'pdf'\n                                    }\n                                    const newCards = [...editingSection.cardsData]\n                                    newCards[index] = { ...newCards[index], items: newItems }\n                                    setEditingSection({ ...editingSection, cardsData: newCards })\n                                  } else {\n                                    alert('Error al subir el archivo')\n                                  }\n                                } catch (error) {\n                                  console.error('Error uploading file:', error)\n                                  alert('Error al subir el archivo')\n                                }\n                              }}\n                              className=\"flex-1\"\n                            />\n                            {item.fileUrl && (\n                              <a \n                                href={item.fileUrl} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"text-blue-600 hover:underline text-xs\"\n                              >\n                                Ver archivo\n                              </a>\n                            )}\n                          </div>\n                        </div>\n                        </div>\n                      ))}\n                      <p className=\"text-xs text-gray-500\">Los elementos con archivo se mostrarán como enlaces de descarga</p>\n                    </>\n                  )}\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`hasButton-${index}`}\n                    checked={card.hasButton || false}\n                    onCheckedChange={(checked) => updateCardField(index, 'hasButton', checked as boolean)}\n                  />\n                  <Label htmlFor={`hasButton-${index}`} className=\"text-sm font-normal cursor-pointer\">\n                    Mostrar botón de enlace\n                  </Label>\n                </div>\n                \n                {card.hasButton && (\n                  <div>\n                    <Label>URL del Enlace</Label>\n                    <Input\n                      value={card.linkUrl || ''}\n                      onChange={(e) => updateCardField(index, 'linkUrl', e.target.value)}\n                      placeholder=\"https://ejemplo.com o /ruta-interna\"\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"flex justify-end gap-4 mt-6\">\n          <Button variant=\"outline\" onClick={() => setEditingSection(null)}>\n            Cancelar\n          </Button>\n          <Button onClick={handleSave} disabled={isSaving}>\n            <Save className=\"w-4 h-4 mr-2\" />\n            {isSaving ? 'Guardando...' : 'Guardar Cambios'}\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/admin\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Panel\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">Gestión de Secciones de Transparencia</h1>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Secciones de Transparencia</CardTitle>\n          <CardDescription>\n            Edita el contenido de las secciones de transparencia que aparecen en la página pública\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {sections.map((section) => (\n              <div key={section.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div>\n                  <h3 className=\"font-semibold\">{section.sectionTitle}</h3>\n                  <p className=\"text-sm text-gray-500\">\n                    {section.cardsData.length} tarjeta(s) · Clave: {section.sectionKey}\n                  </p>\n                </div>\n                <Button onClick={() => handleEdit(section)} size=\"sm\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Editar\n                </Button>\n              </div>\n            ))}\n            {sections.length === 0 && (\n              <p className=\"text-center text-gray-500 py-8\">\n                No hay secciones disponibles. Primero debes poblar la base de datos con el contenido inicial.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":16626},"app/api/transparency-sections/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { getAllTransparencySectionsFromDB } from '@/lib/api-database'\n\nexport async function GET() {\n  try {\n    const sections = await getAllTransparencySectionsFromDB()\n    \n    return new Response(JSON.stringify(sections), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching transparency sections:', error)\n    return NextResponse.json({ error: 'Failed to fetch transparency sections' }, { status: 500 })\n  }\n}\n","size_bytes":703},"app/api/transparency-sections/[sectionKey]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { getTransparencySectionByKeyFromDB, updateTransparencySectionInDB } from '@/lib/api-database'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ sectionKey: string }> }\n) {\n  try {\n    const { sectionKey } = await params\n    const section = await getTransparencySectionByKeyFromDB(sectionKey)\n    \n    if (!section) {\n      return NextResponse.json({ error: 'Section not found' }, { status: 404 })\n    }\n    \n    return NextResponse.json(section)\n  } catch (error) {\n    console.error('Error fetching transparency section:', error)\n    return NextResponse.json({ error: 'Failed to fetch transparency section' }, { status: 500 })\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ sectionKey: string }> }\n) {\n  try {\n    const { sectionKey } = await params\n    const data = await request.json()\n    const updatedSection = await updateTransparencySectionInDB(sectionKey, data)\n    \n    if (!updatedSection) {\n      return NextResponse.json({ error: 'Section not found or no changes made' }, { status: 404 })\n    }\n    \n    return NextResponse.json(updatedSection)\n  } catch (error) {\n    console.error('Error updating transparency section:', error)\n    return NextResponse.json({ error: 'Failed to update transparency section' }, { status: 500 })\n  }\n}\n","size_bytes":1391},"app/api/admin/seed-transparency/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { query } from '@/lib/database'\n\nexport async function POST() {\n  try {\n    const transparencySections = [\n      {\n        sectionKey: 'informacion-utilidad',\n        sectionTitle: 'INFORMACIÓN DE UTILIDAD PÚBLICA',\n        iconType: 'document',\n        displayOrder: 1,\n        cardsData: [\n          {\n            title: 'DEFENSOR DE AUDIENCIAS',\n            description: 'El Defensor de Audiencias es el ombudsman del Canal del Congreso encargado de recibir, analizar y dar seguimiento de las solicitudes, dudas, quejas y sugerencias del público respecto a la programación, contenidos y servicios.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'AUTONOMÍA TÉCNICA Y DE GESTIÓN',\n            description: 'El Canal del Congreso es el medio de comunicación especializado en información del Poder Legislativo que tiene autonomía técnica y de gestión, para garantizar su independencia y una perspectiva objetiva.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'ADQUISICIONES',\n            description: 'Es política del Canal del Congreso dar a conocer las adquisiciones y arrendamientos de bienes y servicios autorizados para publicación por la Comisión Bicameral del Canal de Televisión del Congreso General de los Estados Unidos Mexicanos.',\n            linkUrl: '#',\n            hasButton: true\n          }\n        ]\n      },\n      {\n        sectionKey: 'estructura-presupuesto',\n        sectionTitle: 'ESTRUCTURA Y PRESUPUESTO',\n        iconType: 'building',\n        displayOrder: 2,\n        cardsData: [\n          {\n            title: 'PRESUPUESTO',\n            description: 'Información sobre el presupuesto asignado y ejercido por el Canal del Congreso.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'DIRECTORIO',\n            description: 'Listado del personal de mando superior y mandos medios del Canal.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'ORGANIGRAMA',\n            description: 'Organigrama de las áreas que conforman el Canal del Congreso.',\n            linkUrl: '#',\n            hasButton: true\n          }\n        ]\n      },\n      {\n        sectionKey: 'normatividad',\n        sectionTitle: 'NORMATIVIDAD',\n        iconType: 'scale',\n        displayOrder: 3,\n        cardsData: [\n          {\n            title: 'NORMATIVIDAD GENERAL',\n            description: 'Constitución, Ley Federal de Telecomunicaciones, Ley Federal de Transparencia y Acceso a la Información, Ley General de Protección de Datos Personales en Posesión de Sujetos Obligados, y Ley Federal de Archivos.',\n            hasButton: false\n          },\n          {\n            title: 'NORMATIVIDAD INTERNA',\n            description: 'Ley Orgánica del Congreso, Reglamento del Canal, Políticas de Comunicación, Guía de Usuario, Código de Ética, Lineamientos de la Defensoría de Audiencia, Reglas de Funcionamiento del Consejo Consultivo, Lineamientos Generales de Administración, entre otros.',\n            hasButton: false\n          }\n        ]\n      },\n      {\n        sectionKey: 'compromisos-transparencia',\n        sectionTitle: 'COMPROMISOS CON LA TRANSPARENCIA',\n        iconType: 'message',\n        displayOrder: 4,\n        cardsData: [\n          {\n            title: 'ÓRGANO RECTOR',\n            description: 'El Canal del Congreso está regido por una comisión legislativa integrada de manera plural por representantes de la Cámara de Senadores y de la Cámara de Diputados, denominada \"Comisión Bicameral del Canal de Televisión del Congreso.',\n            hasButton: false\n          },\n          {\n            title: 'CONSEJO CONSULTIVO',\n            description: 'El Canal del Congreso cuenta con un Consejo Consultivo, conformado por once especialistas con amplia trayectoria y reconocimiento en el ámbito de los medios de comunicación, propuestos por instituciones académicas, organizaciones civiles y otras.',\n            hasButton: false\n          }\n        ]\n      },\n      {\n        sectionKey: 'transparencia-focalizada',\n        sectionTitle: 'TRANSPARENCIA FOCALIZADA',\n        iconType: 'book',\n        displayOrder: 5,\n        cardsData: [\n          {\n            title: 'NUEVAS PRODUCCIONES',\n            description: 'El Canal del Congreso ha ampliado su oferta de programación y diversificado sus contenidos, a través de nuevos espacios de información y análisis del acontecer nacional e internacional, que contribuyen a generar una sociedad mejor informada.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'ACCESIBILIDAD',\n            description: 'Comprometidos con la inclusión de diversos sectores de la sociedad a los contenidos del Canal del Congreso, se incorporó desde diciembre de 2015 la interpretación a Lengua de Señas Mexicanas de las sesiones de ambas Cámaras del Congreso de la Unión, así como el noticiero nocturno de este medio de comunicación.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'ENCUESTAS DE OPINIÓN PÚBLICA',\n            description: 'Entre sus políticas de vinculación con la audiencia, el Canal del Congreso realiza estudios de opinión para conocer los perfiles, comportamientos, necesidades e inquietudes de la ciudadanía con respecto a la comunicación parlamentaria y a la función social del propio Canal.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'REPORTES DE COMUNICACIÓN DE LA AUDIENCIA',\n            description: 'Entre sus políticas de vinculación con la audiencia, el Canal del Congreso busca generar mayor interacción y dar atención a las comunicaciones que recibe a través del Sistema Escríbenos y redes sociales.',\n            linkUrl: '#',\n            hasButton: true\n          }\n        ]\n      },\n      {\n        sectionKey: 'datos-abiertos',\n        sectionTitle: 'DATOS ABIERTOS',\n        iconType: 'database',\n        displayOrder: 6,\n        cardsData: [\n          {\n            title: 'INFORME DE ACTIVIDADES',\n            description: '',\n            items: [\n              { label: 'Actividades 2021' },\n              { label: 'Actividades 2020' },\n              { label: 'Actividades 2019' },\n              { label: 'Actividades 2018' },\n              { label: 'Actividades 2017' },\n              { label: 'Actividades 2016' },\n              { label: 'Actividades 2015' }\n            ],\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'INFORMES TRIMESTRALES',\n            description: '',\n            items: [\n              { label: 'Informe 2021' },\n              { label: 'Informe 2020' },\n              { label: 'Informe 2019' },\n              { label: 'Informe 2018' },\n              { label: 'Informe 2017' },\n              { label: 'Informe 2016' },\n              { label: 'Informe 2015' }\n            ],\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'PROGRAMA ANUAL DE TRABAJO',\n            description: '',\n            items: [\n              { label: 'Programa 2021' },\n              { label: 'Programa 2020' },\n              { label: 'Programa 2019' },\n              { label: 'Programa 2018' },\n              { label: 'Programa 2017' },\n              { label: 'Programa 2016' },\n              { label: 'Programa 2015' }\n            ],\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'BITÁCORAS DE TRANSMISIÓN EN SEÑAL ABIERTA',\n            description: '',\n            items: [\n              { label: 'Bitácoras 2021' },\n              { label: 'Bitácoras 2020' },\n              { label: 'Bitácoras 2019' },\n              { label: 'Bitácoras 2018' },\n              { label: 'Bitácoras 2017' },\n              { label: 'Bitácoras 2016' },\n              { label: 'Bitácoras 2015' }\n            ],\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'BASE DE DATOS DE ACERVO VIDEOGRÁFICO',\n            description: '',\n            items: [\n              { label: 'Acervo videográfico 2022' },\n              { label: 'Acervo videográfico 2021' },\n              { label: 'Acervo videográfico 2020' },\n              { label: 'Acervo videográfico 2019' },\n              { label: 'Acervo videográfico 2018' },\n              { label: 'Acervo videográfico 2017' },\n              { label: 'Acervo videográfico 2016' },\n              { label: 'Acervo videográfico 2015' }\n            ],\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'ESTADÍSTICAS DE PLATAFORMAS DIGITALES DEL CANAL',\n            description: '',\n            items: [\n              { label: 'Estadísticas 2021' },\n              { label: 'Estadísticas 2020' },\n              { label: 'Estadísticas 2019' },\n              { label: 'Estadísticas 2018' },\n              { label: 'Estadísticas 2017' },\n              { label: 'Estadísticas 2016' },\n              { label: 'Estadísticas 2015' }\n            ],\n            linkUrl: '#',\n            hasButton: true\n          }\n        ]\n      },\n      {\n        sectionKey: 'acerca-nosotros',\n        sectionTitle: 'ACERCA DE NOSOTROS',\n        iconType: 'info',\n        displayOrder: 7,\n        cardsData: [\n          {\n            title: 'MISIÓN',\n            description: 'Difundir las actividades del Poder Legislativo de la Unión, ofrecer información objetiva, veraz y oportuna.',\n            hasButton: false\n          },\n          {\n            title: 'VISIÓN',\n            description: 'Consolidarnos como el medio de comunicación legislativo más plural de América Latina.',\n            hasButton: false\n          },\n          {\n            title: 'VALORES',\n            description: 'Objetividad, Pluralidad, Imparcialidad, Veracidad, Oportunidad, Calidad.',\n            hasButton: false\n          },\n          {\n            title: 'HISTORIA',\n            description: 'El Canal del Congreso inició transmisiones el 11 de octubre de 2000.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'COBERTURA',\n            description: 'El Canal del Congreso tiene cobertura nacional a través de sistemas de cable, satélite, IPTV e Internet.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'SEÑAL EN VIVO',\n            description: 'Transmisión en vivo 24/7 del Canal del Congreso.',\n            linkUrl: '#',\n            hasButton: true\n          },\n          {\n            title: 'PROGRAMACIÓN',\n            description: 'Consulta la programación semanal del Canal del Congreso.',\n            linkUrl: '#',\n            hasButton: true\n          }\n        ]\n      }\n    ]\n\n    // Insert all sections\n    for (const section of transparencySections) {\n      await query(`\n        INSERT INTO transparency_sections (section_key, section_title, icon_type, cards_data, display_order, is_active)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        ON CONFLICT (section_key) DO UPDATE SET\n          section_title = EXCLUDED.section_title,\n          icon_type = EXCLUDED.icon_type,\n          cards_data = EXCLUDED.cards_data,\n          display_order = EXCLUDED.display_order,\n          updated_at = CURRENT_TIMESTAMP\n      `, [\n        section.sectionKey,\n        section.sectionTitle,\n        section.iconType,\n        JSON.stringify(section.cardsData),\n        section.displayOrder,\n        true\n      ])\n    }\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Transparency sections seeded successfully',\n      count: transparencySections.length\n    })\n  } catch (error) {\n    console.error('Error seeding transparency sections:', error)\n    return NextResponse.json({ \n      success: false, \n      error: 'Failed to seed transparency sections' \n    }, { status: 500 })\n  }\n}\n","size_bytes":12146},"app/api/datasets/[id]/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { query } from '@/lib/database'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const body = await request.json()\n    const { \n      title, \n      description, \n      category,\n      updateFrequency,\n      lastUpdated,\n      formats,\n      fileUrl,\n      fileName,\n      fileSize,\n      fileType,\n      displayOrder,\n      isActive \n    } = body\n\n    const result = await query(`\n      UPDATE datasets \n      SET \n        title = $1,\n        description = $2,\n        category = $3,\n        update_frequency = $4,\n        last_updated = $5,\n        formats = $6,\n        file_url = $7,\n        file_name = $8,\n        file_size = $9,\n        file_type = $10,\n        display_order = $11,\n        is_active = $12,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = $13\n      RETURNING *\n    `, [\n      title, \n      description, \n      category,\n      updateFrequency,\n      lastUpdated,\n      formats,\n      fileUrl,\n      fileName,\n      fileSize,\n      fileType,\n      displayOrder,\n      isActive,\n      id\n    ])\n\n    if (result.rows.length === 0) {\n      return NextResponse.json(\n        { error: 'Dataset not found' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error updating dataset:', error)\n    return NextResponse.json(\n      { error: 'Error updating dataset' }, \n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n\n    await query('DELETE FROM datasets WHERE id = $1', [id])\n    \n    return NextResponse.json({ message: 'Dataset deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting dataset:', error)\n    return NextResponse.json(\n      { error: 'Error deleting dataset' }, \n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2030},"components/transparency/TransparencyCard.tsx":{"content":"import Link from 'next/link'\n\ninterface TransparencyFileItem {\n  label: string\n  fileUrl?: string\n  fileType?: string\n}\n\ninterface TransparencyCardProps {\n  title: string\n  description: string\n  linkUrl?: string\n  hasButton?: boolean\n  items?: TransparencyFileItem[]\n}\n\nexport default function TransparencyCard({ \n  title, \n  description, \n  linkUrl, \n  hasButton,\n  items \n}: TransparencyCardProps) {\n  return (\n    <div className=\"relative group flex flex-col items-center\">\n      <div className=\"relative w-full max-w-md px-4 mb-3\">\n        <div className=\"bg-gradient-to-r from-purple-600 via-fuchsia-600 to-purple-600 rounded-full px-8 py-4 shadow-lg shadow-purple-500/50 ring-2 ring-white/20\">\n          <h3 className=\"text-white font-bold text-sm uppercase tracking-wide text-center\">\n            {title}\n          </h3>\n        </div>\n      </div>\n\n      <div className=\"relative w-full max-w-md px-4\">\n        <div className=\"bg-gradient-to-br from-indigo-900/90 via-purple-900/90 to-indigo-900/90 rounded-3xl p-8 min-h-[280px] flex flex-col justify-center shadow-2xl shadow-purple-900/60 backdrop-blur-sm border border-purple-400/20\">\n          {items && items.length > 0 ? (\n            <div className=\"space-y-4\">\n              {description && (\n                <p className=\"text-white/90 text-sm leading-relaxed text-center mb-4\">\n                  {description}\n                </p>\n              )}\n              <ul className=\"space-y-3\">\n                {items.map((item, itemIndex) => (\n                  <li key={itemIndex} className=\"flex items-start gap-3\">\n                    {item.fileUrl ? (\n                      <a \n                        href={item.fileUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-purple-200 hover:text-white transition-colors flex items-center gap-2 group/item\"\n                      >\n                        <svg className=\"w-4 h-4 flex-shrink-0 mt-0.5 group-hover/item:scale-110 transition-transform\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z\" clipRule=\"evenodd\" />\n                        </svg>\n                        <span className=\"text-sm\">{item.label}</span>\n                        {item.fileType && (\n                          <span className=\"text-xs bg-fuchsia-500/30 px-2 py-0.5 rounded\">\n                            {item.fileType.toUpperCase()}\n                          </span>\n                        )}\n                      </a>\n                    ) : (\n                      <span className=\"text-purple-200 text-sm flex items-center gap-2\">\n                        <span className=\"w-1.5 h-1.5 rounded-full bg-fuchsia-400\"></span>\n                        {item.label}\n                      </span>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ) : (\n            <p className=\"text-white/95 text-sm leading-relaxed text-center\">\n              {description}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {hasButton && linkUrl && (\n        <Link \n          href={linkUrl}\n          aria-label={`Ver más sobre ${title}`}\n          className=\"mt-6 flex items-center justify-center w-14 h-14 rounded-full bg-gradient-to-r from-purple-600 to-fuchsia-600 shadow-lg shadow-purple-500/50 hover:scale-110 transition-transform ring-2 ring-white/20 group-hover:shadow-xl group-hover:shadow-purple-500/70 focus:outline-none focus:ring-4 focus:ring-purple-400\"\n        >\n          <svg \n            className=\"w-8 h-8 text-white\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n            aria-hidden=\"true\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M12 4v16m8-8H4\" />\n          </svg>\n        </Link>\n      )}\n    </div>\n  )\n}\n","size_bytes":4133},"app/admin/datasets/page.tsx":{"content":"\n\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Plus, Upload, Download, Trash2, FileText, Edit, Eye } from \"lucide-react\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Switch } from \"@/components/ui/switch\"\n\ninterface Dataset {\n  id: string\n  title: string\n  description: string\n  category: string\n  update_frequency: string\n  last_updated: string\n  formats: string\n  file_url: string\n  file_name: string\n  file_size: number\n  file_type: string\n  display_order: number\n  is_active: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport default function DatasetsAdmin() {\n  const [datasets, setDatasets] = useState<Dataset[]>([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [editingDataset, setEditingDataset] = useState<Dataset | null>(null)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    category: 'legislativo',\n    updateFrequency: 'Mensual',\n    formats: 'CSV, JSON, XLSX',\n    displayOrder: 0,\n    isActive: true\n  })\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [isUploading, setIsUploading] = useState(false)\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    loadDatasets()\n  }, [])\n\n  const loadDatasets = async () => {\n    try {\n      const response = await fetch('/api/datasets')\n      if (response.ok) {\n        const data = await response.json()\n        setDatasets(data)\n      }\n    } catch (error) {\n      console.error('Error loading datasets:', error)\n    }\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      const allowedTypes = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.csv']\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase()\n      \n      if (!allowedTypes.includes(fileExtension)) {\n        setMessage('Solo se permiten archivos PDF, DOC, DOCX, XLS, XLSX, CSV')\n        return\n      }\n\n      if (file.size > 50 * 1024 * 1024) {\n        setMessage('El archivo no puede ser mayor a 50MB')\n        return\n      }\n\n      setSelectedFile(file)\n      setMessage('')\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (!editingDataset && !selectedFile) {\n      setMessage('Por favor selecciona un archivo')\n      return\n    }\n\n    setIsUploading(true)\n    try {\n      let fileUrl = editingDataset?.file_url || ''\n      let fileName = editingDataset?.file_name || ''\n      let fileSize = editingDataset?.file_size || 0\n      let fileType = editingDataset?.file_type || ''\n\n      if (selectedFile) {\n        const uploadFormData = new FormData()\n        uploadFormData.append('file', selectedFile)\n        uploadFormData.append('type', 'documents')\n\n        const uploadResponse = await fetch('/api/upload', {\n          method: 'POST',\n          body: uploadFormData\n        })\n\n        if (!uploadResponse.ok) {\n          throw new Error('Error uploading file')\n        }\n\n        const uploadResult = await uploadResponse.json()\n        fileUrl = uploadResult.url\n        fileName = selectedFile.name\n        fileSize = selectedFile.size\n        fileType = selectedFile.name.split('.').pop()?.toLowerCase() || ''\n      }\n\n      const datasetData = {\n        title: formData.title,\n        description: formData.description,\n        category: formData.category,\n        updateFrequency: formData.updateFrequency,\n        lastUpdated: new Date().toISOString(),\n        formats: formData.formats,\n        fileUrl,\n        fileName,\n        fileSize,\n        fileType,\n        displayOrder: formData.displayOrder,\n        isActive: formData.isActive\n      }\n\n      const url = editingDataset ? `/api/datasets/${editingDataset.id}` : '/api/datasets'\n      const method = editingDataset ? 'PUT' : 'POST'\n\n      const saveResponse = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(datasetData)\n      })\n\n      if (saveResponse.ok) {\n        setMessage(editingDataset ? 'Dataset actualizado exitosamente' : 'Dataset creado exitosamente')\n        setIsDialogOpen(false)\n        resetForm()\n        loadDatasets()\n      } else {\n        throw new Error('Error saving dataset')\n      }\n    } catch (error) {\n      setMessage('Error al guardar el dataset: ' + (error instanceof Error ? error.message : 'Unknown error'))\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const handleEdit = (dataset: Dataset) => {\n    setEditingDataset(dataset)\n    setFormData({\n      title: dataset.title,\n      description: dataset.description,\n      category: dataset.category,\n      updateFrequency: dataset.update_frequency,\n      formats: dataset.formats,\n      displayOrder: dataset.display_order,\n      isActive: dataset.is_active\n    })\n    setSelectedFile(null)\n    setIsDialogOpen(true)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('¿Estás seguro de que quieres eliminar este dataset?')) return\n\n    try {\n      const response = await fetch(`/api/datasets/${id}`, {\n        method: 'DELETE'\n      })\n\n      if (response.ok) {\n        setMessage('Dataset eliminado exitosamente')\n        loadDatasets()\n      }\n    } catch (error) {\n      setMessage('Error al eliminar el dataset')\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      category: 'legislativo',\n      updateFrequency: 'Mensual',\n      formats: 'CSV, JSON, XLSX',\n      displayOrder: 0,\n      isActive: true\n    })\n    setSelectedFile(null)\n    setEditingDataset(null)\n    setMessage('')\n  }\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    if (bytes === 0) return '0 Bytes'\n    const i = Math.floor(Math.log(bytes) / Math.log(1024))\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestión de Datos Abiertos</h1>\n          <p className=\"text-gray-600\">Administra los datasets disponibles para descarga pública</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={(open) => {\n          setIsDialogOpen(open)\n          if (!open) resetForm()\n        }}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuevo Dataset\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingDataset ? 'Editar Dataset' : 'Nuevo Dataset'}</DialogTitle>\n              <DialogDescription>\n                Sube archivos Excel, Word, PDF o CSV para datos abiertos\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit}>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título del Dataset</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    required\n                    placeholder=\"Ej: Asistencias de Legisladores\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"description\">Descripción</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                    placeholder=\"Describe el contenido y propósito de este dataset\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"category\">Categoría</Label>\n                    <select\n                      id=\"category\"\n                      value={formData.category}\n                      onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                      className=\"w-full p-2 border rounded\"\n                    >\n                      <option value=\"legislativo\">Legislativo</option>\n                      <option value=\"parlamentario\">Parlamentario</option>\n                      <option value=\"presupuesto\">Presupuesto</option>\n                      <option value=\"transparencia\">Transparencia</option>\n                      <option value=\"otro\">Otro</option>\n                    </select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"updateFrequency\">Frecuencia de Actualización</Label>\n                    <select\n                      id=\"updateFrequency\"\n                      value={formData.updateFrequency}\n                      onChange={(e) => setFormData({ ...formData, updateFrequency: e.target.value })}\n                      className=\"w-full p-2 border rounded\"\n                    >\n                      <option value=\"Diario\">Diario</option>\n                      <option value=\"Semanal\">Semanal</option>\n                      <option value=\"Quincenal\">Quincenal</option>\n                      <option value=\"Mensual\">Mensual</option>\n                      <option value=\"Trimestral\">Trimestral</option>\n                      <option value=\"Anual\">Anual</option>\n                    </select>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"formats\">Formatos Disponibles</Label>\n                    <Input\n                      id=\"formats\"\n                      value={formData.formats}\n                      onChange={(e) => setFormData({ ...formData, formats: e.target.value })}\n                      placeholder=\"CSV, JSON, XLSX\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"displayOrder\">Orden de Visualización</Label>\n                    <Input\n                      id=\"displayOrder\"\n                      type=\"number\"\n                      value={formData.displayOrder}\n                      onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <Label htmlFor=\"isActive\">Activo (visible en el sitio público)</Label>\n                </div>\n                <div>\n                  <Label htmlFor=\"file\">Archivo del Dataset</Label>\n                  <Input\n                    id=\"file\"\n                    type=\"file\"\n                    onChange={handleFileChange}\n                    accept=\".pdf,.doc,.docx,.xls,.xlsx,.csv\"\n                  />\n                  {selectedFile && (\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Archivo: {selectedFile.name} ({formatFileSize(selectedFile.size)})\n                    </p>\n                  )}\n                  {editingDataset && !selectedFile && (\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      Archivo actual: {editingDataset.file_name}\n                    </p>\n                  )}\n                </div>\n              </div>\n              {message && (\n                <Alert className=\"mt-4\">\n                  <AlertDescription>{message}</AlertDescription>\n                </Alert>\n              )}\n              <DialogFooter className=\"mt-6\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isUploading}>\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  {isUploading ? 'Guardando...' : editingDataset ? 'Actualizar' : 'Crear'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {message && (\n        <Alert className=\"mb-4\">\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Datasets</CardTitle>\n          <CardDescription>\n            Lista de todos los datasets disponibles\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Título</TableHead>\n                <TableHead>Categoría</TableHead>\n                <TableHead>Archivo</TableHead>\n                <TableHead>Actualización</TableHead>\n                <TableHead>Estado</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {datasets.map((dataset) => (\n                <TableRow key={dataset.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{dataset.title}</div>\n                      {dataset.description && (\n                        <div className=\"text-sm text-gray-600 line-clamp-2\">{dataset.description}</div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      {dataset.category}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <FileText className=\"h-4 w-4 mr-2 text-blue-600\" />\n                      <div className=\"text-sm\">\n                        <div>{dataset.file_name}</div>\n                        <div className=\"text-gray-500\">{formatFileSize(dataset.file_size)}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <div>{dataset.update_frequency}</div>\n                      <div className=\"text-gray-500\">\n                        {new Date(dataset.last_updated).toLocaleDateString('es-MX')}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      dataset.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n                    }`}>\n                      {dataset.is_active ? 'Activo' : 'Inactivo'}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(dataset)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(dataset.file_url, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          const link = document.createElement('a')\n                          link.href = dataset.file_url\n                          link.download = dataset.file_name\n                          link.click()\n                        }}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(dataset.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":17298},"app/api/datasets/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server'\nimport { query } from '@/lib/database'\n\nexport async function GET() {\n  try {\n    const result = await query(`\n      SELECT * FROM datasets \n      WHERE is_active = true\n      ORDER BY display_order ASC, created_at DESC\n    `)\n    \n    return NextResponse.json(result.rows || [])\n  } catch (error) {\n    console.error('Error fetching datasets:', error)\n    return NextResponse.json(\n      { error: 'Error fetching datasets' }, \n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { \n      title, \n      description, \n      category,\n      updateFrequency,\n      lastUpdated,\n      formats,\n      fileUrl,\n      fileName,\n      fileSize,\n      fileType,\n      displayOrder,\n      isActive \n    } = body\n\n    const result = await query(`\n      INSERT INTO datasets (\n        title, \n        description, \n        category,\n        update_frequency,\n        last_updated,\n        formats,\n        file_url,\n        file_name,\n        file_size,\n        file_type,\n        display_order,\n        is_active\n      )\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n      RETURNING *\n    `, [\n      title, \n      description, \n      category,\n      updateFrequency,\n      lastUpdated,\n      formats,\n      fileUrl,\n      fileName,\n      fileSize,\n      fileType,\n      displayOrder || 0,\n      isActive !== false\n    ])\n\n    return NextResponse.json(result.rows[0])\n  } catch (error) {\n    console.error('Error creating dataset:', error)\n    return NextResponse.json(\n      { error: 'Error creating dataset' }, \n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1702}},"version":2}