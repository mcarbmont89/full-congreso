import Link from "next/link"
import Image from "next/image"
import { Play } from "lucide-react"
import Footer from "@/components/footer"
import Navbar from "@/components/navbar"

export const dynamic = 'force-dynamic'

async function getProgram(slug: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const response = await fetch(`${baseUrl}/api/radio/programs`, {
      cache: 'no-store'
    })
    if (!response.ok) {
      throw new Error('Failed to fetch programs')
    }
    const programs = await response.json()

    // Find program by slug
    const program = programs.find((p: any) => 
      p.title.toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[áéíóú]/g, (match: string) => {
          const accents: { [key: string]: string } = { 'á': 'a', 'é': 'e', 'í': 'i', 'ó': 'o', 'ú': 'u' }
          return accents[match] || match
        })
        .replace(/[^a-z0-9-]/g, '') === slug
    )

    return program
  } catch (error) {
    console.error('Error fetching program:', error)
    return null
  }
}

async function getEpisodesByProgram(programTitle: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const response = await fetch(`${baseUrl}/api/radio/episodes?program=${encodeURIComponent(programTitle)}`, {
      cache: 'no-store'
    })
    if (!response.ok) {
      throw new Error('Failed to fetch episodes')
    }
    return await response.json()
  } catch (error) {
    console.error('Error fetching episodes:', error)
    return []
  }
}

export default async function ProgramPage({ params }: { params: Promise<{ programSlug: string }> }) {
  const { programSlug } = await params
  const program = await getProgram(programSlug)
  const episodes = program ? await getEpisodesByProgram(program.title) : []

  if (!program) {
    return (
      <div className="flex flex-col min-h-screen bg-white">
        <Navbar />
        <main className="flex-grow flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">Programa no encontrado</h1>
            <p className="text-gray-600 mb-8">El programa que buscas no existe.</p>
            <Link href="/radio" className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700">
              Volver a Radio
            </Link>
          </div>
        </main>
        <Footer />
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen bg-white">
      <Navbar />

      <main className="flex-grow">
        {/* Program Header */}
        <section className="bg-purple-900 text-white py-16">
          <div className="container mx-auto px-4">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 relative mr-3">
                <Image
                  src="/images/radio-congreso-logo.png"
                  alt="Radio Congreso Logo"
                  width={48}
                  height={48}
                  className="object-contain"
                />
              </div>
              <h1 className="text-3xl font-bold uppercase">Radio Congreso</h1>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="md:col-span-2">
                <h2 className="text-5xl font-bold mb-6">{program.title}</h2>
                <div className="prose prose-lg max-w-none rich-text-content">
                  <div dangerouslySetInnerHTML={{ __html: program.description || '' }} />
                </div>

                {program.latestEpisode?.title && (
                  <div className="bg-purple-800 rounded-lg p-6 mb-6">
                    <h3 className="text-lg font-semibold mb-2">Último episodio:</h3>
                    <p className="text-purple-200 mb-1">{program.latestEpisode.title}</p>
                    <p className="text-purple-300 text-sm">
                      {program.latestEpisode.date} • {program.latestEpisode.duration}
                    </p>
                  </div>
                )}
              </div>

              <div className="flex justify-center md:justify-end">
                <div className="relative w-64 h-64 rounded-lg overflow-hidden">
                  <Image
                    src={program.imageUrl || "/images/radio-hero-banner.png"}
                    alt={program.title}
                    fill
                    className="object-cover"
                  />
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Navigation Breadcrumb */}
        <section className="bg-gray-100 py-4">
          <div className="container mx-auto px-4">
            <nav className="text-sm">
              <Link href="/radio" className="text-purple-900 hover:underline">Radio</Link>
              <span className="mx-2">/</span>
              <span className="text-gray-600">{program.title}</span>
            </nav>
          </div>
        </section>

        {/* Episodes List */}
        <section className="py-12 bg-gray-50">
          <div className="container mx-auto px-4">
            <h3 className="text-3xl font-bold mb-8 text-center">Todos los episodios</h3>

            {episodes.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {episodes.map((episode: any) => (
                  <div key={episode.id} className="bg-white rounded-lg shadow-md overflow-hidden">
                    <div className="relative h-48">
                      <Image
                        src={episode.imageUrl || program.imageUrl || "/images/radio-hero-banner.png"}
                        alt={episode.title}
                        width={384}
                        height={192}
                        className="object-cover w-full h-full"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end">
                        <div className="p-4 w-full">
                          <div className="flex justify-between items-center">
                            <span className="text-white text-sm">{episode.duration}</span>
                            <button className="bg-purple-600 text-white rounded-full p-2 hover:bg-purple-700">
                              <Play className="w-4 h-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div className="p-4">
                      <h4 className="font-bold text-lg mb-2">{episode.title}</h4>
                      <p className="text-gray-600 text-sm mb-3 line-clamp-3">{episode.description}</p>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-500 text-xs">
                          {new Date(episode.publishDate).toLocaleDateString('es-ES')}
                        </span>
                        <span className="text-purple-600 text-sm font-medium">
                          {episode.category}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-16">
                <h4 className="text-2xl font-bold text-gray-800 mb-4">El programa no tiene episodios</h4>
                <p className="text-gray-600 mb-4">Próximamente encontrarás aquí todos los episodios de {program.title}.</p>
                <Link href="/radio" className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 inline-block">
                  Volver a Radio
                </Link>
              </div>
            )}
          </div>
        </section>
      </main>

      <Footer />
    </div>
  )
}